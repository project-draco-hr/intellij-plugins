{
  boolean key=true;
  while (!builder.eof()) {
    final IElementType type=builder.getTokenType();
    if (key) {
      if (JSTokenTypes.LITERALS.contains(type) || isIdentifierToken(type) || JSTokenTypes.EQ == type) {
        final PsiBuilder.Marker mark=builder.mark();
        int i=1;
        IElementType forwardType=null;
        for (; !JSTokenTypes.PARSER_WHITE_SPACE_TOKENS.contains((forwardType=builder.rawLookup(i))); i++)         ;
        if (JSTokenTypes.PARSER_WHITE_SPACE_TOKENS.contains(forwardType) || forwardType == null) {
          for (int j=0; j < i; j++) {
            builder.advanceLexer();
          }
          mark.collapse(AngularJSElementTypes.MESSAGE_FORMAT_SELECTION_KEYWORD);
          key=false;
        }
 else {
          mark.drop();
          builder.error("expected selection keyword");
          return;
        }
      }
 else {
        if (JSTokenTypes.RBRACE == type) {
          expectDoubleRBrace(false);
          return;
        }
        builder.error("expected selection keyword");
        return;
      }
    }
 else {
      if (JSTokenTypes.LBRACE == type) {
        builder.advanceLexer();
        if (!parseInnerMessage())         return;
        key=true;
      }
 else {
        builder.error("expected message in {} delimiters");
        return;
      }
    }
  }
}
