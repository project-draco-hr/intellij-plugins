{
  MojoExecution flexmojosMojoExecution=null;
  MojoExecution flexmojosGeneratorMojoExecution=null;
  for (  Plugin plugin : project.getBuildPlugins()) {
    if (plugin.getGroupId().equals("org.sonatype.flexmojos")) {
      if (flexmojosMojoExecution == null && plugin.getArtifactId().equals("flexmojos-maven-plugin")) {
        flexmojosMojoExecution=createMojoExecution(plugin,"compile-" + project.getPackaging(),project);
      }
 else       if (flexmojosGeneratorMojoExecution == null && plugin.getArtifactId().equals("flexmojos-generator-mojo")) {
        flexmojosGeneratorMojoExecution=createMojoExecution(plugin,"generate",project);
      }
      if (flexmojosMojoExecution != null && flexmojosGeneratorMojoExecution != null) {
        break;
      }
    }
  }
  if (flexmojosMojoExecution == null) {
    return;
  }
  ClassRealm flexmojosPluginRealm=pluginManager.getPluginRealm(session,flexmojosMojoExecution.getMojoDescriptor().getPluginDescriptor());
  flexmojosPluginRealm.addURL(new URL(session.getLocalRepository().getUrl() + "/com/intellij/flex/maven/idea-configurator/1.4.4/idea-configurator-1.4.4.jar"));
  Mojo mojo=null;
  try {
    mojo=mavenPluginManager.getConfiguredMojo(Mojo.class,session,flexmojosMojoExecution);
    for (    String configuratorClassName : configurators) {
      Class configuratorClass=flexmojosPluginRealm.loadClass(configuratorClassName);
      Object configurator=configuratorClass.getConstructor(MavenSession.class).newInstance(session);
      Method preGenerate=configuratorClass.getMethod("preGenerate",MavenProject.class,String.class,MojoExecution.class);
      preGenerate.setAccessible(true);
      preGenerate.invoke(configurator,project,getClassifier(mojo,flexmojosPluginRealm),flexmojosGeneratorMojoExecution);
      try {
        if ("swc".equals(project.getPackaging())) {
          Method generate=configuratorClass.getMethod("generate",Mojo.class);
          generate.setAccessible(true);
          generate.invoke(configurator,mojo);
        }
 else {
          Method generate=configuratorClass.getMethod("generate",Mojo.class,File.class);
          generate.setAccessible(true);
          generate.invoke(configurator,mojo,getSourceFileForSwf(mojo,flexmojosPluginRealm));
        }
      }
  finally {
        configuratorClass.getMethod("postGenerate").invoke(configurator);
      }
    }
  }
  finally {
    mavenPluginManager.releaseMojo(mojo,mojoExecution);
  }
}
