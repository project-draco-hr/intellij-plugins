{
  MavenProject project=session.getCurrentProject();
  String packaging=project.getPackaging();
  if (!Utils.isFlashProject(project)) {
    return;
  }
  Plugin flexmojosPlugin=null;
  for (  Plugin plugin : project.getBuildPlugins()) {
    if (plugin.getGroupId().equals("org.sonatype.flexmojos") && plugin.getArtifactId().equals("flexmojos-maven-plugin")) {
      flexmojosPlugin=plugin;
    }
  }
  if (flexmojosPlugin == null) {
    return;
  }
  final ClassRealm flexmojosPluginRealm;
  MojoExecution flexmojosMojoExecution;
  try {
    MojoDescriptor flexmojosMojoDescriptor=pluginManager.getMojoDescriptor(flexmojosPlugin,"compile-" + packaging,project.getRemotePluginRepositories(),session.getRepositorySession());
    flexmojosMojoExecution=new MojoExecution(flexmojosMojoDescriptor,"default-cli",MojoExecution.Source.CLI);
    flexmojosPluginRealm=pluginManager.getPluginRealm(session,flexmojosMojoDescriptor.getPluginDescriptor());
    lifeCycleExecutionPlanCalculator.setupMojoExecution(session,project,flexmojosMojoExecution);
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Cannot generate flex-config",e);
  }
  Mojo mojo=null;
  try {
    mojo=mavenPluginManager.getConfiguredMojo(Mojo.class,session,flexmojosMojoExecution);
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Cannot generate flex-config",e);
  }
 finally {
    mavenPluginManager.releaseMojo(mojo,mojoExecution);
  }
  MethodComparator.class.getName();
  try {
    List<IdeaConfigurator> configurators=new ArrayList<IdeaConfigurator>(2);
    if (generateNonShareable) {
      configurators.add(new IdeaConfigurator());
    }
    if (generateShareable) {
      configurators.add(new ShareableFlexConfigGenerator());
    }
    modifyOurClassRealm(flexmojosPluginRealm);
    for (    IdeaConfigurator configurator : configurators) {
      configurator.init(session,project,getClassifier(mojo,flexmojosPluginRealm));
      if ("swc".equals(packaging)) {
        configurator.buildConfiguration(mojo,flexmojosPluginRealm.loadClass("org.sonatype.flexmojos.compiler.ICompcConfiguration"));
      }
 else {
        configurator.buildConfiguration(mojo,getSourceFileForSwf(mojo,flexmojosPluginRealm),flexmojosPluginRealm.loadClass("org.sonatype.flexmojos.compiler.ICommandLineConfiguration"));
      }
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Failed to execute configurator: " + e.getMessage(),e);
  }
}
