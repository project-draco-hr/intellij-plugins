{
  Condition<String> condition=null;
  if (getName().equals("testDelete")) {
    addLibrary(sdkModificator,"flash-integration_4.1.swc");
  }
 else   if (getName().equals("testIgnoreSwcWithoutLibraryFile")) {
    addLibrary(sdkModificator,"swcWithoutLibrarySwf.swc");
  }
 else   if (getName().equals("testMoveFlexSdkLibToSdkLibsIfNot")) {
    condition=new Condition<String>(){
      @Override public boolean value(      String name){
        return !name.startsWith(FlexLibsNames.FRAMEWORK);
      }
    }
;
  }
  super.modifySdk(sdk,sdkModificator,condition);
  if (getName().equals("testDeleteIfAllDefitionsHaveUnresolvedDependencies")) {
    addLibrary(sdkModificator,"spark_dmv_4.5.swc");
  }
 else   if (getName().equals("testResolveToClassWithBiggestTimestamp")) {
    final String path=getTestDataPath() + "/ResolveToClassWithBiggestTimestamp/bin/";
    addLibrary(sdkModificator,path + "lib_1.swc");
    addLibrary(sdkModificator,path + "lib_2.swc");
  }
  Disposer.register(myModule,new Disposable(){
    @Override public void dispose(){
      final AccessToken token=WriteAction.start();
      try {
        ProjectJdkTable.getInstance().removeJdk(sdk);
      }
  finally {
        token.finish();
      }
    }
  }
);
}
