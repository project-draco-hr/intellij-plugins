{
  final MavenDomDependency dependency=getDependency((XmlTag)problemDescriptor.getPsiElement());
  final ObrMavenResult mavenResult=ObrSearchDialog.queryForMavenArtifact(project,dependency.getArtifactId().toString());
  if (mavenResult != null) {
    final PsiFile psiFile=problemDescriptor.getPsiElement().getContainingFile();
    new WriteCommandAction(project,psiFile){
      protected void run(      Result result) throws Throwable {
        MavenDomProjectModel model=MavenDomUtil.getMavenDomProjectModel(getProject(),psiFile.getVirtualFile());
        MavenDomDependency dummy=model.getDependencies().addDependency();
        dummy.getArtifactId().setStringValue(mavenResult.getArtifactId());
        dummy.getVersion().setStringValue(mavenResult.getVersion());
        dummy.getGroupId().setStringValue(mavenResult.getGroupId());
        if (!"".equals(dependency.getScope().getStringValue())) {
          dummy.getScope().setStringValue(dependency.getScope().getStringValue());
        }
        PsiElement newDep=dummy.getXmlElement();
        PsiElement oldDep=dependency.getXmlElement();
        oldDep.getParent().addAfter(newDep.copy(),oldDep);
        oldDep.delete();
        newDep.delete();
        MavenRepository[] repos=mavenResult.getBundleRepository().getMavenRepositories();
        List<MavenDomRepository> repositories=model.getRepositories().getRepositories();
        List<MavenRepository> knownRepositories=new ArrayList<MavenRepository>();
        for (        MavenDomRepository repository : repositories) {
          String knownRepoUrl=repository.getUrl().getStringValue();
          for (          MavenRepository repo : repos) {
            if (repo.getRepositoryUrl().equals(knownRepoUrl)) {
              knownRepositories.add(repo);
              break;
            }
          }
        }
        List<MavenRepository> unknownRepositories=new ArrayList<MavenRepository>(Arrays.asList(repos));
        unknownRepositories.removeAll(knownRepositories);
        for (        MavenRepository unknownRepository : unknownRepositories) {
          MavenDomRepository repo=model.getRepositories().addRepository();
          repo.getId().setStringValue(unknownRepository.getRepositoryId());
          repo.getUrl().setStringValue(unknownRepository.getRepositoryUrl());
          repo.getName().setStringValue(unknownRepository.getRepositoryDescription());
        }
      }
    }
.execute();
    FileDocumentManager docManager=FileDocumentManager.getInstance();
    com.intellij.openapi.editor.Document doc=docManager.getDocument(psiFile.getVirtualFile());
    docManager.saveDocument(doc);
    PsiDocumentManager.getInstance(project).commitDocument(doc);
  }
}
