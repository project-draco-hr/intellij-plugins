{
  final Project project=e.getData(CommonDataKeys.PROJECT);
  if (project == null)   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final DataContext dataContext=e.getDataContext();
  final FindManager findManager=FindManager.getInstance(project);
  final FindModel findModel=(FindModel)findManager.getFindInFileModel().clone();
  final List<AngularItem> validResults=new ArrayList<AngularItem>();
  findModel.setRegularExpressions(true);
  findModel.setFileFilter("*.js, *.html");
  findModel.setStringToFind("\\.(controller|filter|service|factory|module|value|constant|directive|provider)\\(\\s*(\"|')([^(\"|')]+)(\"|')");
  findModel.setStringToReplace("$3");
  final Collection<Usage> moduleMethodUsages=getAngularUsages(project,dataContext,findModel);
  List<AngularItem> moduleMethodResults=getValidResults(project,findModel,moduleMethodUsages,MODULE_METHODS);
  validResults.addAll(moduleMethodResults);
  findModel.setStringToFind("Ctrl\\(\\s*\\$scope");
  findModel.setStringToReplace("$0");
  final Collection<Usage> ctrlByConventionUsages=getAngularUsages(project,dataContext,findModel);
  List<AngularItem> ctrlByConventionResults=getValidResults(project,findModel,ctrlByConventionUsages,CTRL_CONVENTIONS);
  validResults.addAll(ctrlByConventionResults);
  findModel.setStringToFind("ng\\-controller\\=\"([^(\"]+)\"");
  findModel.setStringToReplace("$1");
  final Collection<Usage> ngControllerUsages=getAngularUsages(project,dataContext,findModel);
  List<AngularItem> ngControllerResults=getValidResults(project,findModel,ngControllerUsages,NG_CONTROLLER);
  validResults.addAll(ngControllerResults);
  final GotoAngularModel model=new GotoAngularModel(project,validResults);
  showNavigationPopup(e,model,new GotoActionBase.GotoActionCallback<Object>(){
    @Override protected ChooseByNameFilter<Object> createFilter(    @NotNull ChooseByNamePopup popup){
      popup.setSearchInAnyPlace(true);
      popup.setShowListForEmptyPattern(true);
      popup.setMaximumListSizeLimit(255);
      return super.createFilter(popup);
    }
    @Override public void elementChosen(    ChooseByNamePopup popup,    final Object element){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          PsiElement psi=((AngularItem)element).getElement();
          NavigationUtil.activateFileWithPsiElement(psi.getNavigationElement());
        }
      }
);
    }
  }
);
}
