{
  if (!(element instanceof XmlTag)) {
    return;
  }
  if (StrutsFacet.getInstance(element) == null) {
    return;
  }
  final XmlTag xmlTag=(XmlTag)element;
  final String tagName=xmlTag.getLocalName();
  if (Arrays.binarySearch(TAGS_WITH_ACTION_ATTRIBUTE,tagName) < 0) {
    return;
  }
  final String uiTaglibPrefix=getUITaglibPrefix(xmlTag);
  if (uiTaglibPrefix == null || !Comparing.equal(xmlTag.getNamespacePrefix(),uiTaglibPrefix)) {
    return;
  }
  final String actionPath=Comparing.equal(tagName,ACTION_ATTRIBUTE_NAME) ? xmlTag.getAttributeValue("name") : xmlTag.getAttributeValue(ACTION_ATTRIBUTE_NAME);
  if (actionPath == null) {
    return;
  }
  final StrutsModel strutsModel=StrutsManager.getInstance(element.getProject()).getCombinedModel(ModuleUtil.findModuleForPsiElement(element));
  if (strutsModel == null) {
    return;
  }
  final String namespace=xmlTag.getAttributeValue("namespace");
  final List<Action> actions=strutsModel.findActionsByName(actionPath,namespace);
  if (actions.isEmpty()) {
    return;
  }
  final NavigationGutterIconBuilder<PsiElement> gutterIconBuilder=NavigationGutterIconBuilder.create(StrutsIcons.ACTION_CLASS).setTooltipText(StrutsBundle.message("annotators.jsp.goto.action.method")).setEmptyPopupText(StrutsBundle.message("annotators.jsp.goto.action.method.notfound")).setTargets(new NotNullLazyValue<Collection<? extends PsiElement>>(){
    @NotNull protected Collection<PsiMethod> compute(){
      return ContainerUtil.mapNotNull(actions,ACTION_METHOD_FUNCTION);
    }
  }
);
  lineMarkerInfos.add(gutterIconBuilder.createLineMarkerInfo(xmlTag));
}
