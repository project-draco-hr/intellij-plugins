{
  definition.resolved=ResolvedState.YES;
  final String[] dependencies=definition.dependencies;
  for (int i=0, dependenciesLength=dependencies.length; i < dependenciesLength; i++) {
    final String dependencyId=dependencies[i];
    final Definition dependency=definitionMap.get(dependencyId);
    if (dependency == null && useIndexForFindDefinitions) {
      final int length=dependencyId.length();
      if (definitionSearchScope == null) {
        definitionSearchScope=module.getModuleWithDependenciesAndLibrariesScope(false);
        fqnBuffer=new char[Math.max(length,512)];
      }
 else       if (fqnBuffer.length < length) {
        fqnBuffer=new char[length];
      }
      dependencyId.getChars(0,length,fqnBuffer,0);
      fqnBuffer[CharArrayUtil.lastIndexOf(fqnBuffer,':',1,length - 1)]='.';
      if (JSResolveUtil.findClassByQName(new String(fqnBuffer,0,length),definitionSearchScope) != null) {
        dependencies[i]=null;
        continue;
      }
    }
    final BufferWrapper depAbcData;
    if (dependency == null) {
      depAbcData=null;
    }
 else {
      depAbcData=dependency.doAbcData;
      dependency.doAbcData=null;
    }
    if (dependency == null || dependency.resolved == ResolvedState.NO || (dependency.resolved == ResolvedState.UNKNOWN && !processDependencies(decoders,dependency,definitionMap))) {
      definition.markAsUnresolved();
      definition.resolved=ResolvedState.NO;
      return false;
    }
    if (depAbcData != null) {
      decoders.add(new Decoder(depAbcData));
      dependency.doAbcData=null;
    }
  }
  return true;
}
