{
  definition.hasUnresolvedDependencies=UnresolvedState.NO;
  final CharSequence[] dependencies=definition.dependencies;
  for (int i=0, dependenciesLength=dependencies.length; i < dependenciesLength; i++) {
    final CharSequence dependencyId=dependencies[i];
    final Definition dependency=definitionMap.get(dependencyId);
    if (dependency == null && useIndexForFindDefinitions) {
      final int length=dependencyId.length();
      if (definitionSearchScope == null) {
        definitionSearchScope=module.getModuleWithDependenciesAndLibrariesScope(false);
        fqnBuffer=new char[Math.max(length,512)];
      }
 else       if (fqnBuffer.length < length) {
        fqnBuffer=new char[length];
      }
      if (dependencyId instanceof CharSequenceBackedByArray) {
        ((CharSequenceBackedByArray)dependencyId).getChars(fqnBuffer,0);
      }
 else {
        ((String)dependencyId).getChars(0,length,fqnBuffer,0);
      }
      fqnBuffer[CharArrayUtil.lastIndexOf(fqnBuffer,':',1,length - 1)]='.';
      if (JSResolveUtil.findClassByQName(new String(fqnBuffer,0,length),definitionSearchScope) != null) {
        dependencies[i]=null;
        continue;
      }
    }
    if (dependency == null || dependency.hasUnresolvedDependencies == UnresolvedState.YES || (dependency.hasUnresolvedDependencies == UnresolvedState.UNKNOWN && hasUnresolvedDependencies(dependency,dependencyId,definitionMap))) {
      definition.markAsUnresolved(definitionName);
      definition.hasUnresolvedDependencies=UnresolvedState.YES;
      return true;
    }
  }
  return false;
}
