{
  useIndexForFindDefinitions=!isFromSdk;
  ArrayList<LibrarySetItem> resourceBundleOnlyItems=null;
  final THashMap<CharSequence,Definition> definitionMap=new THashMap<CharSequence,Definition>(libraries.size() * 128);
  final List<LibrarySetItem> unsortedItems=collectItems(libraries,isFromSdk,definitionMap);
  AbcMerger abcMerger=new AbcMerger(definitionMap,flexSdkVersion,outFile);
  for (  LibrarySetItem item : unsortedItems) {
    if (!item.hasDefinitions()) {
      if (item.library.hasResourceBundles()) {
        if (resourceBundleOnlyItems == null) {
          resourceBundleOnlyItems=new ArrayList<LibrarySetItem>();
        }
        resourceBundleOnlyItems.add(item);
      }
      continue;
    }
    abcMerger.process(item.library);
  }
  for (  Entry<CharSequence,Definition> entry : definitionMap.entrySet()) {
    final Definition definition=entry.getValue();
    if (definition.dependencies != null && (definition.hasUnresolvedDependencies == UnresolvedState.NO || (definition.hasUnresolvedDependencies == UnresolvedState.UNKNOWN && !hasUnresolvedDependencies(definition,entry.getKey(),definitionMap)))) {
      final LibrarySetItem library=definition.getLibrary();
      for (      CharSequence dependencyId : definition.dependencies) {
        if (dependencyId == null) {
          continue;
        }
        final LibrarySetItem dependencyLibrary=definitionMap.get(dependencyId).getLibrary();
        if (library != dependencyLibrary) {
          if (dependencyLibrary.successors.add(library)) {
            library.inDegree++;
          }
          if (dependencyLibrary.parents.contains(library)) {
            throw new IllegalStateException(library + " cannot depends on " + dependencyLibrary+ ", because "+ dependencyLibrary+ " has "+ library+ " as parent");
          }
          library.parents.add(dependencyLibrary);
        }
      }
    }
  }
  abcMerger.end();
  final ArrayList<LibrarySetItem> items=new ArrayList<LibrarySetItem>(unsortedItems.size());
  return new SortResult(items,resourceBundleOnlyItems);
}
