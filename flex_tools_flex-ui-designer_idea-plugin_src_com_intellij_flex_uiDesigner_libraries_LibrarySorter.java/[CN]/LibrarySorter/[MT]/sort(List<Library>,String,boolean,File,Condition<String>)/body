{
  useIndexForFindDefinitions=!isFromSdk;
  ArrayList<LibrarySetItem> resourceBundleOnlyItems=null;
  final THashMap<CharSequence,Definition> definitionMap=new THashMap<CharSequence,Definition>(libraries.size() * 128,AbcFilter.HASHING_STRATEGY);
  final List<LibrarySetItem> unsortedItems=collectItems(libraries,isFromSdk,definitionMap,isExternal);
  AbcMerger abcMerger=new AbcMerger(definitionMap,flexSdkVersion,outFile);
  final ArrayList<LibrarySetItem> items=new ArrayList<LibrarySetItem>(unsortedItems.size());
  for (  LibrarySetItem item : unsortedItems) {
    if (!item.hasDefinitions()) {
      if (item.library.hasResourceBundles()) {
        if (resourceBundleOnlyItems == null) {
          resourceBundleOnlyItems=new ArrayList<LibrarySetItem>();
        }
        resourceBundleOnlyItems.add(item);
      }
      continue;
    }
    items.add(item);
    abcMerger.process(item.library);
  }
  final List<Decoder> decoders=new ArrayList<Decoder>(definitionMap.size());
  definitionMap.forEachValue(new TObjectProcedure<Definition>(){
    @Override public boolean execute(    Definition definition){
      if (definition.doAbcData != null && definition.dependencies != null && (definition.unresolvedState == UnresolvedState.NO || (definition.unresolvedState == UnresolvedState.UNKNOWN && processDependencies(decoders,definition,definitionMap)))) {
        if (definition.doAbcData != null) {
          decoders.add(new Decoder(definition.doAbcData));
          definition.doAbcData=null;
        }
      }
      return true;
    }
  }
);
  abcMerger.end(decoders,flexSdkVersion);
  return new SortResult(items,resourceBundleOnlyItems);
}
