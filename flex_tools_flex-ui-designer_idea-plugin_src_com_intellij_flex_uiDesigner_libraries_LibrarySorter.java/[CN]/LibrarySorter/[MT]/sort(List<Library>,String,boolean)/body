{
  useIndexForFindDefinitions=!isFromSdk;
  ArrayList<LibrarySetItem> resourceBundleOnlyItems=null;
  final THashMap<CharSequence,Definition> definitionMap=new THashMap<CharSequence,Definition>(libraries.size() * 128);
  final List<LibrarySetItem> unsortedItems=collectItems(libraries,isFromSdk,definitionMap);
  AbcMerger abcMerger=new AbcMerger(definitionMap,flexSdkVersion);
  for (  LibrarySetItem item : unsortedItems) {
    if (!item.hasDefinitions()) {
      if (item.library.hasResourceBundles()) {
        if (resourceBundleOnlyItems == null) {
          resourceBundleOnlyItems=new ArrayList<LibrarySetItem>();
        }
        resourceBundleOnlyItems.add(item);
      }
      continue;
    }
    abcMerger.process(item.library);
    Collection<CharSequence> filteredDefinitions=null;
    item.filtered=item.hasUnresolvedDefinitions();
    if (isFromSdk) {
      final String name=item.library.getName();
      final boolean isSparkLib=name.equals(SPARK);
      if (isSparkLib || name.equals(FRAMEWORK)) {
        item.filtered=false;
        injectFrameworkSwc(flexSdkVersion,item,isSparkLib);
        continue;
      }
 else {
        filteredDefinitions=BAD_FLEX_CLASSES.get(name);
        if (filteredDefinitions != null && item.hasFilteredDefinitions()) {
          if (name.equals(AIRFRAMEWORK)) {
            if (item.filteredDefinitions.contains("mx.controls:FlexNativeMenu")) {
              item.filteredDefinitions.remove("mx.controls:FlexNativeMenu");
              if (item.filtered && item.filteredDefinitions.isEmpty()) {
                item.filtered=false;
              }
            }
          }
 else           if (name.equals(AIRSPARK)) {
            if (item.filteredDefinitions.contains(FlexOverloadedClasses.SPARK_WINDOW) && item.filtered && item.filteredDefinitions.size() == 1) {
              item.filtered=false;
            }
          }
          item.filteredDefinitions.addAll(filteredDefinitions);
          filteredDefinitions=item.filteredDefinitions;
        }
      }
    }
    if (filteredDefinitions == null) {
      filteredDefinitions=item.filteredDefinitions;
    }
    final VirtualFile swfFile=item.library.getSwfFile();
    final File modifiedSwf=createSwfOutFile(item.library);
    final long timeStamp=swfFile.getTimeStamp();
    if (timeStamp != modifiedSwf.lastModified()) {
      if (filter == null) {
        filter=new AbcFilter(isFromSdk ? flexSdkVersion : null);
      }
      filter.filter(swfFile,modifiedSwf,filteredDefinitions == null ? null : new AbcNameFilterByNameSet(filteredDefinitions));
      modifiedSwf.setLastModified(timeStamp);
    }
  }
  final ArrayList<LibrarySetEmbedItem> embedItems=isFromSdk ? new ArrayList<LibrarySetEmbedItem>(2) : null;
  final ArrayList<LibrarySetItem> items=new ArrayList<LibrarySetItem>(unsortedItems.size());
  return new SortResult(items,embedItems,resourceBundleOnlyItems);
}
