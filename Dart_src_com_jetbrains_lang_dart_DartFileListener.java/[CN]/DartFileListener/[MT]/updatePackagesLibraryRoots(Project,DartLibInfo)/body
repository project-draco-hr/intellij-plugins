{
  final LibraryTable projectLibraryTable=ProjectLibraryTable.getInstance(project);
  final Library existingLibrary=projectLibraryTable.getLibraryByName(DartPackagesLibraryType.DART_PACKAGES_LIBRARY_NAME);
  final Library library=existingLibrary != null ? existingLibrary : ApplicationManager.getApplication().runWriteAction(new Computable<Library>(){
    @Override public Library compute(){
      final LibraryTableBase.ModifiableModel libTableModel=ProjectLibraryTable.getInstance(project).getModifiableModel();
      final Library lib=libTableModel.createLibrary(DartPackagesLibraryType.DART_PACKAGES_LIBRARY_NAME,DartPackagesLibraryType.LIBRARY_KIND);
      libTableModel.commit();
      return lib;
    }
  }
);
  final String[] existingUrls=library.getUrls(OrderRootType.CLASSES);
  final Collection<String> libRootUrls=libInfo.getLibRootUrls();
  if (isBrokenPackageMap(((LibraryEx)library).getProperties()) || existingUrls.length != libRootUrls.size() || !libRootUrls.containsAll(Arrays.asList(existingUrls))) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        final LibraryEx.ModifiableModelEx model=(LibraryEx.ModifiableModelEx)library.getModifiableModel();
        for (        String url : existingUrls) {
          model.removeRoot(url,OrderRootType.CLASSES);
        }
        for (        String url : libRootUrls) {
          model.addRoot(url,OrderRootType.CLASSES);
        }
        final DartPackagesLibraryProperties libraryProperties=new DartPackagesLibraryProperties();
        libraryProperties.setPackageNameToDirsMap(libInfo.getPackagesMap());
        model.setProperties(libraryProperties);
        model.commit();
      }
    }
);
  }
  return library;
}
