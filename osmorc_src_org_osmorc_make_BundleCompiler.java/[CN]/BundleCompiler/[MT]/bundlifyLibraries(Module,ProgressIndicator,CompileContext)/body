{
  File outputDir=null;
  VirtualFile moduleOutputUrl=getModuleOutputUrl(module);
  if (moduleOutputUrl != null) {
    outputDir=BndWrapper.getOutputDir(VfsUtilCore.virtualToIoFile(moduleOutputUrl),compileContext);
  }
  if (outputDir == null) {
    return ArrayUtil.EMPTY_STRING_ARRAY;
  }
  String[] urls=OrderEnumerator.orderEntries(module).withoutSdk().withoutModuleSourceEntries().withoutDepModules().productionOnly().runtimeOnly().recursively().exportedOnly().satisfying(NOT_FRAMEWORK_LIBRARY_CONDITION).classes().getUrls();
  List<String> result=new ArrayList<String>();
  BndWrapper wrapper=new BndWrapper();
  for (  String url : urls) {
    url=convertJarUrlToFileUrl(url);
    if (CachingBundleInfoProvider.canBeBundlified(url)) {
      indicator.setText("Bundling non-OSGi libraries for module: " + module.getName());
      indicator.setText2(url);
      String bundledLocation=wrapper.wrapLibrary(module,compileContext,url,outputDir);
      if (bundledLocation != null) {
        result.add(fixFileURL(bundledLocation));
      }
    }
 else     if (CachingBundleInfoProvider.isBundle(url)) {
      result.add(fixFileURL(url));
    }
  }
  return ArrayUtil.toStringArray(result);
}
