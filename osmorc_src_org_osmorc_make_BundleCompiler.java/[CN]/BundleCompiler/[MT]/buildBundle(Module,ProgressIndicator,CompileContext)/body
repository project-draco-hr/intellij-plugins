{
  final File jarFile=new File(VfsUtil.urlToPath(getJarFileName(module)));
  if (jarFile.exists()) {
    jarFile.delete();
  }
  if (!FileUtil.createParentDirs(jarFile)) {
    compileContext.addMessage(CompilerMessageCategory.ERROR,"Cannot create path to " + jarFile.getPath(),null,0,0);
    return;
  }
  final VirtualFile moduleOutputDir=new ReadAction<VirtualFile>(){
    protected void run(    Result<VirtualFile> result){
      result.setResult(getModuleOutputUrl(module));
    }
  }
.execute().getResultObject();
  final BndWrapper wrapper=new BndWrapper();
  final OsmorcFacetConfiguration configuration=OsmorcFacet.getInstance(module).getConfiguration();
  final List<String> classPaths=new ArrayList<String>();
  if (moduleOutputDir != null) {
    classPaths.add(moduleOutputDir.getUrl());
  }
  String bndFileUrl="";
  Map<String,String> additionalProperties=new HashMap<String,String>();
  if (configuration.isOsmorcControlsManifest() || configuration.isUseBndFile() || configuration.isUseBundlorFile()) {
    if (configuration.isUseBndFile()) {
      File bndFile=findFileInModuleContentRoots(configuration.getBndFileLocation(),module);
      if (bndFile == null || !bndFile.exists()) {
        compileContext.addMessage(CompilerMessageCategory.ERROR,String.format("The bnd file \"%s\" for module \"%s\" does not exist.",configuration.getBndFileLocation(),module.getName()),configuration.getBndFileLocation(),0,0);
        return;
      }
 else {
        bndFileUrl=VfsUtil.pathToUrl(bndFile.getPath());
      }
    }
 else     if (configuration.isUseBundlorFile()) {
      bndFileUrl=makeBndFile(module,"",compileContext);
      if (bndFileUrl == null) {
        return;
      }
    }
 else {
      bndFileUrl=makeBndFile(module,configuration.asManifestString(),compileContext);
      if (bndFileUrl == null) {
        return;
      }
    }
  }
 else {
    boolean manifestExists=false;
    BundleManager bundleManager=ServiceManager.getService(module.getProject(),BundleManager.class);
    BundleManifest bundleManifest=bundleManager.getBundleManifest(module);
    if (bundleManifest != null) {
      PsiFile manifestFile=bundleManifest.getManifestFile();
      if (manifestFile != null) {
        String manifestFilePath=manifestFile.getVirtualFile().getPath();
        if (manifestFilePath != null) {
          bndFileUrl=makeBndFile(module,"-manifest " + manifestFilePath + "\n",compileContext);
          manifestExists=true;
        }
      }
    }
    if (!manifestExists) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,"Manifest file for module " + module.getName() + ": '"+ OsmorcFacet.getInstance(module).getManifestLocation()+ "' does not exist or cannot be found. Check that file exists and is not excluded from the module.",null,0,0);
      return;
    }
  }
  if (!configuration.isOsmorcControlsManifest() || (configuration.isOsmorcControlsManifest() && !configuration.isUseBndFile() && !configuration.isUseBundlorFile())) {
    StringBuilder pathBuilder=new StringBuilder();
    for (int i=0; i < classPaths.size(); i++) {
      String classPath=classPaths.get(i);
      String relPath=FileUtil.getRelativePath(new File(VfsUtil.urlToPath(bndFileUrl)),new File(VfsUtil.urlToPath(classPath)));
      if (i != 0) {
        pathBuilder.append(",");
      }
      pathBuilder.append(relPath);
    }
    List<Pair<String,String>> list=configuration.getAdditionalJARContents();
    for (    Pair<String,String> stringStringPair : list) {
      pathBuilder.append(",").append(stringStringPair.second).append(" = ").append(stringStringPair.first);
    }
    additionalProperties.put("Include-Resource",pathBuilder.toString());
    if (!configuration.isIgnorePatternValid()) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,"The file ignore pattern in the facet configuration is invalid.",null,0,0);
      return;
    }
    if (!"".equals(configuration.getIgnoreFilePattern())) {
      additionalProperties.put("-donotcopy",configuration.getIgnoreFilePattern());
    }
  }
  String outputPath=jarFile.getPath();
  if (configuration.isUseBundlorFile()) {
    outputPath+=".tmp.jar";
  }
  wrapper.build(compileContext,bndFileUrl,ArrayUtil.toStringArray(classPaths),outputPath,additionalProperties);
  if (configuration.isUseBundlorFile()) {
    File bundlorFile=findFileInModuleContentRoots(configuration.getBundlorFileLocation(),module);
    if (bundlorFile == null || !bundlorFile.exists()) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,String.format("The Bundlor file \"%s\" for module \"%s\" does not exist.",configuration.getBundlorFileLocation(),module.getName()),configuration.getBundlorFileLocation(),0,0);
      return;
    }
    BundlorWrapper bw=new BundlorWrapper();
    try {
      if (!bw.wrapModule(compileContext,outputPath,jarFile.getPath(),bundlorFile.getPath())) {
        compileContext.addMessage(CompilerMessageCategory.ERROR,"Bundlifying the file " + jarFile.getPath() + " with Bundlor failed.",null,0,0);
        return;
      }
    }
  finally {
      File tempJar=new File(outputPath);
      if (tempJar.exists()) {
        if (!tempJar.delete()) {
          compileContext.addMessage(CompilerMessageCategory.WARNING,"Could not delete temporary file: " + tempJar.getPath(),null,0,0);
        }
      }
    }
  }
  if (!configuration.isUseBndFile() && !configuration.isUseBundlorFile()) {
    bundlifyLibraries(module,progressIndicator,compileContext);
  }
}
