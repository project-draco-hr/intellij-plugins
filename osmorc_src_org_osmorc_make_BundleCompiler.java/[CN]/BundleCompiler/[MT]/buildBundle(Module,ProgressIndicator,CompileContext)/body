{
  String messagePrefix="[" + module.getName() + "] ";
  progressIndicator.setText("Building bundle for module " + module.getName());
  final File jarFile=new File(VfsUtil.urlToPath(getJarFileName(module)));
  FileUtil.delete(jarFile);
  if (!FileUtil.createParentDirs(jarFile)) {
    compileContext.addMessage(CompilerMessageCategory.ERROR,messagePrefix + "Cannot create path to " + jarFile.getPath(),null,0,0);
    return;
  }
  final VirtualFile moduleOutputDir=new ReadAction<VirtualFile>(){
    protected void run(    Result<VirtualFile> result){
      result.setResult(getModuleOutputUrl(module));
    }
  }
.execute().getResultObject();
  final BndWrapper wrapper=new BndWrapper();
  OsmorcFacet osmorcFacet=OsmorcFacet.getInstance(module);
  final OsmorcFacetConfiguration configuration=osmorcFacet.getConfiguration();
  final List<String> classPaths=new ArrayList<String>();
  if (moduleOutputDir != null) {
    classPaths.add(moduleOutputDir.getUrl());
  }
  Map<String,String> buildProperties=new LinkedHashMap<String,String>();
  if (configuration.isUseBndFile()) {
    File bndFile=findFileInModuleContentRoots(configuration.getBndFileLocation(),module);
    if (bndFile == null || !bndFile.exists()) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,String.format(messagePrefix + "The bnd file \"%s\" for module \"%s\" does not exist.",configuration.getBndFileLocation(),module.getName()),configuration.getBndFileLocation(),0,0);
      return;
    }
 else {
      OrderedProperties props=new OrderedProperties();
      FileInputStream fis=new FileInputStream(bndFile);
      try {
        props.load(fis);
      }
  finally {
        fis.close();
      }
      buildProperties.putAll(props.toMap());
    }
  }
 else   if (configuration.isUseBundlorFile()) {
  }
 else   if (configuration.isOsmorcControlsManifest()) {
    buildProperties.putAll(configuration.getBndFileProperties());
  }
 else   if (configuration.isManifestManuallyEdited()) {
    boolean manifestExists=false;
    VirtualFile manifestFile=osmorcFacet.getManifestFile();
    if (manifestFile != null) {
      String manifestFilePath=manifestFile.getPath();
      if (manifestFilePath != null) {
        buildProperties.put("-manifest",manifestFilePath);
        manifestExists=true;
      }
    }
    if (!manifestExists) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,messagePrefix + "Manifest file for module " + module.getName()+ ": '"+ osmorcFacet.getManifestLocation()+ "' does not exist or cannot be found. Check that file exists and is not excluded from the module.",null,0,0);
      return;
    }
  }
 else {
    compileContext.addMessage(CompilerMessageCategory.ERROR,messagePrefix + "OSGi facet configuration for module " + module.getName()+ " seems to be invalid. No supported manifest handling method is set up."+ " Please check configuration and try again.",null,0,0);
  }
  if (configuration.isManifestManuallyEdited() || configuration.isOsmorcControlsManifest()) {
    StringBuilder pathBuilder=new StringBuilder();
    for (int i=0; i < classPaths.size(); i++) {
      String classPath=classPaths.get(i);
      String relPath=FileUtil.getRelativePath(new File(BndWrapper.getOutputPath(module,compileContext)),new File(VfsUtil.urlToPath(classPath)));
      if (i != 0) {
        pathBuilder.append(",");
      }
      pathBuilder.append(relPath);
    }
    List<Pair<String,String>> list=configuration.getAdditionalJARContents();
    for (    Pair<String,String> stringStringPair : list) {
      pathBuilder.append(",").append(stringStringPair.second).append(" = ").append(stringStringPair.first);
    }
    String includedResources=configuration.getAdditionalPropertiesAsMap().get("Include-Resource");
    if (includedResources == null) {
      includedResources=pathBuilder.toString();
    }
 else {
      includedResources=includedResources + "," + pathBuilder.toString();
    }
    buildProperties.put("Include-Resource",includedResources);
    if (!configuration.isIgnorePatternValid()) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,messagePrefix + "The file ignore pattern in the facet configuration is invalid.",null,0,0);
      return;
    }
    if (!configuration.getIgnoreFilePattern().isEmpty()) {
      buildProperties.put("-donotcopy",configuration.getIgnoreFilePattern());
    }
  }
  if (configuration.isOsmorcControlsManifest()) {
    progressIndicator.setText2("Calculating local packages");
    LocalPackageCollector.addLocalPackages(VfsUtil.virtualToIoFile(moduleOutputDir),buildProperties);
  }
  String outputPath=jarFile.getPath();
  if (configuration.isUseBundlorFile()) {
    outputPath+=".tmp.jar";
  }
  progressIndicator.setText2("Running bnd to build the bundle");
  BndWrapper.build(module,compileContext,ArrayUtil.toStringArray(classPaths),outputPath,buildProperties);
  if (configuration.isUseBundlorFile()) {
    progressIndicator.setText2("Running bundlor to calculate the manifest");
    File bundlorFile=findFileInModuleContentRoots(configuration.getBundlorFileLocation(),module);
    if (bundlorFile == null || !bundlorFile.exists()) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,String.format(messagePrefix + "The Bundlor file \"%s\" for module \"%s\" does not exist.",configuration.getBundlorFileLocation(),module.getName()),configuration.getBundlorFileLocation(),0,0);
      return;
    }
    BundlorWrapper bw=new BundlorWrapper();
    try {
      if (!bw.wrapModule(compileContext,outputPath,jarFile.getPath(),bundlorFile.getPath())) {
        compileContext.addMessage(CompilerMessageCategory.ERROR,messagePrefix + "Bundlifying the file " + jarFile.getPath()+ " with Bundlor failed.",null,0,0);
        return;
      }
    }
  finally {
      File tempJar=new File(outputPath);
      if (tempJar.exists()) {
        if (!tempJar.delete()) {
          compileContext.addMessage(CompilerMessageCategory.WARNING,messagePrefix + "Could not delete temporary file: " + tempJar.getPath(),null,0,0);
        }
      }
    }
  }
  if (!configuration.isUseBndFile() && !configuration.isUseBundlorFile()) {
    bundlifyLibraries(module,progressIndicator,compileContext);
  }
}
