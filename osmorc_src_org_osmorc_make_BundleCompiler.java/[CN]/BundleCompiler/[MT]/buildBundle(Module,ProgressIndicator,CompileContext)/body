{
  final File jarFile=new File(VfsUtil.urlToPath(getJarFileName(module)));
  if (jarFile.exists()) {
    jarFile.delete();
  }
  FileUtil.createParentDirs(jarFile);
  final BuildRecipe buildrecipe=(new ReadAction<BuildRecipe>(){
    protected void run(    Result<BuildRecipe> result){
      result.setResult(getBuildRecipe(module));
    }
  }
).execute().getResultObject();
  final BndWrapper wrapper=new BndWrapper();
  final OsmorcFacetConfiguration configuration=OsmorcFacet.getInstance(module).getConfiguration();
  final List<String> classPaths=new ArrayList<String>();
  try {
    buildrecipe.visitInstructionsWithExceptions(new BuildInstructionVisitor(){
      public boolean visitInstruction(      BuildInstruction buildinstruction) throws IOException {
        ProgressManager.checkCanceled();
        if (buildinstruction instanceof FileCopyInstruction) {
          FileCopyInstruction filecopyinstruction=(FileCopyInstruction)buildinstruction;
          File file2=filecopyinstruction.getFile();
          if (file2 == null || !file2.exists()) {
            return true;
          }
          String s2=FileUtil.toSystemDependentName(file2.getPath());
          classPaths.add(VfsUtil.pathToUrl(s2));
        }
        return true;
      }
    }
,false);
  }
 catch (  ProcessCanceledException e) {
    compileContext.addMessage(CompilerMessageCategory.INFORMATION,"Process canceled.",null,0,0);
    return;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
  String bndFileUrl="";
  Map<String,String> additionalProperties=new HashMap<String,String>();
  if (configuration.isOsmorcControlsManifest()) {
    if (configuration.isUseBndFile()) {
      File bndFile=findFileInModuleContentRoots(configuration.getBndFileLocation(),module);
      if (bndFile == null || !bndFile.exists()) {
        compileContext.addMessage(CompilerMessageCategory.ERROR,String.format("The bnd file \"%s\" for module \"%s\" does not exist.",configuration.getBndFileLocation(),module.getName()),configuration.getBndFileLocation(),0,0);
        return;
      }
 else {
        bndFileUrl=VfsUtil.pathToUrl(bndFile.getPath());
      }
    }
 else {
      bndFileUrl=makeBndFile(module,configuration.asManifestString());
    }
  }
 else {
    boolean manifestExists=false;
    BundleManager bundleManager=ServiceManager.getService(module.getProject(),BundleManager.class);
    BundleManifest bundleManifest=bundleManager.getBundleManifest(module);
    if (bundleManifest != null) {
      PsiFile manifestFile=bundleManifest.getManifestFile();
      if (manifestFile != null) {
        String manifestFilePath=manifestFile.getVirtualFile().getPath();
        if (manifestFilePath != null) {
          bndFileUrl=makeBndFile(module,"-manifest " + manifestFilePath + "\n");
          manifestExists=true;
        }
      }
    }
    if (!manifestExists) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,"Manifest file  " + OsmorcFacet.getInstance(module).getManifestLocation() + " does not exist.",null,0,0);
      return;
    }
  }
  if (!configuration.isOsmorcControlsManifest() || (configuration.isOsmorcControlsManifest() && !configuration.isUseBndFile())) {
    StringBuilder pathBuilder=new StringBuilder();
    for (int i=0; i < classPaths.size(); i++) {
      String classPath=classPaths.get(i);
      String relPath=FileUtil.getRelativePath(new File(VfsUtil.urlToPath(bndFileUrl)),new File(VfsUtil.urlToPath(classPath)));
      if (i != 0) {
        pathBuilder.append(",");
      }
      pathBuilder.append(relPath);
    }
    List<Pair<String,String>> list=configuration.getAdditionalJARContents();
    for (    Pair<String,String> stringStringPair : list) {
      pathBuilder.append(",").append(stringStringPair.second).append(" = ").append(stringStringPair.first);
    }
    additionalProperties.put("Include-Resource",pathBuilder.toString());
    if (!configuration.isIgnorePatternValid()) {
      compileContext.addMessage(CompilerMessageCategory.ERROR,"The file ignore pattern in the facet configuration is invalid.",null,0,0);
      return;
    }
    if (!"".equals(configuration.getIgnoreFilePattern())) {
      additionalProperties.put("-donotcopy",configuration.getIgnoreFilePattern());
    }
  }
  wrapper.build(compileContext,bndFileUrl,classPaths.toArray(new String[classPaths.size()]),jarFile.getPath(),additionalProperties);
  if (!configuration.isUseBndFile()) {
    bundlifyLibraries(module,progressIndicator,compileContext);
  }
}
