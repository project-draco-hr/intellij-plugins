{
  if (!BCUtils.isRLMTemporaryBC(myBC) && !BCUtils.isRuntimeStyleSheetBC(myBC) && BCUtils.canHaveRLMsAndRuntimeStylesheets(myBC)&& myBC.getRLMs().size() > 0) {
    addOption(rootElement,CompilerOptionInfo.LINK_REPORT_INFO,getLinkReportFilePath(myModule,myBC.getName()));
  }
  if (BCUtils.isRLMTemporaryBC(myBC) && !myBC.getOptimizeFor().isEmpty()) {
    final String customLinkReportPath=getCustomLinkReportPath(myModule,myBC);
    final String linkReportPath=StringUtil.notNullize(customLinkReportPath,getLinkReportFilePath(myModule,myBC.getName()));
    addOption(rootElement,CompilerOptionInfo.LOAD_EXTERNS_INFO,linkReportPath);
  }
  addOption(rootElement,CompilerOptionInfo.WARN_NO_CONSTRUCTOR_INFO,"false");
  if (myFlexmojos)   return;
  final BuildConfigurationNature nature=myBC.getNature();
  final String targetPlayer=nature.isWebPlatform() ? myBC.getDependencies().getTargetPlayer() : FlexCommonUtils.getMaximumTargetPlayer(mySdk.getHomePath());
  addOption(rootElement,CompilerOptionInfo.TARGET_PLAYER_INFO,targetPlayer);
  if (FlexSdkUtils.isAirSdkWithoutFlex(mySdk) || StringUtil.compareVersionNumbers(mySdk.getVersionString(),"4.5") >= 0) {
    final String swfVersion;
    if (nature.isWebPlatform()) {
      swfVersion=FlexCommonUtils.getSwfVersionForTargetPlayer(targetPlayer);
    }
 else {
      final String airVersion=getAirVersionIfCustomDescriptor(myBC);
      swfVersion=airVersion != null ? FlexCommonUtils.getSwfVersionForAirVersion(airVersion) : FlexCommonUtils.getSwfVersionForSdk(mySdk.getVersionString());
    }
    addOption(rootElement,CompilerOptionInfo.SWF_VERSION_INFO,swfVersion);
  }
  if (nature.isMobilePlatform()) {
    addOption(rootElement,CompilerOptionInfo.MOBILE_INFO,"true");
    addOption(rootElement,CompilerOptionInfo.PRELOADER_INFO,"spark.preloaders.SplashScreen");
  }
  if (!FlexSdkUtils.isAirSdkWithoutFlex(mySdk)) {
    final String accessible=nature.isMobilePlatform() ? "false" : StringUtil.compareVersionNumbers(mySdk.getVersionString(),"4") >= 0 ? "true" : "false";
    addOption(rootElement,CompilerOptionInfo.ACCESSIBLE_INFO,accessible);
    final String fontManagers=StringUtil.compareVersionNumbers(mySdk.getVersionString(),"4") >= 0 ? "flash.fonts.JREFontManager" + CompilerOptionInfo.LIST_ENTRIES_SEPARATOR + "flash.fonts.BatikFontManager"+ CompilerOptionInfo.LIST_ENTRIES_SEPARATOR+ "flash.fonts.AFEFontManager"+ CompilerOptionInfo.LIST_ENTRIES_SEPARATOR+ "flash.fonts.CFFFontManager" : "flash.fonts.JREFontManager" + CompilerOptionInfo.LIST_ENTRIES_SEPARATOR + "flash.fonts.AFEFontManager"+ CompilerOptionInfo.LIST_ENTRIES_SEPARATOR+ "flash.fonts.BatikFontManager";
    addOption(rootElement,CompilerOptionInfo.FONT_MANAGERS_INFO,fontManagers);
    addOption(rootElement,CompilerOptionInfo.STATIC_RSLS_INFO,"false");
  }
}
