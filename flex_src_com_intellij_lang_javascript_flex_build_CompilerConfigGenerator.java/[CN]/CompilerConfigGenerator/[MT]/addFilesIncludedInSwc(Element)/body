{
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myModule.getProject()).getFileIndex();
  final CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(myModule.getProject());
  final Map<String,String> filePathToPathInSwc=new THashMap<String,String>();
  for (  String path : myBC.getCompilerOptions().getFilesToIncludeInSWC()) {
    final VirtualFile fileOrDir=LocalFileSystem.getInstance().findFileByPath(path);
    if (fileOrDir == null || compilerConfiguration.isExcludedFromCompilation(fileOrDir))     continue;
    if (fileOrDir.isDirectory()) {
      final VirtualFile srcRoot=fileIndex.getSourceRootForFile(fileOrDir);
      final String baseRelativePath=srcRoot == null ? fileOrDir.getName() : VfsUtilCore.getRelativePath(fileOrDir,srcRoot,'/');
      VfsUtilCore.visitChildrenRecursively(fileOrDir,new VirtualFileVisitor(){
        public boolean visitFile(        final VirtualFile file){
          if (!file.isDirectory() && !compilerConfiguration.isExcludedFromCompilation(file)) {
            final String relativePath=VfsUtilCore.getRelativePath(file,fileOrDir,'/');
            final String pathInSwc=baseRelativePath + "/" + relativePath;
            filePathToPathInSwc.put(file.getPath(),pathInSwc);
          }
          return true;
        }
      }
);
    }
 else {
      final VirtualFile srcRoot=fileIndex.getSourceRootForFile(fileOrDir);
      final String relativePath=srcRoot == null ? null : VfsUtilCore.getRelativePath(fileOrDir,srcRoot,'/');
      final String pathInSwc=StringUtil.notNullize(relativePath,fileOrDir.getName());
      filePathToPathInSwc.put(fileOrDir.getPath(),pathInSwc);
    }
  }
  for (  Map.Entry<String,String> entry : filePathToPathInSwc.entrySet()) {
    final String value=entry.getValue() + CompilerOptionInfo.LIST_ENTRY_PARTS_SEPARATOR + entry.getKey();
    addOption(rootElement,CompilerOptionInfo.INCLUDE_FILE_INFO,value);
  }
}
