{
  final DartReference childReference=PsiTreeUtil.getChildOfType(this,DartReference.class);
  if (this instanceof DartParenthesizedExpression) {
    return childReference == null ? DartClassResolveResult.EMPTY : childReference.resolveDartClass();
  }
  if (this instanceof DartArrayAccessExpression) {
    final DartReference reference=PsiTreeUtil.getChildOfType(this,DartReference.class);
    if (reference != null) {
      final DartClassResolveResult resolveResult=reference.resolveDartClass();
      final DartClass resolveResultDartClass=resolveResult.getDartClass();
      if (resolveResultDartClass == null) {
        return resolveResult;
      }
      return DartResolveUtil.getDartClassResolveResult(resolveResultDartClass.findOperator("[]",null),resolveResult.getSpecialization());
    }
  }
  if (this instanceof DartAsExpression) {
    return DartResolveUtil.resolveClassByType(((DartAsExpression)this).getType());
  }
  if (this instanceof DartStringLiteralExpression) {
    return DartResolveUtil.findCoreClass(this,"String");
  }
  if (this instanceof DartListLiteralExpression) {
    return DartResolveUtil.findCoreClass(this,"List");
  }
  if (this instanceof DartMapLiteralExpression) {
    return DartResolveUtil.findCoreClass(this,"Map");
  }
  if (this instanceof DartCompoundLiteralExpression) {
    final DartTypeArguments typeArguments=((DartCompoundLiteralExpression)this).getTypeArguments();
    final DartReference dartReference=PsiTreeUtil.getChildOfType(this,DartReference.class);
    final DartClassResolveResult classResolveResult=dartReference == null ? DartClassResolveResult.EMPTY : dartReference.resolveDartClass();
    if (typeArguments == null) {
      return classResolveResult;
    }
    classResolveResult.specializeByParameters(typeArguments);
    return classResolveResult;
  }
  final PsiElement firstChild=getFirstChild();
  if (firstChild instanceof LeafPsiElement) {
    final String literalText=firstChild.getText();
    if ("true".equals(literalText) || "false".equals(literalText)) {
      return DartResolveUtil.findCoreClass(this,"bool");
    }
 else     if ("null".equals(literalText)) {
      return DartClassResolveResult.EMPTY;
    }
 else {
      final boolean isFloat=literalText.indexOf('.') != -1 || literalText.indexOf('E') != -1 || literalText.indexOf('e') != -1;
      return DartResolveUtil.findCoreClass(this,isFloat ? "double" : "int");
    }
  }
  return DartClassResolveResult.EMPTY;
}
