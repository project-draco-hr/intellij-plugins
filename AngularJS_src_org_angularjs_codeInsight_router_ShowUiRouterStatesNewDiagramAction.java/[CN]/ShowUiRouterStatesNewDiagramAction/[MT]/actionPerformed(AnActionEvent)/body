{
  UsageTrigger.trigger(USAGE_KEY);
  final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null)   return;
  final AngularUiRouterDiagramBuilder builder=new AngularUiRouterDiagramBuilder(project);
  builder.build();
  final List<Pair<String,AngularUiRouterGraphBuilder>> graphBuilders=new ArrayList<>();
  final Map<VirtualFile,RootTemplate> rootTemplates=builder.getRootTemplates();
  for (  Map.Entry<VirtualFile,Map<String,UiRouterState>> entry : builder.getDefiningFiles2States().entrySet()) {
    final AngularUiRouterGraphBuilder graphBuilder=new AngularUiRouterGraphBuilder(project,entry.getValue(),builder.getTemplatesMap(),null,entry.getKey());
    graphBuilders.add(Pair.create(entry.getKey().getName(),graphBuilder));
  }
  for (  Map.Entry<VirtualFile,Map<String,UiRouterState>> entry : builder.getRootTemplates2States().entrySet()) {
    final AngularUiRouterGraphBuilder graphBuilder=new AngularUiRouterGraphBuilder(project,entry.getValue(),builder.getTemplatesMap(),rootTemplates.get(entry.getKey()),entry.getKey());
    graphBuilders.add(Pair.create(entry.getKey().getName(),graphBuilder));
  }
  final AngularUiRouterDiagramProvider diagramProvider=(AngularUiRouterDiagramProvider)DiagramProvider.findByID(AngularUiRouterDiagramProvider.ANGULAR_UI_ROUTER);
  if (diagramProvider == null)   return;
  diagramProvider.reset();
  for (  Pair<String,AngularUiRouterGraphBuilder> pair : graphBuilders) {
    final AngularUiRouterGraphBuilder graphBuilder=pair.getSecond();
    final AngularUiRouterGraphBuilder.GraphNodesBuilder nodesBuilder=graphBuilder.createDataModel(diagramProvider);
    diagramProvider.registerNodesBuilder(nodesBuilder);
    final Runnable callback=show(nodesBuilder.getRootNode().getIdentifyingElement(),diagramProvider,project,null,Collections.emptyList());
    if (callback != null) {
      callback.run();
    }
  }
}
