{
  super(parent,true);
  mySetName.setUseTextFieldPreferredSize(true);
  setTitle(StrutsBundle.message("facet.fileseteditor.title"));
  myOriginalSet=fileSet;
  myFileSet=new StrutsFileSet(fileSet);
  final CheckedTreeNode myRoot=new CheckedTreeNode(null);
  myFilesTree.setModel(new DefaultTreeModel(myRoot));
  searcher.search();
  final MultiMap<Module,PsiFile> files=searcher.getFilesByModules();
  final MultiMap<VirtualFile,PsiFile> jars=searcher.getJars();
  final Set<PsiFile> psiFiles=myFilesTree.buildModuleNodes(files,jars,fileSet);
  final Project project=context.getProject();
  final PsiManager psiManager=PsiManager.getInstance(project);
  final List<VirtualFilePointer> list=fileSet.getFiles();
  for (  final VirtualFilePointer pointer : list) {
    final VirtualFile file=pointer.getFile();
    if (file != null) {
      final PsiFile psiFile=psiManager.findFile(file);
      if (psiFile != null && psiFiles.contains(psiFile)) {
        continue;
      }
      myFilesTree.addFile(file);
    }
  }
  TreeUtil.expandAll(myFilesTree);
  myFilesTree.getModel().addTreeModelListener(new TreeModelAdapter(){
    public void treeNodesChanged(    final TreeModelEvent e){
      updateFileSet();
    }
  }
);
  mySetName.setText(fileSet.getName());
  mySetName.addDocumentListener(new DocumentAdapter(){
    public void documentChanged(    final DocumentEvent e){
      updateFileSet();
    }
  }
);
  init();
  getOKAction().setEnabled(fileSet.isNew());
}
