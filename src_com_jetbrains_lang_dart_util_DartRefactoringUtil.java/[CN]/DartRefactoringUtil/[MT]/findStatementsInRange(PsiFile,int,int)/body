{
  PsiElement element1=file.findElementAt(startOffset);
  PsiElement element2=file.findElementAt(endOffset - 1);
  if (element1 instanceof PsiWhiteSpace) {
    startOffset=element1.getTextRange().getEndOffset();
    element1=file.findElementAt(startOffset);
  }
  if (element2 instanceof PsiWhiteSpace) {
    endOffset=element2.getTextRange().getStartOffset();
    element2=file.findElementAt(endOffset - 1);
  }
  if (element1 != null && element2 != null) {
    PsiElement commonParent=PsiTreeUtil.findCommonParent(element1,element2);
    if (commonParent instanceof DartExpression) {
      return new PsiElement[]{commonParent};
    }
  }
  final DartStatements statements=PsiTreeUtil.getParentOfType(element1,DartStatements.class);
  if (statements == null || element1 == null || element2 == null || !PsiTreeUtil.isAncestor(statements,element2,true)) {
    return PsiElement.EMPTY_ARRAY;
  }
  final ASTNode[] astResult=UsefulPsiTreeUtil.findChildrenRange(statements.getNode().getChildren(null),startOffset,endOffset);
  return ContainerUtil.map2Array(astResult,PsiElement.class,new Function<ASTNode,PsiElement>(){
    @Override public PsiElement fun(    ASTNode node){
      return node.getPsi();
    }
  }
);
}
