{
  if (mySourcePosition == null) {
    navigatable.setSourcePosition(null);
    return;
  }
  XSourcePosition result=null;
  final Project project=myDebugProcess.getSession().getProject();
  if (myValueType == ValueType.Variable) {
    final PsiElement contextElement=JSDebuggerSupportUtils.getContextElement(mySourcePosition.getFile(),mySourcePosition.getOffset(),project);
    final JSFunction jsFunction=PsiTreeUtil.getParentOfType(contextElement,JSFunction.class);
    if (jsFunction != null) {
      final Ref<JSVariable> varRef=new Ref<JSVariable>();
      jsFunction.accept(new JSElementVisitor(){
        public void visitJSElement(        final JSElement node){
          if (varRef.isNull()) {
            node.acceptChildren(this);
          }
        }
        public void visitJSVariable(        final JSVariable node){
          if (myName.equals(node.getName())) {
            varRef.set(node);
          }
          super.visitJSVariable(node);
        }
      }
);
      if (!varRef.isNull()) {
        result=calcSourcePosition(varRef.get());
      }
    }
  }
 else   if (myValueType == ValueType.Parameter) {
    final PsiElement contextElement=JSDebuggerSupportUtils.getContextElement(mySourcePosition.getFile(),mySourcePosition.getOffset(),project);
    final JSFunction jsFunction=PsiTreeUtil.getParentOfType(contextElement,JSFunction.class);
    final JSParameterList parameterList=jsFunction == null ? null : jsFunction.getParameterList();
    final JSParameter[] parameters=parameterList == null ? JSParameter.EMPTY_ARRAY : parameterList.getParameters();
    for (    final JSParameter parameter : parameters) {
      if (myName.equals(parameter.getName())) {
        result=calcSourcePosition(parameter);
        break;
      }
    }
  }
 else   if (myValueType == ValueType.Field && myParentResult != null) {
    final String type=getTypeAndAdditionalInfo(myParentResult).first;
    if (type != null) {
      final String fqn=type.replace("::",".");
      final Module module=ModuleUtil.findModuleForFile(mySourcePosition.getFile(),project);
      final JavaScriptIndex jsIndex=JavaScriptIndex.getInstance(project);
      PsiElement jsClass=JSResolveUtil.findClassByQName(fqn,jsIndex,module);
      if (!(jsClass instanceof JSClass) && type.endsWith("$")) {
        jsClass=JSResolveUtil.findClassByQName(fqn.substring(0,fqn.length() - 1),jsIndex,module);
      }
      if (jsClass instanceof JSClass) {
        result=calcSourcePosition(findFieldOrGetterInClassOrSupers(myName,(JSClass)jsClass,new THashSet<JSClass>()));
      }
    }
  }
  navigatable.setSourcePosition(result);
}
