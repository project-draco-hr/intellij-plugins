{
  final ModifiableFlexIdeBuildConfiguration mainBC=myFlexEditor.createConfiguration(myModule);
  mainBC.setName(myModule.getName());
  final TargetPlatform targetPlatform=handleDependencies(mainBC);
  mainBC.setTargetPlatform(targetPlatform);
  mainBC.setPureAs(false);
  mainBC.setOutputType(FlexmojosImporter.isFlexApp(myMavenProject) ? OutputType.Application : OutputType.Library);
  final Element configurationElement=myFlexmojosPlugin.getConfigurationElement();
  if (FlexmojosImporter.isFlexApp(myMavenProject) && configurationElement != null) {
    final String sourceFile=configurationElement.getChildTextNormalize("sourceFile");
    if (sourceFile != null && (sourceFile.endsWith(".as") || sourceFile.endsWith(".mxml"))) {
      mainBC.setMainClass(sourceFile.substring(0,sourceFile.lastIndexOf(".")).replace("/",".").replace("\\","."));
    }
  }
  final String outputFilePath=FlexmojosImporter.getOutputFilePath(myMavenProject);
  final String fileName=PathUtil.getFileName(outputFilePath);
  mainBC.setOutputFileName(fileName);
  mainBC.setOutputFolder(PathUtil.getParentPath(outputFilePath));
  final BuildConfigurationNature nature=mainBC.getNature();
  if (nature.isApp()) {
    if (nature.isDesktopPlatform()) {
      mainBC.getAirDesktopPackagingOptions().setPackageFileName(fileName);
    }
 else     if (nature.isMobilePlatform()) {
      mainBC.getAndroidPackagingOptions().setPackageFileName(fileName);
      mainBC.getIosPackagingOptions().setPackageFileName(fileName);
    }
  }
  setupSdk(mainBC);
  final String locales=StringUtil.join(myCompiledLocales,CompilerOptionInfo.LIST_ENTRIES_SEPARATOR);
  mainBC.getCompilerOptions().setAllOptions(Collections.singletonMap("compiler.locale",locales));
  if (BCUtils.canHaveResourceFiles(nature)) {
    mainBC.getCompilerOptions().setResourceFilesMode(CompilerOptions.ResourceFilesMode.None);
  }
  mainBC.getCompilerOptions().setAdditionalConfigFilePath(getCompilerConfigFilePath());
  return mainBC;
}
