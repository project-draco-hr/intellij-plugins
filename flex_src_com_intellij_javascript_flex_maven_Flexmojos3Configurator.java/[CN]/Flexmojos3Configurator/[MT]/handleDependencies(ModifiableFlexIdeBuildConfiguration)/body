{
  bc.getDependencies().getModifiableEntries().clear();
  boolean playerglobal=false;
  boolean airglobal=false;
  boolean mobilecomponents=false;
  final ModifiableRootModel rootModel=myModelsProvider.getRootModel(myModule);
  for (  OrderEntry entry : rootModel.getOrderEntries()) {
    final DependencyScope scope=entry instanceof ExportableOrderEntry ? ((ExportableOrderEntry)entry).getScope() : DependencyScope.COMPILE;
    final boolean isExported=entry instanceof ExportableOrderEntry && ((ExportableOrderEntry)entry).isExported();
    if (entry instanceof ModuleOrderEntry) {
      rootModel.removeOrderEntry(entry);
      final String dependencyModuleName=((ModuleOrderEntry)entry).getModuleName();
      final MavenProject dependencyMavenProject=findMavenProjectByModuleName(dependencyModuleName);
      if (dependencyMavenProject == null || !ArrayUtil.contains(dependencyMavenProject.getPackaging(),FlexmojosImporter.SUPPORTED_PACKAGINGS)) {
        continue;
      }
      final ModifiableBuildConfigurationEntry bcEntry=myFlexEditor.createBcEntry(bc.getDependencies(),dependencyModuleName,dependencyModuleName);
      bcEntry.getDependencyType().setLinkageType(FlexUtils.convertLinkageType(scope,isExported));
      bc.getDependencies().getModifiableEntries().add(0,bcEntry);
      continue;
    }
    if (entry instanceof JdkOrderEntry) {
      rootModel.removeOrderEntry(entry);
    }
    if (!(entry instanceof LibraryOrderEntry))     continue;
    rootModel.removeOrderEntry(entry);
    if (!LibraryTablesRegistrar.PROJECT_LEVEL.equals(((LibraryOrderEntry)entry).getLibraryLevel()))     continue;
    final Library library=((LibraryOrderEntry)entry).getLibrary();
    if (library == null || !MavenRootModelAdapter.isMavenLibrary(library))     continue;
    final String libraryName=library.getName();
    if (libraryName.contains(":rb.swc:") || libraryName.contains(":resource-bundle:")) {
      final Library.ModifiableModel libraryModifiableModel=myModelsProvider.getLibraryModel(library);
      for (      final String rbSwcPlaceholdersUrl : findRbSwcPlaceholderUrls(libraryModifiableModel)) {
        final Collection<String> rootsToAdd=getRbSwcUrlsForCompiledLocales(rbSwcPlaceholdersUrl);
        libraryModifiableModel.removeRoot(rbSwcPlaceholdersUrl,OrderRootType.CLASSES);
        for (        final String rootToAdd : rootsToAdd) {
          if (!ArrayUtil.contains(rootToAdd,libraryModifiableModel.getUrls(OrderRootType.CLASSES))) {
            libraryModifiableModel.addRoot(rootToAdd,OrderRootType.CLASSES);
          }
        }
      }
    }
    if (libraryName.contains(":swc:") || libraryName.contains(":rb.swc:") || libraryName.contains(":resource-bundle:")) {
      playerglobal|=libraryName.contains("playerglobal");
      airglobal|=libraryName.contains("airglobal");
      mobilecomponents|=libraryName.contains("mobilecomponents");
      final LibraryType<?> type=((LibraryEx)library).getType();
      final FlexLibraryType flexLibraryType=FlexLibraryType.getInstance();
      if (type != flexLibraryType) {
        if (type == null) {
          final LibraryEx.ModifiableModelEx libraryModel=(LibraryEx.ModifiableModelEx)myModelsProvider.getLibraryModel(library);
          libraryModel.setType(flexLibraryType);
          libraryModel.setProperties(flexLibraryType.createDefaultProperties());
        }
      }
      final ModifiableDependencyEntry sharedLibraryEntry=myFlexEditor.createSharedLibraryEntry(bc.getDependencies(),((LibraryOrderEntry)entry).getLibraryName(),((LibraryOrderEntry)entry).getLibraryLevel());
      sharedLibraryEntry.getDependencyType().setLinkageType(FlexUtils.convertLinkageType(scope,isExported));
      bc.getDependencies().getModifiableEntries().add(sharedLibraryEntry);
    }
 else {
      MavenLog.LOG.info("Non-swc dependency for flexmojos project '" + myModule.getName() + "': "+ libraryName);
    }
  }
  return mobilecomponents && airglobal ? TargetPlatform.Mobile : airglobal && !playerglobal ? TargetPlatform.Desktop : TargetPlatform.Web;
}
