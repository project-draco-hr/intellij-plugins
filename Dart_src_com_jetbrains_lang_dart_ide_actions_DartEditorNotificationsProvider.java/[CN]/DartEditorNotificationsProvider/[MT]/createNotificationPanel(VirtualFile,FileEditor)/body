{
  if (!vFile.isInLocalFileSystem()) {
    return null;
  }
  if (PubspecYamlUtil.PUBSPEC_YAML.equalsIgnoreCase(vFile.getName())) {
    final DartSdk sdk=DartSdk.getDartSdk(myProject);
    final Module module=ModuleUtilCore.findModuleForFile(vFile,myProject);
    if (module != null && sdk != null && DartSdkGlobalLibUtil.isDartSdkEnabled(module)) {
      return new PubActionsPanel();
    }
  }
  if (PubspecYamlUtil.PUBSPEC_YAML.equalsIgnoreCase(vFile.getName()) || vFile.getFileType() == DartFileType.INSTANCE) {
    final DartSdk sdk=DartSdk.getDartSdk(myProject);
    if (sdk == null) {
      final String message=DartBundle.message("dart.sdk.is.not.configured");
      final String downloadUrl=DartSdkUpdateChecker.SDK_STABLE_DOWNLOAD_URL;
      final EditorNotificationPanel panel=new EditorNotificationPanel().icon(DartIcons.Dart_16).text(message);
      panel.createActionLabel(DartBundle.message("download.dart.sdk"),new OpenWebPageRunnable(downloadUrl));
      panel.createActionLabel(DartBundle.message("open.dart.settings"),new OpenDartSettingsRunnable(myProject));
      return panel;
    }
    final PsiFile psiFile=PsiManager.getInstance(myProject).findFile(vFile);
    if (psiFile == null)     return null;
    final Module module=ModuleUtilCore.findModuleForPsiElement(psiFile);
    if (module == null)     return null;
    if (!DartSdkGlobalLibUtil.isDartSdkEnabled(module)) {
      final String message=DartSdkGlobalLibUtil.isIdeWithMultipleModuleSupport() ? DartBundle.message("dart.support.is.not.enabled.for.module.0",module.getName()) : DartBundle.message("dart.support.is.not.enabled.for.project");
      final EditorNotificationPanel panel=new EditorNotificationPanel().icon(DartIcons.Dart_16).text(message);
      panel.createActionLabel(DartBundle.message("enable.dart.support"),new EnableDartSupportForModule(module));
      panel.createActionLabel(DartBundle.message("open.dart.settings"),new OpenDartSettingsRunnable(myProject));
      return panel;
    }
    if (!DartAnalysisServerService.isDartSdkVersionSufficient(sdk)) {
      final String message=DartBundle.message("old.dart.sdk.configured",DartAnalysisServerService.MIN_SDK_VERSION,sdk.getVersion());
      final String downloadUrl=DartSdkUpdateChecker.SDK_STABLE_DOWNLOAD_URL;
      final EditorNotificationPanel panel=new EditorNotificationPanel().icon(DartIcons.Dart_16).text(message);
      panel.createActionLabel(DartBundle.message("download.dart.sdk"),new OpenWebPageRunnable(downloadUrl));
      panel.createActionLabel(DartBundle.message("open.dart.settings"),new OpenDartSettingsRunnable(myProject));
      return panel;
    }
  }
  return null;
}
