{
  final PsiReference[] references=element.getReferences();
  final PsiPolyVariantReference fileReference;
  int i=references.length - 1;
  while (true) {
    final PsiReference reference=i < 0 ? null : references[i];
    if (reference instanceof JSFileReference || reference instanceof ResourceBundleReference) {
      fileReference=(PsiPolyVariantReference)reference;
      break;
    }
 else     if (--i < 0) {
      throw new InvalidPropertyException(element,"cannot.find.file.reference");
    }
  }
  ResolveResult[] resolveResults=fileReference.multiResolve(false);
  final PsiFileSystemItem psiFile;
  if (resolveResults.length == 0) {
    psiFile=null;
  }
 else   if (resolveResults.length == 1 || resolveToFirstIfMulti) {
    psiFile=(PsiFileSystemItem)resolveResults[0].getElement();
  }
 else {
    psiFile=resolveResult(element,resolveResults);
  }
  if (psiFile == null) {
    if (fileReference instanceof FileReference) {
      throw new InvalidPropertyException(((FileReference)fileReference).getUnresolvedMessagePattern(),element);
    }
 else {
      throw new InvalidPropertyException(element,"unresolved.resource.bundle",fileReference.getCanonicalText());
    }
  }
 else   if (psiFile.isDirectory()) {
    throw new InvalidPropertyException(element,"embed.source.is.directory",fileReference.getCanonicalText());
  }
 else {
    return psiFile;
  }
}
