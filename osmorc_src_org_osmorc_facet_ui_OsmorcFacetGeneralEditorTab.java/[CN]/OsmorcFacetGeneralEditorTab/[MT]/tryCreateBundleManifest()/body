{
  String manifestPath=getManifestLocation();
  if (StringUtil.isEmpty(manifestPath)) {
    return;
  }
  VirtualFile[] contentRoots=getContentRoots(myModule);
  if (contentRoots.length <= 0) {
    return;
  }
  String bundleName=myModule.getName();
  Version bundleVersion=null;
  int nextDotPos=bundleName.indexOf('.');
  while (bundleVersion == null && nextDotPos >= 0) {
    try {
      bundleVersion=new Version(bundleName.substring(nextDotPos + 1));
      bundleName=bundleName.substring(0,nextDotPos);
    }
 catch (    IllegalArgumentException e) {
    }
    nextDotPos=bundleName.indexOf('.',nextDotPos + 1);
  }
  String text=Attributes.Name.MANIFEST_VERSION + ": 1.0.0\n" + Constants.BUNDLE_MANIFESTVERSION+ ": 2\n"+ Constants.BUNDLE_NAME+ ": "+ bundleName+ "\n"+ Constants.BUNDLE_SYMBOLICNAME+ ": "+ bundleName+ "\n"+ Constants.BUNDLE_VERSION+ ": "+ (bundleVersion != null ? bundleVersion.toString() : "1.0.0")+ "\n";
  final File path=new File(contentRoots[0].getPath(),manifestPath);
  try {
    FileUtil.writeToFile(path,text);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  VirtualFile file=new WriteAction<VirtualFile>(){
    @Override protected void run(    Result<VirtualFile> result) throws Throwable {
      result.setResult(LocalFileSystem.getInstance().refreshAndFindFileByIoFile(path));
    }
  }
.execute().getResultObject();
  if (file == null) {
    throw new RuntimeException("Not found: '" + path + "'");
  }
}
