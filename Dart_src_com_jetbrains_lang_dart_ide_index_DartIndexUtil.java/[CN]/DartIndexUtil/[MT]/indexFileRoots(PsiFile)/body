{
  DartFileIndexData result=new DartFileIndexData();
  result.setLibraryName(DartResolveUtil.getLibraryName(psiFile));
  for (  PsiElement rootElement : findDartRoots(psiFile)) {
    PsiElement[] children=rootElement.getChildren();
    final DartPartOfStatement partOfStatement=PsiTreeUtil.getChildOfType(rootElement,DartPartOfStatement.class);
    String libraryId=partOfStatement != null ? DartResolveUtil.normalizeLibraryName(partOfStatement.getLibraryId().getCanonicalText()) : result.getLibraryName();
    for (    DartComponentName componentName : DartControlFlowUtil.getSimpleDeclarations(children,null,false)) {
      final String name=componentName.getName();
      if (name == null) {
        continue;
      }
      PsiElement parent=componentName.getParent();
      final DartComponentType type=DartComponentType.typeOf(parent);
      if (type != null) {
        result.addComponentInfo(name,new DartComponentInfo(psiFile.getName(),type,libraryId));
      }
      if (parent instanceof DartClass) {
        result.addClassName(name);
        processInheritors(result,name,(DartClass)parent,libraryId);
        for (        DartComponent subComponent : DartResolveUtil.getNamedSubComponents((DartClass)parent)) {
          result.addSymbol(subComponent.getName());
        }
      }
    }
    for (    PsiElement child : children) {
      if (child instanceof DartImportStatement) {
        processImportStatement(result,(DartImportStatement)child);
      }
      if (child instanceof DartSourceStatement) {
        final String pathValue=FileUtil.toSystemIndependentName(StringUtil.unquoteString(((DartSourceStatement)child).getPath()));
        result.addPath(pathValue);
      }
      if (child instanceof DartNativeStatement) {
        final String pathValue=FileUtil.toSystemIndependentName(StringUtil.unquoteString(((DartNativeStatement)child).getPath()));
        result.addPath(pathValue);
      }
    }
  }
  return result;
}
