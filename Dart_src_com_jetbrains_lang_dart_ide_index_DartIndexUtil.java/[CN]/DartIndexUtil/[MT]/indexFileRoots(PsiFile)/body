{
  DartFileIndexData result=new DartFileIndexData();
  result.setLibraryName(DartResolveUtil.getLibraryName(psiFile));
  result.setIsPart(PsiTreeUtil.getChildOfType(psiFile,DartPartOfStatement.class) != null);
  for (  PsiElement rootElement : findDartRoots(psiFile)) {
    PsiElement[] children=rootElement.getChildren();
    for (    DartComponentName componentName : DartControlFlowUtil.getSimpleDeclarations(children,null,false)) {
      final String name=componentName.getName();
      if (name == null) {
        continue;
      }
      result.addSymbol(name);
      PsiElement parent=componentName.getParent();
      final DartComponentType type=DartComponentType.typeOf(parent);
      if (type != null) {
        result.addComponentInfo(name,new DartComponentInfo(type,result.getLibraryName()));
      }
      if (parent instanceof DartClass) {
        result.addClassName(name);
        if (((DartClass)parent).isEnum()) {
          for (          DartEnumConstantDeclaration enumConstantDeclaration : ((DartClass)parent).getEnumConstantDeclarationList()) {
            result.addSymbol(enumConstantDeclaration.getName());
          }
        }
 else {
          processInheritors(result,(DartClass)parent,result.getLibraryName());
          for (          DartComponent subComponent : DartResolveUtil.getNamedSubComponents((DartClass)parent)) {
            result.addSymbol(subComponent.getName());
          }
        }
      }
    }
    for (    PsiElement child : children) {
      if (child instanceof DartImportOrExportStatement) {
        processImportOrExportStatement(result,(DartImportOrExportStatement)child);
      }
      if (child instanceof DartPartStatement) {
        result.addPartUri(((DartPartStatement)child).getUriString());
      }
    }
  }
  return result;
}
