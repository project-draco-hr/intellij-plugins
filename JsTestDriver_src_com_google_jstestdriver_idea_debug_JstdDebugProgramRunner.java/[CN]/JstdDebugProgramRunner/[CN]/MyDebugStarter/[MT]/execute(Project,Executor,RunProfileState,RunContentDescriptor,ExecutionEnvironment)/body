{
  final WebBrowser browser=myDebugBrowserInfo.getBrowser();
  final Url url;
  if (browser.getFamily().equals(BrowserFamily.CHROME)) {
    url=Urls.newHttpUrl("127.0.0.1:" + myDebugBrowserInfo.getServerSettings().getPort(),myDebugBrowserInfo.getPath());
  }
 else {
    url=null;
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  JstdRunProfileState jstdState=JstdRunProfileState.cast(state);
  final ExecutionResult executionResult=jstdState.executeWithServer(myServer);
  File configFile=new File(jstdState.getRunSettings().getConfigFile());
  final RemoteDebuggingFileFinder fileFinder=new JstdDebuggingFileFinderProvider(configFile,myServer).provideFileFinder();
  XDebugSession session=XDebuggerManager.getInstance(project).startSession(environment,new XDebugProcessStarter(){
    @Override @NotNull public XDebugProcess start(    @NotNull XDebugSession session){
      JavaScriptDebugEngine debugEngine=myDebugBrowserInfo.getDebugEngine();
      JSDebugProcess<?> process=debugEngine.createDebugProcess(session,browser,fileFinder,url,executionResult,false);
      process.setElementsInspectorEnabled(false);
      return process;
    }
  }
);
  ((JSDebugProcess)session.getDebugProcess()).getConnection().executeOnStart(new Runnable(){
    @Override public void run(){
      Runnable runnable=new Runnable(){
        @Override public void run(){
          resumeJstdClientRunning(executionResult.getProcessHandler());
        }
      }
;
      if (ApplicationManager.getApplication().isReadAccessAllowed()) {
        ApplicationManager.getApplication().executeOnPooledThread(runnable);
      }
 else {
        runnable.run();
      }
    }
  }
);
  return session.getRunContentDescriptor();
}
