{
  JstdDebugBrowserInfo<Connection> debugBrowserInfo=JstdDebugBrowserInfo.build(runConfiguration.getRunSettings());
  if (debugBrowserInfo == null) {
    throw new ExecutionException("Can not find a browser that supports debugging.");
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  final JSDebugEngine<Connection> debugEngine=debugBrowserInfo.getDebugEngine();
  if (!debugEngine.prepareDebugger(project))   return null;
  final String url;
  final Connection connection=debugEngine.openConnection(false);
  if (debugEngine instanceof ChromeDebuggerEngine) {
    url="http://localhost:" + JstdToolWindowPanel.serverPort + debugBrowserInfo.getCapturedBrowserUrl();
  }
 else {
    url=null;
  }
  JstdTestRunnerCommandLineState runState=runConfiguration.getState(env,null,true);
  final ExecutionResult executionResult=runState.execute(executor,this);
  debugBrowserInfo.fixIfChrome(executionResult.getProcessHandler());
  File configFile=new File(runConfiguration.getRunSettings().getConfigFile());
  final DebuggableFileFinder fileFinder=JstdDebuggableFileFinderProvider.createFileFinder(project,configFile);
  XDebuggerManager xDebuggerManager=XDebuggerManager.getInstance(project);
  XDebugSession xDebugSession=xDebuggerManager.startSession(this,env,contentToReuse,new XDebugProcessStarter(){
    @NotNull public XDebugProcess start(    @NotNull final XDebugSession session){
      JSDebugProcess debugProcess=debugEngine.createDebugProcess(session,fileFinder,connection,url,executionResult);
      debugProcess.getBrowserConnection().queueRequest(new Consumer(){
        @Override public void consume(        Object javascriptVm){
          resumeJstdClientRunning(executionResult.getProcessHandler());
        }
      }
);
      return debugProcess;
    }
  }
);
  return xDebugSession.getRunContentDescriptor();
}
