{
  JstdDebugBrowserInfo<Connection> debugBrowserInfo=JstdDebugBrowserInfo.build(runConfiguration.getRunSettings());
  if (debugBrowserInfo == null) {
    throw new ExecutionException("Can not find a browser that supports debugging.");
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  final JSDebugEngine<Connection> debugEngine=debugBrowserInfo.getDebugEngine();
  if (!debugEngine.prepareDebugger(project))   return null;
  final Url url;
  final Connection connection=debugEngine.openConnection(false);
  if (debugEngine.getBrowserFamily().equals(BrowsersConfiguration.BrowserFamily.CHROME)) {
    url=Urls.newHttpUrl("127.0.0.1:" + JstdToolWindowPanel.serverPort,debugBrowserInfo.getCapturedBrowserUrl());
  }
 else {
    url=null;
  }
  JstdTestRunnerCommandLineState runState=runConfiguration.getState(env,null,true);
  final ExecutionResult executionResult=runState.execute(env.getExecutor(),this);
  debugBrowserInfo.fixIfChrome(executionResult.getProcessHandler());
  final RemoteDebuggingFileFinder fileFinder=new JstdDebuggableFileFinderProvider(new File(runConfiguration.getRunSettings().getConfigFile())).provideFileFinder();
  XDebugSession session=XDebuggerManager.getInstance(project).startSession(this,env,contentToReuse,new XDebugProcessStarter(){
    @Override @NotNull public XDebugProcess start(    @NotNull XDebugSession session){
      JSDebugProcess process=debugEngine.createDebugProcess(session,fileFinder,connection,url,executionResult);
      process.setElementsInspectorEnabled(false);
      return process;
    }
  }
);
  ((JSDebugProcess)session.getDebugProcess()).getConnection().executeOnStart(new Runnable(){
    @Override public void run(){
      resumeJstdClientRunning(executionResult.getProcessHandler());
    }
  }
);
  return session.getRunContentDescriptor();
}
