{
  final WebBrowser browser=debugBrowserInfo.getBrowser();
  final Url url;
  if (browser.getFamily().equals(BrowserFamily.CHROME)) {
    url=Urls.newHttpUrl("127.0.0.1:" + debugBrowserInfo.getServerSettings().getPort(),debugBrowserInfo.getPath());
  }
 else {
    url=null;
  }
  JstdTestRunnerCommandLineState runState=runConfiguration.getState(env,null,true);
  final ExecutionResult executionResult=runState.execute(env.getExecutor(),this);
  final RemoteDebuggingFileFinder fileFinder=new JstdDebuggableFileFinderProvider(new File(runConfiguration.getRunSettings().getConfigFile())).provideFileFinder();
  XDebugSession session=XDebuggerManager.getInstance(project).startSession(this,env,contentToReuse,new XDebugProcessStarter(){
    @Override @NotNull public XDebugProcess start(    @NotNull XDebugSession session){
      JSDebugProcess<?> process=debugBrowserInfo.getDebugEngine().createDebugProcess(session,browser,fileFinder,url,executionResult,false);
      process.setElementsInspectorEnabled(false);
      return process;
    }
  }
);
  ((JSDebugProcess)session.getDebugProcess()).getConnection().executeOnStart(new Runnable(){
    @Override public void run(){
      Runnable runnable=new Runnable(){
        @Override public void run(){
          resumeJstdClientRunning(executionResult.getProcessHandler());
        }
      }
;
      if (ApplicationManager.getApplication().isReadAccessAllowed()) {
        ApplicationManager.getApplication().executeOnPooledThread(runnable);
      }
 else {
        runnable.run();
      }
    }
  }
);
  return session.getRunContentDescriptor();
}
