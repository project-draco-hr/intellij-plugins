{
  final Encoder encoder=flexSdkVersion != null ? new FlexEncoder("test",flexSdkVersion) : new Encoder();
  encoder.configure(decoders,null);
  SwfUtil.mergeDoAbc(decoders,encoder);
  encoder.writeDoAbc(channel,true);
  int length=0;
  for (  SymbolInfo info : symbols) {
    length+=2 + (info.end - info.start);
  }
  Collections.sort(symbols,new Comparator<SymbolInfo>(){
    @Override public int compare(    SymbolInfo o1,    SymbolInfo o2){
      return o1.newId - o2.newId;
    }
  }
);
  buffer.clear();
  encodeTagHeader(TagTypes.SymbolClass,length + 2);
  buffer.putShort((short)symbols.size());
  buffer.flip();
  channel.write(buffer);
  buffer.clear();
  for (  SymbolInfo info : symbols) {
    final ByteBuffer b=info.buffer;
    final int start=info.start - 2;
    b.putShort(start,(short)info.newId);
    b.position(start);
    b.limit(info.end);
    channel.write(b);
    b.limit(b.capacity());
  }
  buffer.clear();
  SwfUtil.footer(buffer);
  buffer.flip();
  channel.write(buffer);
  SwfUtil.header(channel,buffer);
  out.flush();
  out.close();
  channel=null;
}
