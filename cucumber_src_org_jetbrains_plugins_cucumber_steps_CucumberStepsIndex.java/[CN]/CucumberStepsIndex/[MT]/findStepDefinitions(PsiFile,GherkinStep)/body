{
  final Module module=ModuleUtilCore.findModuleForPsiElement(featureFile);
  if (module == null)   return null;
  Map<Class<? extends AbstractStepDefinition>,AbstractStepDefinition> definitionsByClass=new java.util.HashMap<Class<? extends AbstractStepDefinition>,AbstractStepDefinition>();
  List<AbstractStepDefinition> allSteps=loadStepsFor(featureFile,module);
  for (  AbstractStepDefinition stepDefinition : allSteps) {
    if (stepDefinition.matches(step.getSubstitutedName()) && stepDefinition.supportsStep(step)) {
      final Pattern currentLongestPattern=getPatternByDefinition(definitionsByClass.get(stepDefinition.getClass()));
      final Pattern newPattern=getPatternByDefinition(stepDefinition);
      final int newPatternLength=((newPattern != null) ? newPattern.getPattern().length() : -1);
      if ((currentLongestPattern == null) || (currentLongestPattern.getPattern().length() < newPatternLength)) {
        definitionsByClass.put(stepDefinition.getClass(),stepDefinition);
      }
    }
  }
  return definitionsByClass.values();
}
