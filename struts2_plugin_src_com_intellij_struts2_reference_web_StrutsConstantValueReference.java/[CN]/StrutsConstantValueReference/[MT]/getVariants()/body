{
  if (elementConverterPair == null) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final Converter converter=elementConverterPair.second;
  if (!(converter instanceof ResolvingConverter)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final ResolvingConverter resolvingConverter=(ResolvingConverter)converter;
  final DomElement paramValueElement=elementConverterPair.first;
  final ConvertContext convertContext=AbstractConvertContext.createConvertContext(paramValueElement);
  final Collection converterVariants=new ArrayList(resolvingConverter.getVariants(convertContext));
  final Collection variants;
  if (!converterVariants.isEmpty() && converterVariants.iterator().next() instanceof DomElement) {
    variants=Arrays.asList(ElementPresentationManager.getInstance().createVariants(converterVariants));
  }
 else {
    variants=converterVariants;
  }
  variants.addAll(resolvingConverter.getAdditionalVariants(convertContext));
  if (resolvingConverter instanceof CustomReferenceConverter) {
    final PsiReference[] references=((CustomReferenceConverter)resolvingConverter).createReferences((GenericDomValue)paramValueElement,myElement,convertContext);
    for (    final PsiReference customReference : references) {
      if (customReference instanceof JavaClassReference) {
        JavaClassReference javaClassReference=(JavaClassReference)customReference;
        String[] names=javaClassReference.getExtendClassNames();
        PsiElement context=javaClassReference.getCompletionContext();
        if (names != null && context instanceof PsiPackage) {
          javaClassReference.processSubclassVariants((PsiPackage)context,names,new Consumer<LookupElement>(){
            @Override public void consume(            LookupElement element){
              variants.add(element);
            }
          }
);
          continue;
        }
      }
      Collections.addAll(variants,customReference.getVariants());
    }
  }
  return ArrayUtil.toObjectArray(variants);
}
