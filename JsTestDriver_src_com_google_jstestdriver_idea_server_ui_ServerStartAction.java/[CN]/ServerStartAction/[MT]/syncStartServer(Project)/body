{
  final JstdServerState jstdServerState=JstdServerState.getInstance();
  if (jstdServerState.isServerRunning()) {
    return;
  }
  setJstdLoggerConfiguration(RunnerMode.TRACE);
  final ServerStartupError serverStartupError;
  try {
    Pair<ServerStartupError,StandardStreamsUtil.CapturedStreams> result=StandardStreamsUtil.captureStandardStreams(new NullableComputable<ServerStartupError>(){
      @Nullable @Override public ServerStartupError compute(){
        return doStartServer(jstdServerState);
      }
    }
);
    serverStartupError=result.getFirst();
    StandardStreamsUtil.CapturedStreams streams=result.getSecond();
    LOG.info("JsTestDriver server startup log:\n" + "stdout:" + streams.getStdOut() + "\n"+ "stderr:"+ streams.getStdErr());
  }
  finally {
    setJstdLoggerConfiguration(RunnerMode.INFO);
  }
  if (serverStartupError != null) {
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        String title="JsTestDriver Server Launching";
        boolean addShowLogAction=serverStartupError.isUnknownReason() && ShowFilePathAction.isSupported();
        List<String> options=ContainerUtil.newArrayList("Close");
        if (addShowLogAction) {
          options.add(0,ShowLogAction.getActionName());
        }
        int result=Messages.showDialog(project,serverStartupError.getMessage(),title,ArrayUtil.toStringArray(options),0,Messages.getErrorIcon());
        if (addShowLogAction && result == 0) {
          final File logFile=new File(PathManager.getLogPath(),"idea.log");
          ShowFilePathAction.openFile(logFile);
        }
      }
    }
);
  }
}
