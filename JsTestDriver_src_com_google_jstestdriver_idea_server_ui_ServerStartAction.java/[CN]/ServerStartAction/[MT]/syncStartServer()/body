{
  JstdServerState jstdServerState=JstdServerState.getInstance();
  if (jstdServerState.isServerRunning()) {
    return;
  }
  int serverPort=JstdToolWindowPanel.serverPort;
  FileLoader fileLoader=new ProcessingFileLoader(new SimpleFileReader(),Collections.<FileLoadPostProcessor>singleton(new InlineHtmlProcessor(new HtmlDocParser(),new HtmlDocLexer())),new NullStopWatch());
  CapturedBrowsers browsers=new CapturedBrowsers(new BrowserIdStrategy(new TimeImpl()));
  jstdServerState.setCapturedBrowsers(browsers);
  JsTestDriverServer.Factory factory=new DefaultServerFactory(browsers,SlaveBrowser.TIMEOUT,new NullPathPrefix(),Sets.<ServerListener>newHashSet(jstdServerState));
  ServerStartupAction serverStartupAction=new ServerStartupAction(serverPort,-1,new JstdTestCaseStore(),false,fileLoader,factory);
  try {
    serverStartupAction.run(null);
    ACTIVE_SERVER_STARTUP_ACTION=serverStartupAction;
  }
 catch (  Exception ex) {
    ServerStopAction.runStopAction(serverStartupAction);
    final String title="JsTestDriver Server Launching";
    int sslPort=serverPort + 1;
    final String message;
    if (!isLocalPortAvailable(serverPort)) {
      message="Can't start JsTestDriver server on port " + serverPort + ".\nMake sure the port is free.";
    }
 else     if (!isLocalPortAvailable(sslPort)) {
      message="Can't start JsTestDriver server.\nMake sure the ssl port " + sslPort + " is free.";
    }
 else {
      message="Can't start JsTestDriver server due to unknown reasons." + "\n" + "See idea.log (Help->Reveal Log in ...).";
      LOG.warn(message,ex);
    }
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        Messages.showErrorDialog(message,title);
      }
    }
);
  }
}
