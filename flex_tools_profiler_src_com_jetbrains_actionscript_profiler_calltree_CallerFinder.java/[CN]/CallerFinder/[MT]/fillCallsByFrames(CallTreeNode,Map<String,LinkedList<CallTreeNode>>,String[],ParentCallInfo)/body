{
  int currentSizeBefore=0;
  if (calls.containsKey(currentNode.getFrameName())) {
    currentSizeBefore=calls.get(currentNode.getFrameName()).size();
  }
  for (  CallTreeNode childCall : currentNode.getChildren()) {
    if (childCall.getFrameName().equals(frames[frames.length - 1])) {
      fillCallsByFrames(childCall,calls,frames,new ParentCallInfo(frames.length - 1,currentNode,currentSizeBefore));
    }
 else {
      fillCallsByFrames(childCall,calls,frames,new ParentCallInfo(frames.length - 1,null,0));
    }
    if (parentInfo.getIndex() > 0 && currentNode.getFrameName().equals(frames[parentInfo.getIndex()])) {
      fillCallsByFrames(childCall,calls,frames,new ParentCallInfo(parentInfo.getIndex() - 1,parentInfo.getNode(),parentInfo.getSnapshotSizeOfCalls()));
    }
  }
  if (parentInfo.getIndex() == 0 && currentNode.getFrameName().equals(frames[parentInfo.getIndex()]) && parentInfo.getNode() != null) {
    String callerName=parentInfo.getNode().getFrameName();
    LinkedList<CallTreeNode> callerCalls=calls.get(callerName);
    if (callerCalls == null) {
      callerCalls=new LinkedList<CallTreeNode>();
      calls.put(callerName,callerCalls);
    }
    while (callerCalls.size() > parentInfo.getSnapshotSizeOfCalls()) {
      callerCalls.removeLast();
    }
    callerCalls.add(parentInfo.getNode());
  }
}
