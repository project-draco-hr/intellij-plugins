{
  final Location location=error.getLocation();
  int highlightingStart=location.getOffset();
  int highlightingEnd=location.getOffset() + location.getLength();
  if (highlightingEnd > fileTextLength)   highlightingEnd=fileTextLength;
  if (highlightingStart > 0 && highlightingStart >= highlightingEnd)   highlightingStart=highlightingEnd - 1;
  final TextRange textRange=new TextRange(highlightingStart,highlightingEnd);
  final String severity=error.getSeverity();
  if (AnalysisErrorSeverity.INFO.equals(severity)) {
    final Annotation annotation=holder.createWeakWarningAnnotation(textRange,error.getMessage());
    if ("Unused import".equals(error.getMessage()) || "Duplicate import".equals(error.getMessage())) {
      annotation.setHighlightType(ProblemHighlightType.LIKE_UNUSED_SYMBOL);
    }
    return annotation;
  }
 else   if (AnalysisErrorSeverity.WARNING.equals(severity)) {
    return holder.createWarningAnnotation(textRange,error.getMessage());
  }
 else   if (AnalysisErrorSeverity.ERROR.equals(severity)) {
    return holder.createErrorAnnotation(textRange,error.getMessage());
  }
  return null;
}
