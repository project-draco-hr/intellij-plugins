{
  myInReset=true;
  mySdkInitial=DartSdk.getDartSdk(myProject);
  myModulesWithDartSdkLibAttachedInitial.clear();
  if (mySdkInitial != null) {
    myModulesWithDartSdkLibAttachedInitial.addAll(DartSdkGlobalLibUtil.getModulesWithDartSdkGlobalLibAttached(myProject,mySdkInitial.getGlobalLibName()));
  }
  myDartSupportEnabledInitial=!myModulesWithDartSdkLibAttachedInitial.isEmpty();
  myDartiumInitial=DartiumUtil.getDartiumBrowser();
  myDartiumSettingsCurrent=new ChromeSettings();
  if (myDartiumInitial != null) {
    final BrowserSpecificSettings browserSpecificSettings=myDartiumInitial.getSpecificSettings();
    if (browserSpecificSettings instanceof ChromeSettings) {
      myDartiumSettingsCurrent=(ChromeSettings)browserSpecificSettings.clone();
    }
  }
  myModuleToCustomPackageRootsCurrent.clear();
  for (  final Module module : ModuleManager.getInstance(myProject).getModules()) {
    myModuleToCustomPackageRootsCurrent.put(module,getCustomPackageRootPaths(module));
  }
  myEnableDartSupportCheckBox.setSelected(myDartSupportEnabledInitial);
  mySdkPathTextWithBrowse.setText(mySdkInitial == null ? "" : FileUtilRt.toSystemDependentName(mySdkInitial.getHomePath()));
  myDartiumPathTextWithBrowse.setText(myDartiumInitial == null ? "" : FileUtilRt.toSystemDependentName(StringUtil.notNullize(myDartiumInitial.getPath())));
  final boolean checkedMode=myDartiumInitial == null || DartiumUtil.isCheckedMode(myDartiumSettingsCurrent.getEnvironmentVariables());
  myCheckedModeCheckBox.setSelected(checkedMode);
  final PropertiesComponent propertiesComponent=PropertiesComponent.getInstance(myProject);
  propertiesComponent.setValue(DART_DO_CHECK_FOR_LATEST_SDK_KEY,Boolean.valueOf(DART_DO_CHECK_FOR_LATEST_SDK_DEFAULT_VALUE).toString());
  propertiesComponent.setValue(DART_CHECK_FOR_LATEST_STABLE_SDK_KEY,Boolean.valueOf(DART_CHECK_FOR_LATEST_STABLE_SDK_DEFAULT_VALUE).toString());
  propertiesComponent.setValue(DART_CHECK_FOR_LATEST_DEV_SDK_KEY,Boolean.valueOf(DART_CHECK_FOR_LATEST_DEV_SDK_DEFAULT_VALUE).toString());
  myCheckForNewSDKCheckBox.setSelected(DART_DO_CHECK_FOR_LATEST_SDK_DEFAULT_VALUE);
  myStableCheckBox.setSelected(DART_CHECK_FOR_LATEST_STABLE_SDK_DEFAULT_VALUE);
  myDevCheckBox.setSelected(DART_CHECK_FOR_LATEST_STABLE_SDK_DEFAULT_VALUE);
  myStableCheckBox.setEnabled(DART_DO_CHECK_FOR_LATEST_SDK_DEFAULT_VALUE);
  myDevCheckBox.setEnabled(DART_DO_CHECK_FOR_LATEST_SDK_DEFAULT_VALUE);
  if (DartSdkGlobalLibUtil.isIdeWithMultipleModuleSupport()) {
    final CheckedTreeNode rootNode=(CheckedTreeNode)myModulesCheckboxTreeTable.getTree().getModel().getRoot();
    rootNode.setChecked(false);
    final Enumeration children=rootNode.children();
    while (children.hasMoreElements()) {
      final CheckedTreeNode node=(CheckedTreeNode)children.nextElement();
      node.setChecked(myModulesWithDartSdkLibAttachedInitial.contains((Module)node.getUserObject()));
    }
  }
 else {
    final List<String> paths=myModuleToCustomPackageRootsCurrent.entrySet().iterator().next().getValue();
    myCustomPackageRootsTextWithBrowse.setText(StringUtil.join(paths,new Function<String,String>(){
      public String fun(      final String s){
        return FileUtil.toSystemDependentName(s);
      }
    }
,SEMICOLON));
  }
  updateControlsEnabledState();
  updateErrorLabel();
  myInReset=false;
}
