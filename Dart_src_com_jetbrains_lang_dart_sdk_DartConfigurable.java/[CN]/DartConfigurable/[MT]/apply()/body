{
  final Runnable runnable=new Runnable(){
    @Override public void run(){
      if (myEnableDartSupportCheckBox.isSelected()) {
        final String sdkHomePath=FileUtilRt.toSystemIndependentName(mySdkPathTextWithBrowse.getText().trim());
        final String initialSdkHomePath=mySdkInitial == null ? "" : mySdkInitial.getHomePath();
        if (DartSdkUtil.isDartSdkHome(sdkHomePath)) {
          final String dartSdkGlobalLibName;
          if (mySdkInitial == null) {
            dartSdkGlobalLibName=DartSdkGlobalLibUtil.createDartSdkGlobalLib(myProject,sdkHomePath);
          }
 else {
            dartSdkGlobalLibName=mySdkInitial.getGlobalLibName();
            if (!sdkHomePath.equals(initialSdkHomePath)) {
              DartSdkGlobalLibUtil.updateDartSdkGlobalLib(myProject,dartSdkGlobalLibName,sdkHomePath);
            }
          }
          final Module[] modules=DartSdkGlobalLibUtil.isIdeWithMultipleModuleSupport() ? myModulesCheckboxTreeTable.getCheckedNodes(Module.class) : ModuleManager.getInstance(myProject).getModules();
          DartSdkGlobalLibUtil.updateDependencyOnDartSdkGlobalLib(myProject,modules,dartSdkGlobalLibName);
          for (          Module module : ModuleManager.getInstance(myProject).getModules()) {
            if (ArrayUtil.contains(module,modules)) {
              final String customPackageRoot=DartSdkGlobalLibUtil.isIdeWithMultipleModuleSupport() || myCustomPackageRootCheckBox.isSelected() ? myModuleToCustomPackageRootCurrent.get(module) : null;
              setCustomPackageRootPath(module,customPackageRoot);
            }
 else {
              setCustomPackageRootPath(module,null);
            }
          }
        }
        final DartSdkUpdateOption sdkUpdateOption=myCheckSdkUpdateCheckBox.isSelected() ? (DartSdkUpdateOption)mySdkUpdateChannelCombo.getSelectedItem() : DartSdkUpdateOption.DoNotCheck;
        DartSdkUpdateOption.setDartSdkUpdateOption(sdkUpdateOption);
        final String dartiumPath=FileUtilRt.toSystemIndependentName(myDartiumPathTextWithBrowse.getText().trim());
        DartiumUtil.applyDartiumSettings(dartiumPath,myDartiumSettingsCurrent);
      }
 else {
        if (myModulesWithDartSdkLibAttachedInitial.size() > 0 && mySdkInitial != null) {
          DartSdkGlobalLibUtil.detachDartSdkGlobalLib(myModulesWithDartSdkLibAttachedInitial,mySdkInitial.getGlobalLibName());
        }
        for (        final Module module : ModuleManager.getInstance(myProject).getModules()) {
          setCustomPackageRootPath(module,null);
        }
      }
    }
  }
;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      DumbService.getInstance(myProject).allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND,runnable);
    }
  }
);
  reset();
}
