{
  mySdkPathComboWithBrowse=new ComboboxWithBrowseButton(new ComboBox<>());
  myDartiumPathComboWithBrowse=new ComboboxWithBrowseButton(new ComboBox<>());
  final CheckboxTree.CheckboxTreeCellRenderer checkboxTreeCellRenderer=new CheckboxTree.CheckboxTreeCellRenderer(){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (!(value instanceof CheckedTreeNode))       return;
      final boolean dartSupportEnabled=myEnableDartSupportCheckBox.isSelected();
      final CheckedTreeNode node=(CheckedTreeNode)value;
      final Object userObject=node.getUserObject();
      if (userObject instanceof Project) {
        if (!dartSupportEnabled) {
          getCheckbox().setEnabled(false);
        }
        getTextRenderer().setEnabled(dartSupportEnabled);
        getTextRenderer().append(DartBundle.message("project.0",((Project)userObject).getName()));
      }
 else       if (userObject instanceof Module) {
        getCheckbox().setEnabled(dartSupportEnabled);
        getTextRenderer().setEnabled(dartSupportEnabled);
        final Icon moduleIcon=ModuleType.get((Module)userObject).getIcon();
        getTextRenderer().setIcon(dartSupportEnabled ? moduleIcon : IconLoader.getDisabledIcon(moduleIcon));
        getTextRenderer().append(((Module)userObject).getName());
      }
    }
  }
;
  myModulesCheckboxTreeTable=new CheckboxTreeTable(null,checkboxTreeCellRenderer,new ColumnInfo[]{new TreeColumnInfo("")});
  myModulesCheckboxTreeTable.addCheckboxTreeListener(new CheckboxTreeAdapter(){
    @Override public void nodeStateChanged(    @NotNull CheckedTreeNode node){
      updateErrorLabel();
    }
  }
);
  myModulesCheckboxTreeTable.getTree().addTreeWillExpandListener(new TreeWillExpandListener(){
    public void treeWillExpand(    final TreeExpansionEvent event) throws ExpandVetoException {
    }
    public void treeWillCollapse(    final TreeExpansionEvent event) throws ExpandVetoException {
      throw new ExpandVetoException(event);
    }
  }
);
}
