{
  final CheckboxTree.CheckboxTreeCellRenderer checkboxTreeCellRenderer=new CheckboxTree.CheckboxTreeCellRenderer(){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (!(value instanceof CheckedTreeNode))       return;
      final boolean dartSupportEnabled=myEnableDartSupportCheckBox.isSelected();
      final CheckedTreeNode node=(CheckedTreeNode)value;
      final Object userObject=node.getUserObject();
      if (userObject instanceof Project) {
        if (!dartSupportEnabled) {
          getCheckbox().setEnabled(false);
        }
        getTextRenderer().setEnabled(dartSupportEnabled);
        getTextRenderer().append(DartBundle.message("project.0",((Project)userObject).getName()));
      }
 else       if (userObject instanceof Module) {
        getCheckbox().setEnabled(dartSupportEnabled);
        getTextRenderer().setEnabled(dartSupportEnabled);
        final Icon moduleIcon=ModuleType.get((Module)userObject).getIcon();
        getTextRenderer().setIcon(dartSupportEnabled ? moduleIcon : IconLoader.getDisabledIcon(moduleIcon));
        getTextRenderer().append(((Module)userObject).getName());
      }
    }
  }
;
  final TableCellRenderer customPackageRootsCellRenderer=new TableCellRenderer(){
    private final JBLabel myLabel=new JBLabel();
    public Component getTableCellRendererComponent(    final JTable table,    final Object value,    final boolean isSelected,    final boolean hasFocus,    final int row,    final int column){
      myLabel.setText(value instanceof String ? (String)value : "");
      return myLabel;
    }
  }
;
  final LocalPathCellEditor customPackageRootsEditor=new LocalPathCellEditor(myProject){
    protected ActionListener createActionListener(    final JTable table){
      return new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          selectCustomPackageRoots(myComponent.getChildComponent());
        }
      }
;
    }
  }
;
  final String columnName=DartBundle.message("custom.package.roots");
  final ColumnInfo<CheckedTreeNode,String> CUSTOM_PACKAGE_ROOTS_COLUMN=new ColumnInfo<CheckedTreeNode,String>(columnName){
    @Nullable public String valueOf(    final CheckedTreeNode node){
      final Object userObject=node.getUserObject();
      if (node.isChecked() && userObject instanceof Module) {
        return FileUtil.toSystemDependentName(StringUtil.notNullize(myModuleToCustomPackageRootsCurrent.get(userObject)));
      }
      return null;
    }
    public boolean isCellEditable(    final CheckedTreeNode node){
      return node.isChecked() && node.getUserObject() instanceof Module;
    }
    @Nullable public TableCellRenderer getRenderer(    final CheckedTreeNode node){
      return customPackageRootsCellRenderer;
    }
    @Nullable public TableCellEditor getEditor(    final CheckedTreeNode node){
      return customPackageRootsEditor;
    }
    public void setValue(    final CheckedTreeNode node,    final String value){
      final Object userObject=node.getUserObject();
      if (userObject instanceof Module) {
        myModuleToCustomPackageRootsCurrent.put((Module)userObject,FileUtil.toSystemIndependentName(value.trim()));
        updateErrorLabel();
      }
    }
    public int getWidth(    final JTable table){
      return new JLabel(getName()).getMinimumSize().width * 3 / 2;
    }
  }
;
  myModulesCheckboxTreeTable=new CheckboxTreeTable(null,checkboxTreeCellRenderer,new ColumnInfo[]{new TreeColumnInfo(""),CUSTOM_PACKAGE_ROOTS_COLUMN}){
    protected boolean toggleNode(    final CheckedTreeNode node){
      final boolean result=super.toggleNode(node);
      updateErrorLabel();
      return result;
    }
  }
;
  myModulesCheckboxTreeTable.setRowHeight(myModulesCheckboxTreeTable.getRowHeight() + 2);
  final DefaultActionGroup group=new DefaultActionGroup();
  group.add(new RemoveCustomPackageRootsAction(myModulesCheckboxTreeTable));
  PopupHandler.installPopupHandler(myModulesCheckboxTreeTable,group,ActionPlaces.UNKNOWN,ActionManager.getInstance());
}
