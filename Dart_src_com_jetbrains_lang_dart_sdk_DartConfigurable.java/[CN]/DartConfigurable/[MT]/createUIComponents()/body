{
  mySdkPathComboWithBrowse=new ComboboxWithBrowseButton(new ComboBox<>());
  myDartiumPathComboWithBrowse=new ComboboxWithBrowseButton(new ComboBox<>());
  final CheckboxTree.CheckboxTreeCellRenderer checkboxTreeCellRenderer=new CheckboxTree.CheckboxTreeCellRenderer(){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (!(value instanceof CheckedTreeNode))       return;
      final boolean dartSupportEnabled=myEnableDartSupportCheckBox.isSelected();
      final CheckedTreeNode node=(CheckedTreeNode)value;
      final Object userObject=node.getUserObject();
      if (userObject instanceof Project) {
        if (!dartSupportEnabled) {
          getCheckbox().setEnabled(false);
        }
        getTextRenderer().setEnabled(dartSupportEnabled);
        getTextRenderer().append(DartBundle.message("project.0",((Project)userObject).getName()));
      }
 else       if (userObject instanceof Module) {
        getCheckbox().setEnabled(dartSupportEnabled);
        getTextRenderer().setEnabled(dartSupportEnabled);
        final Icon moduleIcon=ModuleType.get((Module)userObject).getIcon();
        getTextRenderer().setIcon(dartSupportEnabled ? moduleIcon : IconLoader.getDisabledIcon(moduleIcon));
        getTextRenderer().append(((Module)userObject).getName());
      }
    }
  }
;
  final TableCellRenderer customPackageRootCellRenderer=new TableCellRenderer(){
    private final JBLabel myLabel=new JBLabel();
    private final TextFieldWithBrowseButton myTextWithBrowse=new TextFieldWithBrowseButton(){
      public void setOpaque(      final boolean isOpaque){
      }
    }
;
    public Component getTableCellRendererComponent(    final JTable table,    final Object value,    final boolean isSelected,    final boolean hasFocus,    final int row,    final int column){
      if (value instanceof String) {
        final String text=FileUtil.toSystemDependentName((String)value);
        if (isSelected) {
          myTextWithBrowse.setText(text);
          return myTextWithBrowse;
        }
 else {
          myLabel.setText(text);
          return myLabel;
        }
      }
 else {
        myLabel.setText("");
        return myLabel;
      }
    }
  }
;
  final LocalPathCellEditor customPackageRootEditor=new LocalPathCellEditor(myProject){
    public Object getCellEditorValue(){
      return FileUtil.toSystemIndependentName(myComponent.getChildComponent().getText().trim());
    }
    @Override public Component getTableCellEditorComponent(    final JTable table,    @Nullable final Object value,    final boolean isSelected,    final int row,    final int column){
      final TextFieldWithBrowseButton fieldWithBrowse=new TextFieldWithBrowseButton();
      fieldWithBrowse.addBrowseFolderListener(DartBundle.message("select.custom.package.root"),null,myProject,FileChooserDescriptorFactory.createSingleFolderDescriptor());
      myComponent=new CellEditorComponentWithBrowseButton<>(fieldWithBrowse,this);
      final String text=value != null ? FileUtil.toSystemDependentName((String)value) : "";
      myComponent.getChildComponent().setText(text);
      return myComponent;
    }
  }
;
  final String columnName=DartBundle.message("custom.package.root");
  final ColumnInfo<CheckedTreeNode,String> CUSTOM_PACKAGE_ROOT_COLUMN=new ColumnInfo<CheckedTreeNode,String>(columnName){
    @Nullable public String valueOf(    final CheckedTreeNode node){
      final Object userObject=node.getUserObject();
      if (node.isChecked() && userObject instanceof Module) {
        return myModuleToCustomPackageRootCurrent.get(userObject);
      }
      return null;
    }
    public boolean isCellEditable(    final CheckedTreeNode node){
      return node.isChecked() && node.getUserObject() instanceof Module;
    }
    @Nullable public TableCellRenderer getRenderer(    final CheckedTreeNode node){
      return customPackageRootCellRenderer;
    }
    @Nullable public TableCellEditor getEditor(    final CheckedTreeNode node){
      return customPackageRootEditor;
    }
    public void setValue(    final CheckedTreeNode node,    final String value){
      final Object userObject=node.getUserObject();
      if (userObject instanceof Module) {
        myModuleToCustomPackageRootCurrent.put((Module)userObject,StringUtil.nullize(value));
        updateErrorLabel();
      }
    }
    public int getWidth(    final JTable table){
      return new JLabel(getName()).getMinimumSize().width * 3 / 2;
    }
  }
;
  myModulesCheckboxTreeTable=new CheckboxTreeTable(null,checkboxTreeCellRenderer,new ColumnInfo[]{new TreeColumnInfo(""),CUSTOM_PACKAGE_ROOT_COLUMN});
  myModulesCheckboxTreeTable.addCheckboxTreeListener(new CheckboxTreeAdapter(){
    @Override public void nodeStateChanged(    @NotNull CheckedTreeNode node){
      updateErrorLabel();
    }
  }
);
  myModulesCheckboxTreeTable.setRowHeight(myModulesCheckboxTreeTable.getRowHeight() + 2);
  myModulesCheckboxTreeTable.getTree().addTreeWillExpandListener(new TreeWillExpandListener(){
    public void treeWillExpand(    final TreeExpansionEvent event) throws ExpandVetoException {
    }
    public void treeWillCollapse(    final TreeExpansionEvent event) throws ExpandVetoException {
      throw new ExpandVetoException(event);
    }
  }
);
  final DefaultActionGroup group=new DefaultActionGroup();
  group.add(new RemoveCustomPackageRootAction(myModulesCheckboxTreeTable));
  PopupHandler.installPopupHandler(myModulesCheckboxTreeTable,group,ActionPlaces.UNKNOWN,ActionManager.getInstance());
}
