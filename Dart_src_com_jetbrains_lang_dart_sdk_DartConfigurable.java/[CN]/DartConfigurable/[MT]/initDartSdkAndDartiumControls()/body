{
  final Computable<ChromeSettings> currentDartiumSettingsRetriever=new Computable<ChromeSettings>(){
    public ChromeSettings compute(){
      return myDartiumSettingsCurrent;
    }
  }
;
  final Computable<Boolean> isResettingControlsComputable=new Computable<Boolean>(){
    public Boolean compute(){
      return myInReset;
    }
  }
;
  DartSdkUtil.initDartSdkAndDartiumControls(myProject,mySdkPathTextWithBrowse,myVersionLabel,myDartiumPathTextWithBrowse,currentDartiumSettingsRetriever,myDartiumSettingsButton,myCheckedModeCheckBox,isResettingControlsComputable);
  final DocumentAdapter documentListener=new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateErrorLabel();
    }
  }
;
  mySdkPathTextWithBrowse.getTextField().getDocument().addDocumentListener(documentListener);
  myDartiumPathTextWithBrowse.getTextField().getDocument().addDocumentListener(documentListener);
  myCheckSdkUpdateCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean enabled=myCheckSdkUpdateCheckBox.isSelected() && myCheckSdkUpdateCheckBox.isEnabled();
      mySdkUpdateChannelCombo.setEnabled(enabled);
      if (enabled) {
        IdeFocusManager.getInstance(myProject).requestFocus(mySdkUpdateChannelCombo,true);
      }
    }
  }
);
  mySdkUpdateChannelCombo.setModel(new DefaultComboBoxModel(DartSdkUpdateOption.OPTIONS_TO_SHOW_IN_COMBO));
  mySdkUpdateChannelCombo.setRenderer(new ListCellRendererWrapper<DartSdkUpdateOption>(){
    @Override public void customize(    JList list,    DartSdkUpdateOption value,    int index,    boolean selected,    boolean hasFocus){
      setText(value.getPresentableName());
    }
  }
);
}
