{
  final Computable<ChromeSettings> currentDartiumSettingsRetriever=new Computable<ChromeSettings>(){
    public ChromeSettings compute(){
      return myDartiumSettingsCurrent;
    }
  }
;
  final Computable<Boolean> isResettingControlsComputable=new Computable<Boolean>(){
    public Boolean compute(){
      return myInReset;
    }
  }
;
  DartSdkUtil.initDartSdkAndDartiumControls(myProject,mySdkPathTextWithBrowse,myVersionLabel,myDartiumPathTextWithBrowse,currentDartiumSettingsRetriever,myDartiumSettingsButton,myCheckedModeCheckBox,isResettingControlsComputable);
  mySdkPathTextWithBrowse.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      final String sdkHomePath=mySdkPathTextWithBrowse.getText().trim();
      if (!sdkHomePath.isEmpty()) {
        final String version=DartSdkUtil.getSdkVersion(sdkHomePath);
        if (version != null && (version.contains("-dev.") || version.contains("-edge."))) {
          mySdkUpdateChannelCombo.setSelectedItem(DartSdkUpdateOption.StableAndDev);
        }
      }
      updateErrorLabel();
    }
  }
);
  myDartiumPathTextWithBrowse.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateErrorLabel();
    }
  }
);
  myCheckSdkUpdateCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean enabled=myCheckSdkUpdateCheckBox.isSelected() && myCheckSdkUpdateCheckBox.isEnabled();
      mySdkUpdateChannelCombo.setEnabled(enabled);
      myCheckSdkUpdateButton.setEnabled(enabled);
      if (enabled) {
        IdeFocusManager.getInstance(myProject).requestFocus(mySdkUpdateChannelCombo);
      }
    }
  }
);
  mySdkUpdateChannelCombo.setModel(new DefaultComboBoxModel(DartSdkUpdateOption.OPTIONS_TO_SHOW_IN_COMBO));
  mySdkUpdateChannelCombo.setRenderer(new ListCellRendererWrapper<DartSdkUpdateOption>(){
    @Override public void customize(    JList list,    DartSdkUpdateOption value,    int index,    boolean selected,    boolean hasFocus){
      setText(value.getPresentableName());
    }
  }
);
  myCheckSdkUpdateButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final Runnable runnable=new Runnable(){
        @Override public void run(){
          checkSdkUpdate();
        }
      }
;
      ApplicationManagerEx.getApplicationEx().runProcessWithProgressSynchronously(runnable,DartBundle.message("checking.dart.sdk.update"),true,myProject,myMainPanel);
    }
  }
);
}
