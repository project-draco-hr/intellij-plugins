{
  if (context instanceof XmlTag && FlexSdkUtils.isFlex4Sdk(FlexUtils.getSdkForActiveBC(parentDescriptor.context.module))) {
    MxmlLanguageTagsUtil.checkFlex4Attributes((XmlTag)context,host,false);
  }
  if (predefined)   return;
  String value;
  if (context instanceof XmlTag) {
    value=((XmlTag)context).getValue().getTrimmedText();
  }
 else {
    value=((XmlAttribute)context).getDisplayValue();
  }
  final String message=validateValue(context,value);
  if (message != null) {
    PsiElement errorElement=context;
    if (context instanceof XmlTag) {
      final XmlText[] textElements=((XmlTag)context).getValue().getTextElements();
      if (textElements.length == 1 && !StringUtil.isEmptyOrSpaces(textElements[0].getText())) {
        errorElement=textElements[0];
      }
    }
    host.addMessage(errorElement,message,ValidationHost.ErrorType.ERROR);
  }
  if (context instanceof XmlTag && FlexStateElementNames.STATES.equals(((XmlTag)context).getLocalName()) && FlexUtils.isMxmlNs(((XmlTag)context).getNamespace())) {
    XmlTag[] tags=((XmlTag)context).findSubTags("State",((XmlTag)context).getNamespace());
    XmlUtil.doDuplicationCheckForElements(tags,new HashMap<String,XmlTag>(tags.length),new XmlUtil.DuplicationInfoProvider<XmlTag>(){
      @Override public String getName(      @NotNull XmlTag xmlTag){
        return xmlTag.getAttributeValue(FlexStateElementNames.NAME);
      }
      @Override @NotNull public String getNameKey(      @NotNull XmlTag xmlTag,      @NotNull String name){
        return getName(xmlTag);
      }
      @Override @NotNull public PsiElement getNodeForMessage(      @NotNull XmlTag xmlTag){
        return xmlTag.getAttribute(FlexStateElementNames.NAME).getValueElement();
      }
    }
,host);
  }
}
