{
  final List<TextRange> parameterRanges=new ArrayList<TextRange>();
  final Pattern pattern=definition.getPattern();
  if (pattern == null)   return null;
  final Perl5Matcher matcher=new Perl5Matcher();
  if (matcher.matches(step.getStepName(),pattern)) {
    final MatchResult match=matcher.getMatch();
    final int groupCount=match.groups();
    for (int i=1; i < groupCount; i++) {
      final int start=match.beginOffset(i);
      final int end=match.endOffset(i);
      if (start >= 0 && end >= 0) {
        parameterRanges.add(new TextRange(start,end).shiftRight(shiftOffset));
      }
    }
  }
  int k=step.getText().indexOf(step.getStepName());
  k+=step.getStepName().length();
  if (k < step.getText().length() - 1) {
    String text=step.getText().substring(k + 1);
    boolean inParam=false;
    int paramStart=0;
    int i=0;
    while (i < text.length()) {
      if (text.charAt(i) == '<') {
        paramStart=i;
        inParam=true;
      }
      if (text.charAt(i) == '>' && inParam) {
        parameterRanges.add(new TextRange(paramStart,i + 1).shiftRight(shiftOffset + step.getStepName().length() + 1));
        inParam=false;
      }
      i++;
    }
  }
  return parameterRanges;
}
