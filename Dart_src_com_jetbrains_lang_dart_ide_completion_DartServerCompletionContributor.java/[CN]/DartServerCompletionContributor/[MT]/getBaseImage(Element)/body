{
  final String elementKind=element.getKind();
  if (elementKind.equals(ElementKind.CLASS) || elementKind.equals(ElementKind.CLASS_TYPE_ALIAS)) {
    if (element.isAbstract()) {
      return AllIcons.Nodes.AbstractClass;
    }
    return AllIcons.Nodes.Class;
  }
 else   if (elementKind.equals(ElementKind.ENUM)) {
    return AllIcons.Nodes.Enum;
  }
 else   if (elementKind.equals(ElementKind.ENUM_CONSTANT) || elementKind.equals(ElementKind.FIELD)) {
    return AllIcons.Nodes.Field;
  }
 else   if (elementKind.equals(ElementKind.COMPILATION_UNIT)) {
    return PlatformIcons.FILE_ICON;
  }
 else   if (elementKind.equals(ElementKind.CONSTRUCTOR)) {
    return AllIcons.Nodes.ClassInitializer;
  }
 else   if (elementKind.equals(ElementKind.GETTER)) {
    return element.isTopLevelOrStatic() ? AllIcons.Nodes.PropertyReadStatic : AllIcons.Nodes.PropertyRead;
  }
 else   if (elementKind.equals(ElementKind.SETTER)) {
    return element.isTopLevelOrStatic() ? AllIcons.Nodes.PropertyWriteStatic : AllIcons.Nodes.PropertyWrite;
  }
 else   if (elementKind.equals(ElementKind.METHOD)) {
    if (element.isAbstract()) {
      return AllIcons.Nodes.AbstractMethod;
    }
    return AllIcons.Nodes.Method;
  }
 else   if (elementKind.equals(ElementKind.FUNCTION)) {
    return AllIcons.Nodes.Function;
  }
 else   if (elementKind.equals(ElementKind.FUNCTION_TYPE_ALIAS)) {
    return AllIcons.Nodes.Annotationtype;
  }
 else   if (elementKind.equals(ElementKind.TOP_LEVEL_VARIABLE)) {
    return AllIcons.Nodes.Variable;
  }
 else {
    return null;
  }
}
