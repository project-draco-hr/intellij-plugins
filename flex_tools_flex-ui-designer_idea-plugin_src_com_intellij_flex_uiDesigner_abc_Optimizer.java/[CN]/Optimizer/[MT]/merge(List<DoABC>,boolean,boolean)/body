{
  int majorVersion=0, minorVersion=0, abcSize=doABCs.size(), flag;
  if (abcSize == 0) {
    return;
  }
 else   if (abcSize == 1) {
    flag=doABCs.get(0).flag;
  }
 else {
    flag=1;
  }
  Decoder[] decoders=new Decoder[abcSize];
  ConstantPool[] pools=new ConstantPool[abcSize];
  for (int j=0; j < abcSize; j++) {
    DoABC tag=doABCs.get(j);
    BytecodeBuffer in=new BytecodeBuffer(tag.abc);
    decoders[j]=new Decoder(in);
    majorVersion=decoders[j].majorVersion;
    minorVersion=decoders[j].minorVersion;
    pools[j]=decoders[j].constantPool;
  }
  Encoder encoder=new Encoder(majorVersion,minorVersion);
  encoder.addConstantPools(pools);
  if (!keepDebugOpcodes) {
    encoder.disableDebugging();
  }
  if (runPeephole) {
    encoder.enablePeepHole();
  }
  encoder.configure(decoders);
  Decoder decoder;
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.MethodInfo methodInfo=decoder.methodInfo;
    for (int k=0, infoSize=methodInfo.size(); k < infoSize; k++) {
      methodInfo.decode(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.MetaDataInfo metadataInfo=decoder.metadataInfo;
    for (int k=0, infoSize=metadataInfo.size(); k < infoSize; k++) {
      metadataInfo.decode(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.ClassInfo classInfo=decoder.classInfo;
    for (int k=0, infoSize=classInfo.size(); k < infoSize; k++) {
      classInfo.decodeInstance(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.ClassInfo classInfo=decoder.classInfo;
    for (int k=0, infoSize=classInfo.size(); k < infoSize; k++) {
      classInfo.decodeClass(k,0,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.ScriptInfo scriptInfo=decoder.scriptInfo;
    for (int k=0, scriptSize=scriptInfo.size(); k < scriptSize; k++) {
      scriptInfo.decode(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.MethodBodies methodBodies=decoder.methodBodies;
    for (int k=0, bodySize=methodBodies.size(); k < bodySize; k++) {
      methodBodies.decode(k,2,encoder);
    }
  }
  DoABC doABC=new DoABC("o",flag);
  doABC.abc=encoder.toABC();
  if (doABC.abc != null) {
    doABCs.clear();
    doABCs.add(doABC);
  }
}
