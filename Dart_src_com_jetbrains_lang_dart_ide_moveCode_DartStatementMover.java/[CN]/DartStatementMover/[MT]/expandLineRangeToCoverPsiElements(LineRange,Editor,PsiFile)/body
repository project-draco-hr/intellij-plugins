{
  Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,range);
  if (psiRange == null)   return null;
  if (psiRange.getFirst() instanceof DartStatements) {
    PsiElement first=psiRange.getFirst();
    PsiElement last=psiRange.getSecond();
    if (first != null && last != null) {
      PsiElement statement=first.getFirstChild();
      if (statement != null) {
        psiRange=Pair.create(statement,psiRange.getSecond());
      }
    }
  }
  final PsiElement parent=PsiTreeUtil.findCommonParent(psiRange.getFirst(),psiRange.getSecond());
  Pair<PsiElement,PsiElement> elementRange=getElementRange(parent,psiRange.getFirst(),psiRange.getSecond());
  if (elementRange == null)   return null;
  int endOffset=elementRange.getSecond().getTextRange().getEndOffset();
  Document document=editor.getDocument();
  if (endOffset > document.getTextLength()) {
    return null;
  }
  int endLine;
  if (endOffset == document.getTextLength()) {
    endLine=document.getLineCount();
  }
 else {
    endLine=editor.offsetToLogicalPosition(endOffset).line + 1;
    endLine=Math.min(endLine,document.getLineCount());
  }
  int startLine=Math.min(range.startLine,editor.offsetToLogicalPosition(elementRange.getFirst().getTextOffset()).line);
  endLine=Math.max(endLine,range.endLine);
  return new LineRange(startLine,endLine);
}
