{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 65:
{
        return OgnlTokenTypes.FALSE_KEYWORD;
      }
case 68:
    break;
case 47:
{
    return OgnlTokenTypes.AND_AND;
  }
case 69:
break;
case 37:
{
return OgnlTokenTypes.OR_KEYWORD;
}
case 70:
break;
case 4:
{
return OgnlTokenTypes.WHITE_SPACE;
}
case 71:
break;
case 7:
{
return OgnlTokenTypes.CHARACTER_LITERAL;
}
case 72:
break;
case 1:
{
return OgnlTokenTypes.BAD_CHARACTER;
}
case 73:
break;
case 36:
{
return OgnlTokenTypes.LT_KEYWORD;
}
case 74:
break;
case 32:
{
yybegin(YYINITIAL);
return OgnlTokenTypes.RBRACE;
}
case 75:
break;
case 58:
{
return OgnlTokenTypes.XOR_KEYWORD;
}
case 76:
break;
case 44:
{
return OgnlTokenTypes.SHIFT_LEFT;
}
case 77:
break;
case 54:
{
return OgnlTokenTypes.NOT_KEYWORD;
}
case 78:
break;
case 9:
{
return OgnlTokenTypes.MODULO;
}
case 79:
break;
case 15:
{
return OgnlTokenTypes.RBRACKET;
}
case 80:
break;
case 17:
{
return OgnlTokenTypes.EQ;
}
case 81:
break;
case 11:
{
return OgnlTokenTypes.EXPRESSION_END;
}
case 82:
break;
case 55:
{
return OgnlTokenTypes.NEQ_KEYWORD;
}
case 83:
break;
case 30:
{
return OgnlTokenTypes.XOR;
}
case 84:
break;
case 49:
{
return OgnlTokenTypes.BIG_DECIMAL_LITERAL;
}
case 85:
break;
case 26:
{
return OgnlTokenTypes.MULTIPLY;
}
case 86:
break;
case 12:
{
return OgnlTokenTypes.LPARENTH;
}
case 87:
break;
case 57:
{
return OgnlTokenTypes.BOR_KEYWORD;
}
case 88:
break;
case 52:
{
return OgnlTokenTypes.LT_EQ_KEYWORD;
}
case 89:
break;
case 3:
{
return OgnlTokenTypes.INTEGER_LITERAL;
}
case 90:
break;
case 6:
{
return OgnlTokenTypes.PLUS;
}
case 91:
break;
case 16:
{
return OgnlTokenTypes.NEGATE;
}
case 92:
break;
case 5:
{
return OgnlTokenTypes.DOT;
}
case 93:
break;
case 48:
{
return OgnlTokenTypes.OR_OR;
}
case 94:
break;
case 66:
{
return OgnlTokenTypes.NOT_IN_KEYWORD;
}
case 95:
break;
case 20:
{
return OgnlTokenTypes.COMMA;
}
case 96:
break;
case 56:
{
return OgnlTokenTypes.NEW_KEYWORD;
}
case 97:
break;
case 53:
{
return OgnlTokenTypes.AND_KEYWORD;
}
case 98:
break;
case 28:
{
return OgnlTokenTypes.AND;
}
case 99:
break;
case 31:
{
return OgnlTokenTypes.NOT;
}
case 100:
break;
case 38:
{
return OgnlTokenTypes.EQ_KEYWORD;
}
case 101:
break;
case 35:
{
return OgnlTokenTypes.EXPRESSION_START;
}
case 102:
break;
case 25:
{
return OgnlTokenTypes.DIVISION;
}
case 103:
break;
case 22:
{
return OgnlTokenTypes.COLON;
}
case 104:
break;
case 46:
{
return OgnlTokenTypes.SHIFT_RIGHT;
}
case 105:
break;
case 19:
{
return OgnlTokenTypes.GREATER;
}
case 106:
break;
case 67:
{
return OgnlTokenTypes.INSTANCEOF_KEYWORD;
}
case 107:
break;
case 2:
{
return OgnlTokenTypes.IDENTIFIER;
}
case 108:
break;
case 40:
{
return OgnlTokenTypes.IN_KEYWORD;
}
case 109:
break;
case 8:
{
return OgnlTokenTypes.STRING_LITERAL;
}
case 110:
break;
case 14:
{
return OgnlTokenTypes.LBRACKET;
}
case 111:
break;
case 51:
{
return OgnlTokenTypes.SHIFT_RIGHT_KEYWORD;
}
case 112:
break;
case 24:
{
return OgnlTokenTypes.AT;
}
case 113:
break;
case 59:
{
return OgnlTokenTypes.GT_EQ_KEYWORD;
}
case 114:
break;
case 50:
{
return OgnlTokenTypes.SHIFT_LEFT_KEYWORD;
}
case 115:
break;
case 29:
{
return OgnlTokenTypes.OR;
}
case 116:
break;
case 60:
{
return OgnlTokenTypes.SHIFT_RIGHT_LOGICAL;
}
case 117:
break;
case 43:
{
return OgnlTokenTypes.LESS_EQUAL;
}
case 118:
break;
case 62:
{
return OgnlTokenTypes.NULL_KEYWORD;
}
case 119:
break;
case 27:
{
return OgnlTokenTypes.MINUS;
}
case 120:
break;
case 18:
{
return OgnlTokenTypes.LESS;
}
case 121:
break;
case 63:
{
return OgnlTokenTypes.BAND_KEYWORD;
}
case 122:
break;
case 45:
{
return OgnlTokenTypes.GREATER_EQUAL;
}
case 123:
break;
case 21:
{
return OgnlTokenTypes.QUESTION;
}
case 124:
break;
case 34:
{
return OgnlTokenTypes.DOUBLE_LITERAL;
}
case 125:
break;
case 64:
{
return OgnlTokenTypes.TRUE_KEYWORD;
}
case 126:
break;
case 23:
{
return OgnlTokenTypes.HASH;
}
case 127:
break;
case 13:
{
return OgnlTokenTypes.RPARENTH;
}
case 128:
break;
case 61:
{
return OgnlTokenTypes.SHIFT_RIGHT_LOGICAL_KEYWORD;
}
case 129:
break;
case 10:
{
yybegin(SEQUENCE_EXPRESSION);
return OgnlTokenTypes.LBRACE;
}
case 130:
break;
case 42:
{
return OgnlTokenTypes.EQUAL;
}
case 131:
break;
case 39:
{
return OgnlTokenTypes.GT_KEYWORD;
}
case 132:
break;
case 33:
{
return OgnlTokenTypes.BIG_INTEGER_LITERAL;
}
case 133:
break;
case 41:
{
return OgnlTokenTypes.NOT_EQUAL;
}
case 134:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
