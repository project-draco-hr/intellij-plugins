{
  String messagePrefix="[" + module.getName() + "] ";
  ReportingBuilder builder=new ReportingBuilder(compileContext,VfsUtil.pathToUrl(bndFile.getPath()),module);
  builder.setPedantic(false);
  builder.setProperties(bndFile);
  builder.mergeProperties(additionalProperties,true);
  builder.setClasspath(classpath);
  builder.begin();
  String manifest=builder.getProperty(ReportingBuilder.MANIFEST);
  if (manifest != null) {
    File manifestFile=builder.getFile(manifest);
    if (manifestFile != null && manifestFile.exists() && manifestFile.canRead()) {
      Properties props=new Properties();
      FileInputStream fileInputStream=new FileInputStream(manifestFile);
      try {
        props.load(fileInputStream);
        final String value=props.getProperty(Attributes.Name.MANIFEST_VERSION.toString());
        if (value == null || value.length() == 0 || value.trim().length() == 0) {
          compileContext.addMessage(CompilerMessageCategory.WARNING,messagePrefix + "Your manifest does not contain a Manifest-Version entry. This will produce an empty manifest in the resulting bundle.",VfsUtil.pathToUrl(manifestFile.getAbsolutePath()),0,0);
        }
      }
 catch (      Exception ex) {
        compileContext.addMessage(CompilerMessageCategory.INFORMATION,messagePrefix + "There was a problem reading your manifest.",VfsUtil.pathToUrl(manifestFile.getAbsolutePath()),0,0);
      }
 finally {
        fileInputStream.close();
      }
    }
  }
  Jar jar=builder.build();
  jar.setName(output.getName());
  jar.write(output);
  builder.close();
  return true;
}
