{
  CompilerConfiguration config=(configuration != null) ? configuration.getCompilerConfiguration() : null;
  List targets=new ArrayList(sources.size());
  units.clear();
  for (int i=0, size=sources.size(); i < size; i++) {
    Source s=(Source)sources.get(i);
    if (s != null && s.isCompiled()) {
      units.add(s.getCompilationUnit());
    }
 else {
      units.add(null);
    }
  }
  while (nextSource(sources,units,igraph,dgraph,targets,symbolTable,configuration) > 0) {
    int postprocessCount=0;
    for (int i=0, size=targets.size(); i < size; i++) {
      Source s=(Source)targets.get(i);
      if (s == null)       continue;
      int w=getCompilationUnitWorkflow(s);
      if ((w & preprocess) == 0) {
        preprocess(sources,compilers,i,i + 1,symbolTable.getSuppressWarningsIncremental());
      }
 else       if ((w & parse1) == 0) {
        parse1(sources,units,igraph,dgraph,compilers,symbolTable,i,i + 1);
        resolveInheritance(sources,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,i,i + 1);
        addGeneratedSources(sources,igraph,dgraph,resources,symbolTable,configuration,i,i + 1);
      }
 else       if ((w & parse2) == 0) {
        parse2(sources,compilers,symbolTable,i,i + 1);
        addGeneratedSources(sources,igraph,dgraph,resources,symbolTable,configuration,i,i + 1);
      }
 else       if ((w & analyze1) == 0) {
        analyze(sources,compilers,symbolTable,i,i + 1,1);
        resolveNamespace(sources,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,i,i + 1);
        addGeneratedSources(sources,igraph,dgraph,resources,symbolTable,configuration,i,i + 1);
      }
 else       if ((w & analyze2) == 0) {
        analyze(sources,compilers,symbolTable,i,i + 1,2);
        resolveType(sources,units,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,i,i + 1);
        if (config.strict()) {
          resolveImportStatements(sources,units,sourcePath,swcContext,i,i + 1);
        }
{
          resolveExpression(sources,units,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,configuration,i,i + 1);
        }
      }
 else       if ((w & analyze3) == 0) {
        analyze(sources,compilers,symbolTable,i,i + 1,3);
      }
 else       if ((w & analyze4) == 0) {
        analyze(sources,compilers,symbolTable,i,i + 1,4);
      }
 else       if ((w & generate) == 0) {
        generate(sources,units,compilers,symbolTable,i,i + 1);
        addGeneratedSources(sources,igraph,dgraph,resources,symbolTable,configuration,i,i + 1);
        resolveExpression(sources,units,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,configuration,i,i + 1);
        markDone(sources,units,i,i + 1);
      }
      if (tooManyErrors() || forcedToStop())       break;
      if ((w & generate) != 0) {
        postprocess(sources,units,compilers,symbolTable,i,i + 1);
        resolveExpression(sources,units,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,configuration,i,i + 1);
        postprocessCount++;
      }
      if (tooManyErrors() || forcedToStop())       break;
    }
    if ((postprocessCount == targets.size() && sources.size() == targets.size()) || tooManyErrors() || forcedToStop()) {
      break;
    }
  }
  adjustQNames(units,igraph,symbolTable);
}
