{
  Set qNames=new HashSet();
  for (int i=start; i < end; i++) {
    Source s=(Source)sources.get(i);
    CompilationUnit u=(s != null) ? s.getCompilationUnit() : (CompilationUnit)units.get(i);
    if ((u.getWorkflow() & resolveType) != 0 || u.types.size() == 0) {
      continue;
    }
    qNames.clear();
    String head=u.getSource().getName();
    String name=u.getSource().getNameForReporting();
    for (Iterator k=u.types.iterator(); k.hasNext(); ) {
      Object unresolved=k.next();
      if (unresolved instanceof MultiName) {
        MultiName mName=(MultiName)unresolved;
        QName qName=resolveMultiName(name,mName,sources,sourceList,sourcePath,resources,swcContext,symbolTable);
        if (qName != null) {
          qNames.add(qName);
          u.typeHistory.put(mName,qName);
          Source tailSource=symbolTable.findSourceByQName(qName);
          String tail=tailSource.getName();
          addVertexToGraphs(tailSource,tailSource.getCompilationUnit(),igraph,dgraph);
          addEdgeToGraphs(null,dgraph,head,tail);
        }
        k.remove();
      }
    }
    if (qNames.size() > 0) {
      u.types.addAll(qNames);
    }
  }
  for (int i=start; i < end; i++) {
    Source s=(Source)sources.get(i);
    CompilationUnit u=(s != null) ? s.getCompilationUnit() : (CompilationUnit)units.get(i);
    if ((u.getWorkflow() & resolveType) != 0) {
      continue;
    }
 else {
      u.setWorkflow(resolveType);
      if (u.namespaces.size() == 0) {
        continue;
      }
    }
    qNames.clear();
    String head=u.getSource().getName();
    String name=u.getSource().getNameForReporting();
    for (Iterator k=u.namespaces.iterator(); k.hasNext(); ) {
      Object unresolved=k.next();
      if (unresolved instanceof MultiName) {
        MultiName mName=(MultiName)unresolved;
        QName qName=resolveMultiName(name,mName,sources,sourceList,sourcePath,resources,swcContext,symbolTable);
        if (qName != null) {
          qNames.add(qName);
          u.namespaceHistory.put(mName,qName);
          Source tailSource=symbolTable.findSourceByQName(qName);
          String tail=tailSource.getName();
          addVertexToGraphs(tailSource,tailSource.getCompilationUnit(),igraph,dgraph);
          addEdgeToGraphs(null,dgraph,head,tail);
        }
        k.remove();
      }
    }
    if (qNames.size() > 0) {
      u.namespaces.addAll(qNames);
    }
  }
}
