{
  final Converter converter=value.getConverter();
  if (converter instanceof ExtendableClassConverter) {
    return false;
  }
  if (converter instanceof ParamNameConverter) {
    final Result result=DomUtil.getParentOfType(value,Result.class,false);
    if (result != null) {
      final ResultType resultType=result.getEffectiveResultType();
      if (resultType == null) {
        return false;
      }
      final String resultTypeValue=resultType.getName().getStringValue();
      if (resultTypeValue != null && ResultTypeResolver.isChainOrRedirectType(resultTypeValue)) {
        return false;
      }
    }
  }
  final String stringValue=value.getStringValue();
  if (converter instanceof ActionMethodConverter && ConverterUtil.hasWildcardReference(stringValue)) {
    return false;
  }
  if (converter instanceof StrutsPathReferenceConverter) {
    if (stringValue == null) {
      return false;
    }
    if (!((ParamsElement)value).getParams().isEmpty()) {
      return false;
    }
    final ResultType resultType=((HasResultType)value).getEffectiveResultType();
    if (resultType == null) {
      return false;
    }
    if (!ResultTypeResolver.hasResultTypeContributor(resultType.getName().getStringValue())) {
      return false;
    }
    if (ConverterUtil.hasWildcardReference(stringValue)) {
      final Action action=DomUtil.getParentOfType(value,Action.class,true);
      return action != null && !action.isWildcardMapping();
    }
    if (StringUtil.startsWith(stringValue,"${")) {
      return false;
    }
    if (URLUtil.containsScheme(stringValue)) {
      return false;
    }
  }
  return true;
}
