{
  ui.getOptions().setMinimizeActionEnabled(false);
  boolean readyToRun=myKarmaServer.isReady() && myKarmaServer.hasCapturedBrowsers();
  final Content consoleContent=ui.createContent(ExecutionConsole.CONSOLE_CONTENT_ID,getComponent(),"Test Run",AllIcons.Debugger.Console,getPreferredFocusableComponent());
  consoleContent.setCloseable(false);
  ui.addContent(consoleContent,1,PlaceInGrid.bottom,false);
  if (readyToRun) {
    ui.selectAndFocus(consoleContent,false,false);
  }
 else {
    final TestTreeRenderer testTreeRenderer=ObjectUtils.tryCast(getResultsViewer().getTreeView().getCellRenderer(),TestTreeRenderer.class);
    if (testTreeRenderer != null) {
      testTreeRenderer.setAdditionalRootFormatter(new SMRootTestProxyFormatter(){
        @Override public void format(        @NotNull SMTestProxy.SMRootTestProxy testProxy,        @NotNull TestTreeRenderer renderer){
          if (testProxy.isLeaf()) {
            renderer.clear();
            renderer.append("Waiting for browser capturing...");
          }
        }
      }
);
    }
    myKarmaServer.doWhenReadyWithCapturedBrowser(new Runnable(){
      @Override public void run(){
        ui.selectAndFocus(consoleContent,false,false);
        if (testTreeRenderer != null) {
          testTreeRenderer.removeAdditionalRootFormatter();
        }
      }
    }
);
  }
  KarmaServerLogComponent logComponent=new KarmaServerLogComponent(getProperties().getProject(),myKarmaServer);
  logComponent.installOn(ui);
  return consoleContent;
}
