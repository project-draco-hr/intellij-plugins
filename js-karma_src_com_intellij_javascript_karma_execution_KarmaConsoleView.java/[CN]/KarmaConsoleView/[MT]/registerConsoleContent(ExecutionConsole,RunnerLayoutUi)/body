{
  ui.getOptions().setMinimizeActionEnabled(false);
  boolean readyToRun=myKarmaServer.isReady() && myKarmaServer.hasCapturedBrowsers();
  final Content consoleContent=ui.createContent(ExecutionConsole.CONSOLE_CONTENT_ID,getComponent(),"Test Run",AllIcons.Debugger.Console,getPreferredFocusableComponent());
  ui.addContent(consoleContent,1,PlaceInGrid.bottom,false);
  consoleContent.setCloseable(false);
  final KarmaRootTestProxyFormatter rootFormatter=new KarmaRootTestProxyFormatter(this);
  if (readyToRun) {
    ui.selectAndFocus(consoleContent,false,false);
  }
 else {
    myKarmaServer.addListener(new KarmaServerAdapter(){
      @Override public void onReady(      int webServerPort,      int runnerPort){
        ui.selectAndFocus(consoleContent,false,false);
      }
    }
);
    final Alarm alarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD,consoleContent);
    alarm.addRequest(new Runnable(){
      @Override public void run(){
        if (myKarmaServer.isReady() && !myKarmaServer.hasCapturedBrowsers()) {
          print("To capture a browser open ",ConsoleViewContentType.SYSTEM_OUTPUT);
          String url="http://localhost:" + myKarmaServer.getWebServerPort();
          printHyperlink(url + "\n",new OpenUrlHyperlinkInfo(url));
        }
      }
    }
,1000,ModalityState.any());
    myKarmaServer.doWhenReadyWithCapturedBrowser(new Runnable(){
      @Override public void run(){
        alarm.cancelAllRequests();
      }
    }
);
    myKarmaServer.addListener(new KarmaServerAdapter(){
      @Override public void onTerminated(      int exitCode){
        alarm.cancelAllRequests();
        rootFormatter.uninstall();
        print("Karma server finished with exited code " + exitCode + "\n",ConsoleViewContentType.SYSTEM_OUTPUT);
      }
    }
);
  }
  return consoleContent;
}
