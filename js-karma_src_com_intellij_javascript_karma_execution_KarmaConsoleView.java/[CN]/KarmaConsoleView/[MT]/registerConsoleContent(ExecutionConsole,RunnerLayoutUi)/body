{
  ui.getOptions().setMinimizeActionEnabled(false);
  boolean readyToRun=myServer.isReady() && myServer.hasCapturedBrowsers();
  final Content consoleContent=ui.createContent(ExecutionConsole.CONSOLE_CONTENT_ID,getComponent(),"Test Run",AllIcons.Debugger.Console,getPreferredFocusableComponent());
  ui.addContent(consoleContent,1,PlaceInGrid.bottom,false);
  consoleContent.setCloseable(false);
  final KarmaRootTestProxyFormatter rootFormatter=new KarmaRootTestProxyFormatter(this,myServer,myExecutionSession.isDebug());
  if (readyToRun) {
    ui.selectAndFocus(consoleContent,false,false);
  }
 else {
    myServer.doWhenReady(new KarmaServerReadyListener(){
      @Override public void onReady(      int webServerPort){
        ui.selectAndFocus(consoleContent,false,false);
      }
    }
);
    final Alarm alarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD,consoleContent);
    alarm.addRequest(new Runnable(){
      @Override public void run(){
        if (myServer.isReady() && !myServer.hasCapturedBrowsers()) {
          print("To capture a browser open ",ConsoleViewContentType.SYSTEM_OUTPUT);
          String url="http://localhost:" + myServer.getServerPort();
          printHyperlink(url + "\n",new OpenUrlHyperlinkInfo(url));
        }
      }
    }
,1000,ModalityState.any());
    myServer.doWhenReadyWithCapturedBrowser(new Runnable(){
      @Override public void run(){
        alarm.cancelAllRequests();
      }
    }
);
    myServer.doWhenTerminated(new KarmaServerTerminatedListener(){
      @Override public void onTerminated(      int exitCode){
        alarm.cancelAllRequests();
        rootFormatter.onServerProcessTerminated();
        print("Karma server finished with exited code " + exitCode + "\n",ConsoleViewContentType.SYSTEM_OUTPUT);
      }
    }
);
  }
  myExecutionSession.getProcessHandler().addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      rootFormatter.onTestRunProcessTerminated();
    }
  }
);
  return consoleContent;
}
