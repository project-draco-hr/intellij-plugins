{
  for (  ParsedHeaderClause clause : clauses) {
    if (!mv.equals("2")) {
      if (!clause.m_dirs.isEmpty()) {
        throw new BundleException("R3 imports cannot contain directives.");
      }
    }
    clause.m_dirs.put(Constants.RESOLUTION_DIRECTIVE,FelixConstants.RESOLUTION_DYNAMIC);
    Object v=clause.m_attrs.get(Constants.VERSION_ATTRIBUTE);
    Object sv=clause.m_attrs.get(Constants.PACKAGE_SPECIFICATION_VERSION);
    if ((v != null) && (sv != null)) {
      if (!((String)v).trim().equals(((String)sv).trim())) {
        throw new IllegalArgumentException("Both version and specification-version are specified, but they are not equal.");
      }
    }
    if ((v != null) || (sv != null)) {
      clause.m_attrs.remove(Constants.PACKAGE_SPECIFICATION_VERSION);
      v=(v == null) ? sv : v;
      clause.m_attrs.put(Constants.VERSION_ATTRIBUTE,VersionRange.parse(v.toString()));
    }
    v=clause.m_attrs.get(Constants.BUNDLE_VERSION_ATTRIBUTE);
    if (v != null) {
      clause.m_attrs.put(Constants.BUNDLE_VERSION_ATTRIBUTE,VersionRange.parse(v.toString()));
    }
    for (    String pkgName : clause.m_paths) {
      if (pkgName.startsWith("java.")) {
        throw new BundleException("Dynamically importing java.* packages not allowed: " + pkgName);
      }
 else       if (!pkgName.equals("*") && pkgName.endsWith("*") && !pkgName.endsWith(".*")) {
        throw new BundleException("Partial package name wild carding is not allowed: " + pkgName);
      }
    }
  }
  return clauses;
}
