{
  for (  ParsedHeaderClause clause : clauses) {
    for (    String pkgName : clause.m_paths) {
      if (pkgName.startsWith("java.")) {
        throw new BundleException("Exporting java.* packages not allowed: " + pkgName);
      }
 else       if (pkgName.equals(".")) {
        throw new BundleException("Exporing '.' is invalid.");
      }
 else       if (pkgName.length() == 0) {
        throw new BundleException("Exported package names cannot be zero length.");
      }
    }
    Object v=clause.m_attrs.get(Constants.VERSION_ATTRIBUTE);
    Object sv=clause.m_attrs.get(Constants.PACKAGE_SPECIFICATION_VERSION);
    if ((v != null) && (sv != null)) {
      if (!((String)v).trim().equals(((String)sv).trim())) {
        throw new IllegalArgumentException("Both version and specification-version are specified, but they are not equal.");
      }
    }
    if ((v == null) && (sv == null)) {
      v=Version.emptyVersion;
    }
    if ((v != null) || (sv != null)) {
      clause.m_attrs.remove(Constants.PACKAGE_SPECIFICATION_VERSION);
      v=(v == null) ? sv : v;
      clause.m_attrs.put(Constants.VERSION_ATTRIBUTE,Version.parseVersion(v.toString()));
    }
    if (mv.equals("2")) {
      if (clause.m_attrs.containsKey(Constants.BUNDLE_VERSION_ATTRIBUTE) || clause.m_attrs.containsKey(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE)) {
        throw new BundleException("Exports must not specify bundle symbolic name or bundle version.");
      }
      clause.m_attrs.put(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE,bsn);
      clause.m_attrs.put(Constants.BUNDLE_VERSION_ATTRIBUTE,bv);
    }
 else     if (!mv.equals("2")) {
      if (!clause.m_dirs.isEmpty()) {
        throw new BundleException("R3 exports cannot contain directives.");
      }
      if (!clause.m_attrs.isEmpty()) {
        Object pkgVersion=clause.m_attrs.get(BundleCapabilityImpl.VERSION_ATTR);
        pkgVersion=(pkgVersion == null) ? Version.emptyVersion : pkgVersion;
        for (        Entry<String,Object> entry : clause.m_attrs.entrySet()) {
          if (!entry.getKey().equals(BundleCapabilityImpl.VERSION_ATTR)) {
            logger.log(Logger.LOG_WARNING,"Unknown R3 export attribute: " + entry.getKey());
          }
        }
        clause.m_attrs.clear();
        clause.m_attrs.put(BundleCapabilityImpl.VERSION_ATTR,pkgVersion);
      }
    }
  }
  return clauses;
}
