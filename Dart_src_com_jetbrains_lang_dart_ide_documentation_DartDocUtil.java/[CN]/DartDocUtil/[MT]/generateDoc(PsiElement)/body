{
  if (!(element instanceof DartComponent) && !(element.getParent() instanceof DartComponent)) {
    return null;
  }
  final DartComponent namedComponent=(DartComponent)(element instanceof DartComponent ? element : element.getParent());
  final String signatureHtml;
{
    final StringBuilder builder=new StringBuilder();
    appendSignature(namedComponent,builder);
    signatureHtml=builder.toString();
  }
  final String containingLibraryName;
  final PsiFile file=element.getContainingFile();
  if (file != null) {
    containingLibraryName=DartResolveUtil.getLibraryName(file);
  }
 else {
    containingLibraryName=null;
  }
  final String containingClassDescription;
  final DartClass dartClass=PsiTreeUtil.getParentOfType(namedComponent,DartClass.class);
  if (dartClass != null) {
    final StringBuilder builder=new StringBuilder();
    builder.append(dartClass.getName());
    appendTypeParams(builder,dartClass.getTypeParameters());
    containingClassDescription=builder.toString();
  }
 else {
    containingClassDescription=null;
  }
  final String docText=getDocumentationText(namedComponent);
  return generateDoc(signatureHtml,true,docText,containingLibraryName,containingClassDescription,null,null);
}
