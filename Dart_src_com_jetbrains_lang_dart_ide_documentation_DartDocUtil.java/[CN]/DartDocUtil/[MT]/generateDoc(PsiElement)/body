{
  if (!(element instanceof DartComponent) && !(element.getParent() instanceof DartComponent)) {
    return null;
  }
  final DartComponent namedComponent=(DartComponent)(element instanceof DartComponent ? element : element.getParent());
  final StringBuilder builder=new StringBuilder();
  appendLibraryName(builder,element);
  builder.append("<code>");
  for (  DartMetadata metadata : namedComponent.getMetadataList()) {
    builder.append(StringUtil.escapeXml(metadata.getText())).append("<br/>");
  }
  if (namedComponent instanceof DartClass) {
    appendClassSignature(builder,(DartClass)namedComponent);
  }
 else   if (namedComponent instanceof DartEnum) {
    appendEnumSignature(builder,(DartEnum)namedComponent);
  }
 else   if (namedComponent instanceof DartFunctionDeclarationWithBodyOrNative) {
    appendFunctionSignature(builder,namedComponent,((DartFunctionDeclarationWithBodyOrNative)namedComponent).getReturnType());
  }
 else   if (namedComponent instanceof DartFunctionTypeAlias) {
    builder.append("typedef ");
    appendFunctionSignature(builder,namedComponent,((DartFunctionTypeAlias)namedComponent).getReturnType());
  }
 else   if (namedComponent.isConstructor()) {
    appendDeclaringClass(builder,namedComponent);
    appendConstructorSignature(builder,namedComponent,PsiTreeUtil.getParentOfType(namedComponent,DartClass.class));
  }
 else   if (namedComponent instanceof DartMethodDeclaration) {
    appendDeclaringClass(builder,namedComponent);
    appendFunctionSignature(builder,namedComponent,((DartMethodDeclaration)namedComponent).getReturnType());
  }
 else   if (namedComponent instanceof DartVarAccessDeclaration) {
    appendDeclaringClass(builder,namedComponent);
    appendVariableSignature(builder,namedComponent,((DartVarAccessDeclaration)namedComponent).getType());
  }
 else   if (namedComponent instanceof DartGetterDeclaration) {
    appendDeclaringClass(builder,namedComponent);
    builder.append("get ");
    appendFunctionSignature(builder,namedComponent,((DartGetterDeclaration)namedComponent).getReturnType());
  }
 else   if (namedComponent instanceof DartSetterDeclaration) {
    appendDeclaringClass(builder,namedComponent);
    builder.append("set ");
    appendFunctionSignature(builder,namedComponent,((DartSetterDeclaration)namedComponent).getReturnType());
  }
  builder.append("</code>");
  final String docText=getDocumentationText(namedComponent);
  if (docText != null) {
    builder.append("<br/><br/>");
    final MarkdownProcessor processor=new MarkdownProcessor();
    builder.append(processor.markdown(docText));
  }
  return builder.toString();
}
