{
  cleanupHolderCache();
  List<ManifestHolder> result=new ArrayList<ManifestHolder>();
  if (isLibraryDisposed(library) || project.isDisposed()) {
    return result;
  }
  VirtualFile[] classRoots=library.getFiles(OrderRootType.CLASSES);
  for (  VirtualFile classRoot : classRoots) {
    String jarFileUrl=classRoot.getUrl();
    ManifestHolder cachedHolder=myHolderCache.get(jarFileUrl);
    if (cachedHolder != null) {
      result.add(cachedHolder);
      continue;
    }
    VirtualFile classDir;
    if (classRoot.isDirectory()) {
      classDir=classRoot;
    }
 else {
      classDir=JarFileSystem.getInstance().getJarRootForLocalFile(classRoot);
    }
    if (classDir != null) {
      final VirtualFile manifestFile=classDir.findFileByRelativePath("META-INF/MANIFEST.MF");
      if (manifestFile != null) {
        LibraryManifestHolderImpl newHolder=new LibraryManifestHolderImpl(library,project,jarFileUrl);
        myHolderCache.put(jarFileUrl,newHolder);
        result.add(newHolder);
      }
    }
  }
  return result;
}
