{
  final MemberChooser<JSNamedElementNode> chooser=new MemberChooser<JSNamedElementNode>(candidates.toArray(new JSNamedElementNode[candidates.size()]),allowEmptySelection,allowMultipleSelection,project,false){
    @Override protected void init(){
      super.init();
      if (!allowEmptySelection) {
        myTree.addTreeSelectionListener(new TreeSelectionListener(){
          @Override public void valueChanged(          final TreeSelectionEvent e){
            setOKActionEnabled(myTree.getSelectionCount() > 0);
          }
        }
);
      }
 else {
        setOKActionEnabled(true);
      }
    }
    @Override protected JComponent createCenterPanel(){
      final JComponent superComponent=super.createCenterPanel();
      final JComponent optionsComponent=getOptionsComponent(jsClass,candidates);
      if (optionsComponent == null) {
        return superComponent;
      }
 else {
        final JPanel panel=new JPanel(new BorderLayout());
        panel.add(superComponent,BorderLayout.CENTER);
        panel.add(optionsComponent,BorderLayout.SOUTH);
        return panel;
      }
    }
  }
;
  chooser.setTitle(title);
  chooser.setCopyJavadocVisible(false);
  return chooser;
}
