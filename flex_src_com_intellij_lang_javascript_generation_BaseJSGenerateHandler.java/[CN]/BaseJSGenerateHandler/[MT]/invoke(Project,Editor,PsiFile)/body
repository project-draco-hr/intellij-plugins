{
  if (!FileModificationService.getInstance().prepareFileForWrite(file))   return;
  final JSClass jsClass=findClass(file,editor);
  if (jsClass == null)   return;
  final Collection<JSNamedElementNode> selectedElements;
  if (collectCandidatesAndShowDialog()) {
    final Collection<JSNamedElementNode> candidates=new ArrayList<JSNamedElementNode>();
    collectCandidates(jsClass,candidates);
    if (candidates.isEmpty()) {
      if (canHaveEmptySelectedElements()) {
        selectedElements=Collections.emptyList();
      }
 else {
        if (!ApplicationManager.getApplication().isHeadlessEnvironment()) {
          HintManager.getInstance().showErrorHint(editor,getNoCandidatesMessage());
        }
        return;
      }
    }
 else {
      final boolean unitTestMode=ApplicationManager.getApplication().isUnitTestMode();
      if (unitTestMode) {
        Iterator<JSNamedElementNode> i=candidates.iterator();
        while (i.hasNext()) {
          final JSNamedElementNode next=i.next();
          final PsiElement psiElement=((JSNamedElementNode)next.getParentNodeDelegate()).getPsiElement();
          if (psiElement instanceof JSClass && JSCommonTypeNames.OBJECT_CLASS_NAME.equals(((JSClass)psiElement).getQualifiedName())) {
            i.remove();
          }
        }
      }
      if (mySkipMemberChooserDialog || unitTestMode) {
        selectedElements=candidates;
      }
 else {
        final MemberChooser<JSNamedElementNode> chooser=createMemberChooserDialog(project,jsClass,candidates,canHaveEmptySelectedElements(),true,JSBundle.message(getTitleKey()));
        chooser.show();
        if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)         return;
        final Collection<JSNamedElementNode> selected=chooser.getSelectedElements();
        if (selected == null) {
          selectedElements=Collections.emptyList();
        }
 else {
          selectedElements=selected;
        }
      }
    }
  }
 else {
    selectedElements=Collections.emptyList();
  }
  final String featureId=getProductivityFeatureId();
  if (featureId != null)   FeatureUsageTracker.getInstance().triggerFeatureUsed(featureId);
  final BaseCreateMethodsFix createMethodsFix=createFix(jsClass);
  doInvoke(project,editor,file,selectedElements,createMethodsFix);
}
