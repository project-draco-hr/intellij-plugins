{
  JSReferenceExpression methodExpression=CastUtils.tryCast(callExpression.getMethodExpression(),JSReferenceExpression.class);
  JSArgumentList argumentList=callExpression.getArgumentList();
  if (methodExpression != null && argumentList != null) {
    String methodName=methodExpression.getReferencedName();
    JSExpression[] arguments=ObjectUtils.notNull(argumentList.getArguments(),JSExpression.EMPTY_ARRAY);
    if (arguments.length >= 1) {
      String name=JsPsiUtils.extractStringValue(arguments[0]);
      if (name != null) {
        if ("module".equals(methodName) && arguments.length == 1) {
          myCurrentModuleStructure=QUnitModuleStructure.newRegularModule(name,callExpression);
          myFileStructure.addModuleStructure(myCurrentModuleStructure);
        }
 else         if ("test".equals(methodName) && arguments.length == 2) {
          JSFunctionExpression body=JsPsiUtils.extractFunctionExpression(arguments[1]);
          if (body != null) {
            QUnitTestMethodStructure testMethodStructure=new QUnitTestMethodStructure(name,callExpression,body);
            myCurrentModuleStructure.addTestMethodStructure(testMethodStructure);
          }
        }
      }
    }
  }
}
