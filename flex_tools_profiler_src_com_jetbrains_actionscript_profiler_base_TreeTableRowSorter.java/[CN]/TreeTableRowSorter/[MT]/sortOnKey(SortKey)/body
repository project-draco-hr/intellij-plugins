{
  if (key.getSortOrder() == SortOrder.UNSORTED) {
    return;
  }
  final int columnModelIndex=key.getColumn();
  TableColumnModel colModel=table.getColumnModel();
  int modelIndex=colModel.getColumn(columnModelIndex).getModelIndex();
  if (modelIndex < 0 || getComparator(modelIndex) == null) {
    return;
  }
  final Comparator<TreeNode> comparator=new ComparatorWrapper<>(getComparator(modelIndex),key.getSortOrder() == SortOrder.ASCENDING);
  final List<TreePath> paths=TreeUtil.collectExpandedPaths(table.getTree());
  if (JTreeUtil.isSorted(paths,comparator,table.getTableModel())) {
    return;
  }
  for (  TreePath path : paths) {
    Object node=path.getLastPathComponent();
    if (!(node instanceof DefaultMutableTreeNode)) {
      continue;
    }
    JTreeUtil.sortChildren((DefaultMutableTreeNode)node,comparator,table.getTableModel().getChildCount(node));
  }
  table.reload();
  TreeUtil.restoreExpandedPaths(table.getTree(),paths);
}
