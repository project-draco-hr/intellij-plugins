{
  allAvailableBundles.clear();
  final Set<SelectedBundle> bundles=new HashSet<SelectedBundle>();
  Module[] modules=ModuleManager.getInstance(project).getModules();
  for (  Module module : modules) {
    if (OsmorcFacet.hasOsmorcFacet(module)) {
      SelectedBundle selectedBundle=new SelectedBundle(module.getName(),null,SelectedBundle.BundleType.Module);
      bundles.add(selectedBundle);
    }
  }
  if (usedFramework != null) {
    FrameworkIntegrator integrator=FrameworkIntegratorRegistry.getInstance().findIntegratorByInstanceDefinition(usedFramework);
    if (integrator != null) {
      integrator.getFrameworkInstanceManager().collectLibraries(usedFramework,new JarFileLibraryCollector(){
        @Override protected void collectFrameworkJars(        @NotNull Collection<VirtualFile> jarFiles,        @NotNull FrameworkInstanceLibrarySourceFinder sourceFinder){
          for (          VirtualFile jarFile : jarFiles) {
            String url=jarFile.getUrl();
            url=BundleCompiler.convertJarUrlToFileUrl(url);
            url=BundleCompiler.fixFileURL(url);
            String bundleName=CachingBundleInfoProvider.getBundleSymbolicName(url);
            if (bundleName != null) {
              String bundleVersion=CachingBundleInfoProvider.getBundleVersions(url);
              SelectedBundle b=new SelectedBundle(bundleName + " - " + bundleVersion,url,SelectedBundle.BundleType.FrameworkBundle);
              bundles.add(b);
            }
          }
        }
      }
);
    }
    String[] urls=OrderEnumerator.orderEntries(project).withoutSdk().withoutModuleSourceEntries().satisfying(BundleCompiler.NOT_FRAMEWORK_LIBRARY_CONDITION).classes().getUrls();
    for (    String url : urls) {
      url=BundleCompiler.convertJarUrlToFileUrl(url);
      url=BundleCompiler.fixFileURL(url);
      String displayName=CachingBundleInfoProvider.getBundleSymbolicName(url);
      if (displayName != null) {
        SelectedBundle selectedBundle=new SelectedBundle(displayName,url,SelectedBundle.BundleType.StartLibrary);
        bundles.add(selectedBundle);
      }
    }
  }
  bundles.removeAll(hideBundles);
  allAvailableBundles.addAll(bundles);
  Collections.sort(allAvailableBundles,new TypeComparator());
}
