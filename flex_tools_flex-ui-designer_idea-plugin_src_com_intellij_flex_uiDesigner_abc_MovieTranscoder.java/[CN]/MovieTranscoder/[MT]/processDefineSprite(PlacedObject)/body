{
  buffer.position(placedObject.start);
  final int endPosition=(placedObject.start - 2) + placedObject.length;
  while (true) {
    final int tagOffset=buffer.position();
    final int tagCodeAndLength=buffer.getShort();
    final int type=tagCodeAndLength >> 6;
    int length=tagCodeAndLength & 0x3F;
    if (length == 63) {
      length=buffer.getInt();
    }
    final int position=buffer.position();
switch (type) {
case TagTypes.DoAction:
case TagTypes.DoInitAction:
      placedObject.prepareSparseWrite();
    if (placedObject.positions == null) {
      placedObject.positions=new TIntArrayList();
      placedObject.actualLength=placedObject.length;
    }
  placedObject.positions.add(tagOffset);
final int fullLength=computeFullLength(length);
placedObject.positions.add(tagOffset + fullLength);
placedObject.actualLength-=fullLength;
continue;
case TagTypes.PlaceObject:
case TagTypes.PlaceObject3:
throw new IOException("PlaceObject and PlaceObject3 are not supported");
case TagTypes.PlaceObject2:
processPlaceObject2(placedObject,length,position);
break;
}
final int newPosition=position + length;
if (newPosition < endPosition) {
buffer.position(newPosition);
}
 else {
break;
}
}
fileLength+=computeFullLength(placedObject.length) + placedObject.actualLength;
}
