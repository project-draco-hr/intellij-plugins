{
  final long start=System.currentTimeMillis();
  this.indicator=indicator;
  indicator.setText(FlexBundle.message("generating.flex.configs"));
  try {
    runGeneratorServer(MavenProjectsManager.getInstance(project),project);
    writeProjects();
  }
 catch (  IOException e) {
    showWarning(project);
    LOG.error(e);
  }
catch (  ExecutionException e) {
    showWarning(e.getMessage(),project);
  }
  if (process == null) {
    return;
  }
  while (process != null) {
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
      break;
    }
    if (indicator.isCanceled()) {
      LOG.warn("Generating flex configs canceled");
      process.destroy();
      break;
    }
  }
  final long duration=System.currentTimeMillis() - start;
  LOG.info("Generating flex configs took " + duration + " ms: "+ duration / 60000 + " min " + (duration % 60000) / 1000 + "sec");
}
