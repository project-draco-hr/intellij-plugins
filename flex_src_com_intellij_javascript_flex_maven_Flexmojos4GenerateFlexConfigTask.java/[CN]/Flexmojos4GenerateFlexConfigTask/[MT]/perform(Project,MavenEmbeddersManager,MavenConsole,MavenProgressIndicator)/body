{
  this.indicator=indicator;
  indicator.getIndicator().setIndeterminate(false);
  final MavenProjectsManager mavenProjectsManager=MavenProjectsManager.getInstance(project);
  if (generatorProcess == null) {
    try {
      runGeneratorServer(project,mavenProjectsManager);
    }
 catch (    IOException e) {
      showWarning(project);
      MavenLog.LOG.error(e);
    }
catch (    ExecutionException e) {
      showWarning(project);
    }
  }
  if (!pendingProjects.isEmpty()) {
    final MavenProject[] projects=pendingProjects.toArray(new MavenProject[pendingProjects.size()]);
    pendingProjects.clear();
    for (    MavenProject pendingProject : projects) {
      if (!generate(pendingProject)) {
        return;
      }
    }
  }
  while (true) {
    try {
      while (mem.get(0) != CLIENT_MUST_READ) {
        if (checkCanceled()) {
          return;
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
    }
  finally {
      mem.put(0,UNLOCKED);
    }
    indicator.setFraction(100 / projectsToImportCount--);
    if (projectsToImportCount <= 0) {
      break;
    }
  }
}
