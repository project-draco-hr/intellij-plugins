{
  if (mem == null) {
    mem=new ReadWriteMappedBufferWrapper(new File(System.getProperty("java.io.tmpdir"),"com.intellij.flex.maven.FlexMojos4FacetImporter"),0,8192).map();
  }
 else {
    mem.clear();
    mem.put(0,UNLOCKED);
  }
  final JavaParameters params=new JavaParameters();
  params.setJdk(JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk());
  final MavenGeneralSettings mavenGeneralSettings=mavenProjectsManager.getGeneralSettings();
  final ParametersList programParametersList=params.getProgramParametersList();
  programParametersList.add(getSettingsFilePath(mavenGeneralSettings.getEffectiveGlobalSettingsIoFile()));
  programParametersList.add(getSettingsFilePath(mavenGeneralSettings.getEffectiveUserSettingsIoFile()));
  programParametersList.add(mavenGeneralSettings.getEffectiveLocalRepository().getAbsolutePath());
  programParametersList.add(mavenGeneralSettings.isWorkOffline() ? "t" : "f");
  final Collection<String> explicitProfiles=mavenProjectsManager.getExplicitProfiles();
  programParametersList.add(String.valueOf(explicitProfiles.size()));
  for (  String explicitProfile : explicitProfiles) {
    programParametersList.add(explicitProfile);
  }
  params.getVMParametersList().addParametersString("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5011");
  params.getVMParametersList().add("-jar","/Users/develar/Documents/flexmojos-idea-configurator/out/artifacts/FlexConfigGeneratorServer/generator_server.jar");
  final GeneralCommandLine commandLine=CommandLineBuilder.createFromJavaParameters(params);
  commandLine.setRedirectErrorStream(true);
  indicator.checkCanceled();
  generatorProcess=commandLine.createProcess();
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      StringBuilder stringBuilder=null;
      final InputStreamReader reader=new InputStreamReader(generatorProcess.getInputStream());
      try {
        stringBuilder=StringBuilderSpinAllocator.alloc();
        char[] buf=new char[1024];
        int read;
        while ((read=reader.read(buf,0,buf.length)) >= 0) {
          stringBuilder.append(buf,0,read);
          if (indicator.isCanceled()) {
            generatorProcess.destroy();
          }
        }
        try {
          generatorProcess.waitFor();
        }
 catch (        InterruptedException ignored) {
        }
        int exitCode=generatorProcess.exitValue();
        final String result=stringBuilder.toString();
        if (exitCode != 0) {
          MavenLog.LOG.warn("Generating flex configs exited with exit code " + exitCode);
          final Matcher matcher=MAVEN_ERROR_PATTERN.matcher(result);
          stringBuilder.setLength(0);
          while (matcher.find()) {
            stringBuilder.append("<br>").append(matcher.group(1));
          }
          showWarning(stringBuilder.toString(),project);
        }
        MavenLog.LOG.info("Generating flex configs out:\n" + result);
      }
 catch (      IOException e) {
        generatorProcess.destroy();
        MavenLog.LOG.warn(stringBuilder.toString(),e);
      }
 finally {
        if (stringBuilder != null) {
          StringBuilderSpinAllocator.dispose(stringBuilder);
        }
        try {
          reader.close();
        }
 catch (        IOException ignored) {
        }
      }
    }
  }
);
}
