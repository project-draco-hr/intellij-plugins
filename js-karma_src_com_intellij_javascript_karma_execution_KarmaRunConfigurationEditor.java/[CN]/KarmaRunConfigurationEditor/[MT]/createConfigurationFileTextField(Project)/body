{
  TextFieldWithHistoryWithBrowseButton textFieldWithHistoryWithBrowseButton=new TextFieldWithHistoryWithBrowseButton();
  final TextFieldWithHistory textFieldWithHistory=textFieldWithHistoryWithBrowseButton.getChildComponent();
  textFieldWithHistory.addPopupMenuListener(new PopupMenuListener(){
    @Override public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
      List<VirtualFile> newFiles=listPossibleConfigFilesInProject(project);
      List<String> newFilePaths=ContainerUtil.map(newFiles,new Function<VirtualFile,String>(){
        @Override public String fun(        VirtualFile file){
          return FileUtil.toSystemDependentName(file.getPath());
        }
      }
);
      Collections.sort(newFilePaths);
      Set<String> allPaths=ContainerUtil.newLinkedHashSet();
      allPaths.addAll(textFieldWithHistory.getHistory());
      allPaths.addAll(newFilePaths);
      textFieldWithHistory.setHistory(ContainerUtil.newArrayList(allPaths));
      textFieldWithHistory.removePopupMenuListener(this);
    }
    @Override public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
    }
    @Override public void popupMenuCanceled(    PopupMenuEvent e){
    }
  }
);
  FileChooserDescriptor fileChooserDescriptor=FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor();
  fileChooserDescriptor.putUserData(PathChooserDialog.NATIVE_MAC_CHOOSER_SHOW_HIDDEN_FILES,Boolean.TRUE);
  textFieldWithHistoryWithBrowseButton.addBrowseFolderListener(project,new ComponentWithBrowseButton.BrowseFolderActionListener<TextFieldWithHistory>(KarmaBundle.message("runConfiguration.config_file.browse_dialog.title"),null,textFieldWithHistoryWithBrowseButton,project,fileChooserDescriptor,TextComponentAccessor.TEXT_FIELD_WITH_HISTORY_WHOLE_TEXT),true);
  FileChooserFactory.getInstance().installFileCompletion(textFieldWithHistory.getTextEditor(),fileChooserDescriptor,true,project);
  return textFieldWithHistoryWithBrowseButton;
}
