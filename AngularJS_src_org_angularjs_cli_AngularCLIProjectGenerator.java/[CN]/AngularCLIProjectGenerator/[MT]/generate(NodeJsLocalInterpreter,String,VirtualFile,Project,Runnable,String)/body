{
  final List<String> arguments=new ArrayList<>();
  arguments.add(node.getInterpreterSystemDependentPath());
  arguments.add(path + File.separator + "bin"+ File.separator+ "ng");
  ContainerUtil.addAll(arguments,args);
  final GeneralCommandLine commandLine=new GeneralCommandLine(arguments);
  commandLine.setWorkDirectory(baseDir.getPath());
  final KillableColoredProcessHandler handler=new KillableColoredProcessHandler(commandLine);
  TextConsoleBuilderImpl builder=new TextConsoleBuilderImpl(project);
  builder.setUsePredefinedMessageFilter(false);
  builder.addFilter(new AngularCLIFilter(project,baseDir.getPath()));
  final ConsoleView console=builder.getConsole();
  console.attachToProcess(handler);
  ConsoleProgress.install(console,handler);
  handler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      baseDir.refresh(false,true);
      baseDir.getChildren();
      handler.notifyTextAvailable("Done\n",ProcessOutputTypes.SYSTEM);
      if (callback != null)       ApplicationManager.getApplication().runReadAction(callback);
    }
  }
);
  final Executor defaultExecutor=DefaultRunExecutor.getRunExecutorInstance();
  final String title="Generating " + baseDir.getName();
  final RunnerLayoutUi ui=RunnerLayoutUi.Factory.getInstance(project).create(ID,title,title,project);
  final Content consoleContent=ui.createContent(ID,console.getComponent(),title,null,console.getPreferredFocusableComponent());
  ui.addContent(consoleContent);
  final RunContentDescriptor descriptor=new RunContentDescriptor(console,handler,console.getComponent(),title);
  ExecutionManager.getInstance(project).getContentManager().showRunContent(defaultExecutor,descriptor);
  handler.startNotify();
}
