{
  final Collection<Pair<JSClass,FlashDiagramRelationship>> result=new ArrayList<Pair<JSClass,FlashDiagramRelationship>>();
  final JSElementVisitor visitor=new JSElementVisitor(){
    String myVariableName;
    boolean myInNewExpression;
    boolean myInField;
    boolean myInParameter;
    @Override public void visitJSReferenceExpression(    final JSReferenceExpression node){
      if (myVariableName == null && !myInNewExpression && !myInParameter && isReturnTypeReference(node)) {
        return;
      }
      PsiElement resolved=node.resolve();
      if (myInNewExpression && resolved instanceof JSFunction) {
        if (((JSFunction)resolved).isConstructor()) {
          resolved=JSResolveUtil.findParent(resolved);
        }
      }
      if (resolved instanceof JSClass) {
        FlashDiagramRelationship relType;
        if (myInNewExpression) {
          if (node.getParent() instanceof JSGenericSignature) {
            relType=Factory.dependency(myVariableName);
          }
 else {
            relType=Factory.create();
          }
        }
 else         if (myInField && node.getParent() instanceof JSGenericSignature) {
          relType=Factory.oneToMany(myVariableName);
        }
 else         if (myInField) {
          relType=Factory.oneToOne(myVariableName);
        }
 else {
          relType=Factory.dependency(myVariableName);
        }
        result.add(Pair.create((JSClass)resolved,relType));
      }
      super.visitJSReferenceExpression(node);
    }
    @Override public void visitJSVariable(    final JSVariable node){
      if (node instanceof JSParameter) {
        myInParameter=true;
      }
 else {
        myVariableName=node.getName();
      }
      myInField=JSResolveUtil.findParent(node) instanceof JSClass;
      try {
        super.visitJSVariable(node);
      }
  finally {
        myVariableName=null;
        myInField=false;
        myInParameter=false;
      }
    }
    @Override public void visitJSNewExpression(    final JSNewExpression node){
      myInNewExpression=true;
      try {
        super.visitJSNewExpression(node);
      }
  finally {
        myInNewExpression=false;
      }
    }
    @Override public void visitElement(    final PsiElement element){
      super.visitElement(element);
      element.acceptChildren(this);
    }
  }
;
  if (myClazz instanceof XmlBackedJSClassImpl) {
    ((XmlBackedJSClassImpl)myClazz).processInjectedFiles(new Processor<JSFile>(){
      @Override public boolean process(      final JSFile jsFile){
        jsFile.accept(visitor);
        return true;
      }
    }
);
    myClazz.getParent().acceptChildren(new XmlElementVisitor(){
      private String myInClassAttributeName;
      @Override public void visitXmlTag(      final XmlTag tag){
        XmlElementDescriptor descriptor=tag.getDescriptor();
        if (descriptor != null) {
          PsiElement declaration=descriptor.getDeclaration();
          if (declaration instanceof XmlFile && JavaScriptSupportLoader.isFlexMxmFile((PsiFile)declaration)) {
            declaration=XmlBackedJSClassImpl.getXmlBackedClass((XmlFile)declaration);
          }
          if (declaration instanceof JSClass) {
            String id=tag.getAttributeValue("id");
            FlashDiagramRelationship type=StringUtil.isNotEmpty(id) ? Factory.oneToOne(id) : Factory.dependency("");
            result.add(Pair.create((JSClass)declaration,type));
          }
        }
        super.visitXmlTag(tag);
      }
      @Override public void visitXmlAttribute(      final XmlAttribute attribute){
        XmlAttributeDescriptor descriptor=attribute.getDescriptor();
        if (descriptor instanceof AnnotationBackedDescriptor) {
          if (FlexReferenceContributor.isClassReferenceType(((AnnotationBackedDescriptor)descriptor).getType())) {
            myInClassAttributeName=StringUtil.notNullize(attribute.getName());
            try {
              super.visitXmlAttribute(attribute);
            }
  finally {
              myInClassAttributeName=null;
            }
          }
        }
      }
      @Override public void visitXmlAttributeValue(      final XmlAttributeValue value){
        if (myInClassAttributeName != null) {
          processReferenceSet(value.getReferences(),result,Factory.dependency(myInClassAttributeName));
        }
      }
      @Override public void visitXmlText(      final XmlText text){
        List<Pair<PsiElement,TextRange>> injectedFiles=InjectedLanguageUtil.getInjectedPsiFiles(text);
        if (injectedFiles != null) {
          for (          Pair<PsiElement,TextRange> pair : injectedFiles) {
            if (CSS.is(pair.first.getLanguage())) {
              pair.first.accept(new CssElementVisitor(){
                private boolean myInClassReference;
                @Override public void visitElement(                final PsiElement element){
                  super.visitElement(element);
                  element.acceptChildren(this);
                }
                @Override public void visitCssFunction(                final CssFunction _function){
                  if (FlexReferenceContributor.CLASS_REFERENCE.equals(_function.getFunctionName())) {
                    myInClassReference=true;
                    try {
                      super.visitCssFunction(_function);
                    }
  finally {
                      myInClassReference=false;
                    }
                  }
                }
                @Override public void visitCssString(                final CssString _string){
                  if (myInClassReference) {
                    CssDeclaration declaration=PsiTreeUtil.getParentOfType(_string,CssDeclaration.class);
                    if (declaration != null) {
                      processReferenceSet(_string.getReferences(),result,Factory.dependency(declaration.getPropertyName()));
                    }
                  }
                }
              }
);
            }
          }
        }
        super.visitXmlText(text);
      }
      @Override public void visitElement(      final PsiElement element){
        super.visitElement(element);
        element.acceptChildren(this);
      }
    }
);
  }
  myClazz.processDeclarations(new BaseScopeProcessor(){
    @Override public boolean execute(    final PsiElement element,    final ResolveState state){
      element.accept(visitor);
      return true;
    }
  }
,ResolveState.initial(),myClazz,myClazz);
  return result;
}
