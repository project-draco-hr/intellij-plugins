{
  final String message;
  if (debuggableActiveCapturedBrowsers.isEmpty()) {
    List<WebBrowser> activeBrowsers=WebBrowserManager.getInstance().getActiveBrowsers();
    List<DebuggableWebBrowser> debuggableActiveBrowsers=toDebuggableWebBrowsers(activeBrowsers);
    if (debuggableActiveBrowsers.isEmpty()) {
      message="<html><body>" + "No supported browsers found." + "<p/>"+ "JavaScript debugging is currently supported in Chrome or Firefox"+ "</body></html>";
    }
 else {
      message=formatBrowserSelectionHtml(debuggableActiveBrowsers);
    }
  }
 else {
    message=formatBrowserSelectionHtml(debuggableActiveCapturedBrowsers);
  }
  ToolWindowManager.getInstance(myProject).notifyByBalloon(myEnv.getExecutor().getToolWindowId(),MessageType.WARNING,message,null,new HyperlinkAdapter(){
    @Override protected void hyperlinkActivated(    HyperlinkEvent e){
      WebBrowser browser=WebBrowserManager.getInstance().findBrowserById(e.getDescription());
      if (browser != null) {
        setWebBrowserToReuse(browser);
        if (!ExecutorRegistry.getInstance().isStarting(myProject,myEnv.getExecutor().getId(),myProgramRunner.getRunnerId())) {
          ExecutionManager executionManager=ExecutionManager.getInstance(myProject);
          executionManager.restartRunProfile(myProgramRunner,myEnv,myEnv.getContentToReuse());
        }
      }
    }
  }
);
}
