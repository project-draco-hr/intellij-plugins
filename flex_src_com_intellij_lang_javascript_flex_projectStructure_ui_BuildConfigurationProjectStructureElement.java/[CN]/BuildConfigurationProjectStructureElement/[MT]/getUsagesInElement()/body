{
  final FlexProjectConfigurationEditor editor=FlexBuildConfigurationsExtension.getInstance().getConfigurator().getConfigEditor();
  final ModulesConfigurator modulesConfigurator=myContext.getModulesConfigurator();
  final List<ProjectStructureElementUsage> usages=new ArrayList<ProjectStructureElementUsage>();
  for (  DependencyEntry dependencyEntry : myBc.getDependencies().getEntries()) {
    if (dependencyEntry instanceof SharedLibraryEntry) {
      String libraryName=((SharedLibraryEntry)dependencyEntry).getLibraryName();
      String libraryLevel=((SharedLibraryEntry)dependencyEntry).getLibraryLevel();
      final Library library=myContext.getLibrary(libraryName,libraryLevel);
      if (library != null) {
        usages.add(new UsageInBcDependencies(this,new LibraryProjectStructureElement(myContext,library)){
          @Override public void removeSourceElement(){
            libraryRemoved(library);
          }
        }
);
      }
    }
 else     if (dependencyEntry instanceof BuildConfigurationEntry) {
      final BuildConfigurationEntry bcEntry=(BuildConfigurationEntry)dependencyEntry;
      Module module=modulesConfigurator.getModule(bcEntry.getModuleName());
      if (module != null) {
        final ModifiableFlexIdeBuildConfiguration bc=ContainerUtil.find(editor.getConfigurations(module),new Condition<ModifiableFlexIdeBuildConfiguration>(){
          @Override public boolean value(          final ModifiableFlexIdeBuildConfiguration configuration){
            return bcEntry.getBcName().equals(configuration.getName());
          }
        }
);
        if (bc != null) {
          usages.add(new UsageInBcDependencies(this,new BuildConfigurationProjectStructureElement(bc,module,myContext)){
            @Override public void removeSourceElement(){
            }
          }
);
        }
      }
      bcEntry.findBuildConfiguration();
    }
  }
  return usages;
}
