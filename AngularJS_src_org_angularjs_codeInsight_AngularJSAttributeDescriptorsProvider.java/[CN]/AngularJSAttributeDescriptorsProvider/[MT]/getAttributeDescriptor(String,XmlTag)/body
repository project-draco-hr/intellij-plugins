{
  final String attributeName=normalizeAttributeName(attrName);
  if (xmlTag != null) {
    final Project project=xmlTag.getProject();
    final Ref<XmlAttributeDescriptor> result=new Ref<XmlAttributeDescriptor>();
    FileBasedIndex.getInstance().processValues(AngularJSIndex.INDEX_ID,AngularJSIndexingHandler.DIRECTIVE_KEY,null,new FileBasedIndex.ValueProcessor<TObjectIntHashMap<String>>(){
      @Override public boolean process(      VirtualFile file,      TObjectIntHashMap<String> descriptorNames){
        for (        Object o : descriptorNames.keys()) {
          if (attributeName.equals(o)) {
            result.set(createDescriptor(project,(String)o,file,descriptorNames.get((String)o)));
            break;
          }
        }
        return result.get() == null;
      }
    }
,GlobalSearchScope.allScope(project));
    if (result.get() != null) {
      return result.get();
    }
    if (ATTRIBUTE_BY_NAME.containsKey(attributeName)) {
      return createDescriptor(project,attributeName,null,-1);
    }
  }
  return ATTRIBUTE_BY_NAME.get(attributeName);
}
