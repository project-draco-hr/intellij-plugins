{
  final String[] parts=line.split("\\|");
  try {
    final String errorSeverity=parts[0];
    final String subSystem=parts[1];
    final String errorCode=parts[2];
    String sourceUrl=FileUtil.toSystemIndependentName(parts[3]);
    if (sourceUrl.startsWith("file:")) {
      sourceUrl=VfsUtilCore.pathToUrl(sourceUrl.substring("file:".length()));
    }
    VirtualFile virtualFile=VirtualFileManager.getInstance().findFileByUrl(sourceUrl);
    if (virtualFile == null && !ApplicationManager.getApplication().isUnitTestMode() && sourceUrl.contains(libraryRootPath)) {
      virtualFile=VirtualFileManager.getInstance().findFileByUrl(VfsUtil.pathToUrl(libraryRootPath));
      if (virtualFile == null) {
        LOG.debug("cannot find library root");
        return null;
      }
      virtualFile=virtualFile.getParent();
      final int index=sourceUrl.indexOf(libraryRootPath);
      final String relativePath=sourceUrl.substring(index + libraryRootPath.length() + 1);
      LOG.debug("relative path from lib: " + relativePath);
      virtualFile=VfsUtil.findRelativeFile(virtualFile,relativePath.split("/"));
      LOG.debug("fix source url: " + (virtualFile == null ? null : virtualFile.getPath()));
    }
    if (virtualFile == null && !ApplicationManager.getApplication().isUnitTestMode()) {
      LOG.debug("cannot find file: " + sourceUrl);
      return null;
    }
    final int lineNumber=Integer.parseInt(parts[4]) - 1;
    final int offset=Integer.parseInt(parts[5]) - 1;
    final int length=Integer.parseInt(parts[6]);
    final String message=StringUtil.unescapeStringCharacters(parts[7]).trim();
    if (lineNumber < 0 || offset < 0 || length <= 0) {
      return null;
    }
    return new AnalyzerMessage(virtualFile,lineNumber,offset,length,Type.valueOf(errorSeverity),subSystem,errorCode,message);
  }
 catch (  Throwable th) {
    LOG.debug(line,th);
    return null;
  }
}
