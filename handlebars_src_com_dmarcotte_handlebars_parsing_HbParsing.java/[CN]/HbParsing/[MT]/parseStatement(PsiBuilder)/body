{
  IElementType tokenType=builder.getTokenType();
{
    if (builder.getTokenType() == OPEN_INVERSE) {
      if (builder.lookAhead(1) == CLOSE) {
        return false;
      }
      PsiBuilder.Marker blockMarker=builder.mark();
      if (parseOpenInverse(builder)) {
        parseProgram(builder);
        parseInverseAndProgram(builder);
        parseCloseBlock(builder);
        blockMarker.done(BLOCK_WRAPPER);
      }
 else {
        return false;
      }
      return true;
    }
    if (tokenType == OPEN_BLOCK) {
      PsiBuilder.Marker blockMarker=builder.mark();
      boolean hasDecorator=(builder.getTokenText() != null && builder.getTokenText().equals("{{#*"));
      if (parseOpenBlock(builder)) {
        parseProgram(builder);
        PsiBuilder.Marker inverseMarker=builder.mark();
        if (parseInverseChain(builder) && hasDecorator) {
          inverseMarker.error(HbBundle.message("hb.parsing.unexpected.decorator.inverse"));
        }
 else {
          inverseMarker.drop();
        }
        parseCloseBlock(builder);
        blockMarker.done(BLOCK_WRAPPER);
      }
 else {
        return false;
      }
      return true;
    }
  }
{
    if (tokenType == OPEN) {
      if (builder.lookAhead(1) == ELSE) {
        return false;
      }
      parseMustache(builder,OPEN,CLOSE);
      return true;
    }
    if (tokenType == OPEN_UNESCAPED) {
      parseMustache(builder,OPEN_UNESCAPED,CLOSE_UNESCAPED);
      return true;
    }
  }
  if (tokenType == OPEN_RAW_BLOCK) {
    PsiBuilder.Marker blockMarker=builder.mark();
    if (parseOpenRawBlock(builder)) {
      if (builder.getTokenType() == CONTENT) {
        builder.advanceLexer();
      }
      parseCloseRawBlock(builder);
      blockMarker.done(BLOCK_WRAPPER);
    }
 else {
      return false;
    }
    return true;
  }
  if (tokenType == OPEN_PARTIAL) {
    parsePartial(builder);
    return true;
  }
  if (tokenType == OPEN_PARTIAL_BLOCK) {
    PsiBuilder.Marker blockMarker=builder.mark();
    if (parseOpenPartialBlock(builder)) {
      parseProgram(builder);
      parseCloseBlock(builder);
      blockMarker.done(BLOCK_WRAPPER);
    }
 else {
      return false;
    }
    return true;
  }
  if (tokenType == ESCAPE_CHAR) {
    builder.advanceLexer();
    return true;
  }
  if (tokenType == CONTENT) {
    builder.advanceLexer();
    return true;
  }
  if (tokenType == COMMENT) {
    parseLeafToken(builder,COMMENT);
    return true;
  }
  if (tokenType == UNCLOSED_COMMENT) {
    PsiBuilder.Marker unclosedCommentMarker=builder.mark();
    parseLeafToken(builder,UNCLOSED_COMMENT);
    unclosedCommentMarker.error(HbBundle.message("hb.parsing.comment.unclosed"));
    return true;
  }
  return false;
}
