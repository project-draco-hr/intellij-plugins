{
  PsiBuilder.Marker paramMarker=builder.mark();
  if (parsePath(builder)) {
    paramMarker.done(PARAM);
    return true;
  }
  PsiBuilder.Marker stringMarker=builder.mark();
  if (parseLeafToken(builder,STRING)) {
    stringMarker.drop();
    paramMarker.done(PARAM);
    return true;
  }
 else {
    stringMarker.rollbackTo();
  }
  PsiBuilder.Marker integerMarker=builder.mark();
  if (parseLeafToken(builder,NUMBER)) {
    integerMarker.drop();
    paramMarker.done(PARAM);
    return true;
  }
 else {
    integerMarker.rollbackTo();
  }
  PsiBuilder.Marker booleanMarker=builder.mark();
  if (parseLeafToken(builder,BOOLEAN)) {
    booleanMarker.drop();
    paramMarker.done(PARAM);
    return true;
  }
 else {
    booleanMarker.rollbackTo();
  }
  PsiBuilder.Marker dataMarker=builder.mark();
  if (parseDataName(builder)) {
    dataMarker.drop();
    paramMarker.done(PARAM);
    return true;
  }
 else {
    dataMarker.rollbackTo();
  }
  PsiBuilder.Marker sexprMarker=builder.mark();
  if (parseSexpr(builder)) {
    sexprMarker.drop();
    paramMarker.done(PARAM);
    return true;
  }
 else {
    sexprMarker.rollbackTo();
  }
  paramMarker.error(HbBundle.message("hb.parsing.expected.parameter"));
  return false;
}
