{
  try {
    if (propertyProcessor.writeIfPrimitive(createValueProvider(tag),descriptor.getQualifiedName(),out,writer,null)) {
      return true;
    }
  }
 catch (  InvalidPropertyException e) {
    problemsHolder.add(e);
    return false;
  }
  if (JSCommonTypeNames.ARRAY_CLASS_NAME.equals(descriptor.getQualifiedName())) {
    out.write(AmfExtendedTypes.MXML_ARRAY);
    processIdAttributeOfArrayOrVectorDeclaredAsTag(tag,parentContext);
    processTagChildren(tag,null,parentContext,false,PropertyKind.ARRAY,false);
    return true;
  }
 else   if (CodeContext.AS3_VEC_VECTOR_QUALIFIED_NAME.equals(descriptor.getQualifiedName())) {
    return processMxmlVector(tag,parentContext);
  }
  final int projectComponentFactoryId;
  try {
    projectComponentFactoryId=InjectionUtil.getProjectComponentFactoryId(descriptor.getQualifiedName(),descriptor.getDeclaration(),propertyProcessor.getUnregisteredDocumentFactories());
  }
 catch (  InvalidPropertyException e) {
    problemsHolder.add(e);
    return false;
  }
  final int childDataPosition=out.size();
  if (projectComponentFactoryId != -1) {
    if (!isListItem) {
      writer.getBlockOut().setPosition(writer.getBlockOut().size() - 1);
    }
    out.write(AmfExtendedTypes.DOCUMENT_REFERENCE);
    out.writeUInt29(projectComponentFactoryId);
  }
 else {
    if (isListItem) {
      out.write(Amf3Types.OBJECT);
    }
    writer.write(descriptor.getQualifiedName());
  }
  return processElements(tag,parentContext,hasStates && isListItem && parentContext != null,childDataPosition,out.allocateClearShort());
}
