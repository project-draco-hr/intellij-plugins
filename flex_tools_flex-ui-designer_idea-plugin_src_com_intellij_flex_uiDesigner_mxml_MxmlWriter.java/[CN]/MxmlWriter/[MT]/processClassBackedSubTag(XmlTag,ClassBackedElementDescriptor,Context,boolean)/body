{
  if (writeIfPrimitive(tag,descriptor)) {
    return true;
  }
  if (JSCommonTypeNames.ARRAY_CLASS_NAME.equals(descriptor.getQualifiedName())) {
    out.write(Amf3Types.ARRAY);
    processTagChildren(tag,parentContext,null,false,PropertyKind.ARRAY,false);
    return true;
  }
 else   if (CodeContext.AS3_VEC_VECTOR_QUALIFIED_NAME.equals(descriptor.getQualifiedName())) {
    final XmlAttribute type=tag.getAttribute("type");
    if (type == null) {
      return false;
    }
    final XmlAttribute fixed=tag.getAttribute("fixed");
    writer.writeVectorHeader(type.getDisplayValue(),fixed != null && fixed.getDisplayValue().charAt(0) == 't');
    processTagChildren(tag,parentContext,null,false,PropertyKind.VECTOR,false);
    return true;
  }
  final int projectComponentFactoryId;
  try {
    projectComponentFactoryId=InjectionUtil.getProjectComponentFactoryId(descriptor.getQualifiedName(),descriptor.getDeclaration(),propertyProcessor.getUnregisteredDocumentFactories());
  }
 catch (  InvalidPropertyException e) {
    problemsHolder.add(e);
    return false;
  }
  final int childDataPosition=out.size();
  if (projectComponentFactoryId != -1) {
    if (!isListItem) {
      writer.getBlockOut().setPosition(writer.getBlockOut().size() - 1);
    }
    out.write(AmfExtendedTypes.DOCUMENT_REFERENCE);
    out.writeUInt29(projectComponentFactoryId);
  }
 else {
    if (isListItem) {
      out.write(Amf3Types.OBJECT);
    }
    writer.write(descriptor.getQualifiedName());
  }
  return processElements(tag,parentContext,hasStates && isListItem && parentContext != null,childDataPosition,out.getByteOut().allocate(2));
}
