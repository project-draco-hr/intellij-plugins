{
  mySkdsModel=sdksModel;
  myConfigEditor=configEditor;
  myDependencies=bc.getDependencies();
  myProject=project;
  myNature=bc.getNature();
  mySdkChangeDispatcher=EventDispatcher.create(ChangeListener.class);
  myDisposable=Disposer.newDisposable();
  final SdkModel.Listener listener=new SdkModel.Listener(){
    public void sdkAdded(    final Sdk sdk){
      rebuildSdksModel();
    }
    public void beforeSdkRemove(    final Sdk sdk){
      rebuildSdksModel();
    }
    public void sdkChanged(    final Sdk sdk,    final String previousName){
      rebuildSdksModel();
    }
    public void sdkHomeSelected(    final Sdk sdk,    final String newSdkHome){
      rebuildSdksModel();
    }
  }
;
  sdksModel.addListener(listener);
  Disposer.register(myDisposable,new Disposable(){
    public void dispose(){
      sdksModel.removeListener(listener);
    }
  }
);
  mySdkCombo.setSetupButton(myNewButton,myProject,sdksModel,new JdkComboBox.NoneJdkComboBoxItem(),null,FlexBundle.message("set.up.sdk.title"));
  mySdkCombo.setEditButton(myEditButton,myProject,new NullableComputable<Sdk>(){
    @Nullable public Sdk compute(){
      return mySdkCombo.getSelectedJdk();
    }
  }
);
  mySdkLabel.setLabelFor(mySdkCombo);
  mySdkCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (myFreeze) {
        return;
      }
      updateOnSelectedSdkChange();
    }
  }
);
  myComponentSetCombo.setModel(new DefaultComboBoxModel(ComponentSet.values()));
  myComponentSetCombo.setRenderer(new ListCellRendererWrapper<ComponentSet>(myComponentSetCombo.getRenderer()){
    public void customize(    JList list,    ComponentSet value,    int index,    boolean selected,    boolean hasFocus){
      setText(value.getPresentableText());
    }
  }
);
  myFrameworkLinkageCombo.setRenderer(new ListCellRendererWrapper<LinkageType>(myFrameworkLinkageCombo.getRenderer()){
    public void customize(    JList list,    LinkageType value,    int index,    boolean selected,    boolean hasFocus){
      if (value == LinkageType.Default) {
        final Sdk sdk=mySdkCombo.getSelectedJdk();
        final String sdkVersion=sdk != null ? sdk.getVersionString() : null;
        setText(sdkVersion == null ? "Default" : MessageFormat.format("Default ({0})",BCUtils.getDefaultFrameworkLinkage(sdkVersion,myNature).getLongText()));
      }
 else {
        setText(value.getLongText());
      }
    }
  }
);
  myFrameworkLinkageCombo.setModel(new DefaultComboBoxModel(BCUtils.getSuitableFrameworkLinkages(myNature)));
  ItemListener updateSdkItemsListener=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      DefaultMutableTreeNode sdkNode=findSdkNode();
      Sdk currentSdk=mySdkCombo.getSelectedJdk();
      if (sdkNode != null && currentSdk != null) {
        updateSdkEntries(sdkNode,currentSdk);
        myTable.refresh();
      }
    }
  }
;
  myTargetPlayerCombo.addItemListener(updateSdkItemsListener);
  myComponentSetCombo.addItemListener(updateSdkItemsListener);
  myFrameworkLinkageCombo.addItemListener(updateSdkItemsListener);
  myTargetPlayerWarning.setIcon(IconLoader.getIcon("smallWarning.png"));
  myWarning.setIcon(UIUtil.getBalloonWarningIcon());
  myTable=new EditableTreeTable<MyTableItem>("",DEPENDENCY_TYPE_COLUMN){
    @Override protected void render(    SimpleColoredComponent c,    MyTableItem item){
      if (item != null) {
        c.append(item.getText(),item.isValid() ? SimpleTextAttributes.REGULAR_ATTRIBUTES : SimpleTextAttributes.ERROR_ATTRIBUTES);
        c.setIcon(item.getIcon());
      }
    }
  }
;
  myTable.setRootVisible(false);
  myTable.getTree().setShowsRootHandles(true);
  myTable.getTree().setLineStyleAngled();
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateEditButton();
      updateRemoveButton();
    }
  }
);
  ToolbarDecorator d=ToolbarDecorator.createDecorator(myTable);
  d.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      addItem(button);
    }
  }
);
  d.setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      removeSelection();
    }
  }
);
  myEditAction=new AnActionButton(ProjectBundle.message("module.classpath.button.edit"),IconUtil.getEditIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      MyTableItem item=myTable.getItemAt(myTable.getSelectedRow());
      editLibrary(((ModuleLibraryItem)item).orderEntry);
    }
  }
;
  d.addExtraAction(myEditAction);
  JPanel panel=d.createPanel();
  myTablePanel.add(panel,BorderLayout.CENTER);
  myRemoveButton=ToolbarDecorator.findRemoveButton(panel);
  myTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        if (myTable.getSelectedRowCount() == 1) {
          myTable.getItemAt(myTable.getSelectedRow()).onDoubleClick();
        }
      }
    }
  }
);
  FlexBuildConfigurationsExtension.getInstance().getConfigurator().addListener(new FlexIdeBCConfigurator.Listener(){
    @Override public void moduleRemoved(    Module module){
      Set<MyTableItem> itemsToRemove=new HashSet<MyTableItem>();
      for (int row=0; row < myTable.getRowCount(); row++) {
        MyTableItem item=myTable.getItemAt(row);
        if (item instanceof BCItem) {
          FlexIdeBCConfigurable configurable=((BCItem)item).configurable;
          if (configurable != null && configurable.getModule() == module) {
            itemsToRemove.add(item);
          }
        }
      }
      removeItems(itemsToRemove);
    }
    @Override public void buildConfigurationRemoved(    FlexIdeBCConfigurable configurable){
      if (configurable.isParentFor(DependenciesConfigurable.this)) {
        return;
      }
      for (int row=0; row < myTable.getRowCount(); row++) {
        MyTableItem item=myTable.getItemAt(row);
        if (item instanceof BCItem && ((BCItem)item).configurable == configurable) {
          removeItems(Collections.singleton(item));
          break;
        }
      }
    }
  }
,myDisposable);
  myConfigEditor.addModulesModelChangeListener(new FlexProjectConfigurationEditor.ModulesModelChangeListener(){
    @Override public void modulesModelsChanged(    Collection<Module> modules){
      FlexIdeBCConfigurator configurator=FlexBuildConfigurationsExtension.getInstance().getConfigurator();
      for (      Module module : modules) {
        for (        CompositeConfigurable configurable : configurator.getBCConfigurables(module)) {
          FlexIdeBCConfigurable flexIdeBCConfigurable=FlexIdeBCConfigurable.unwrap(configurable);
          if (flexIdeBCConfigurable.isParentFor(DependenciesConfigurable.this)) {
            resetTable(myDependencies.getSdkEntry(),true);
          }
        }
      }
    }
  }
,myDisposable);
  UserActivityWatcher watcher=new UserActivityWatcher();
  watcher.register(myMainPanel);
  myUserActivityDispatcher=EventDispatcher.create(UserActivityListener.class);
  watcher.addUserActivityListener(new UserActivityListener(){
    @Override public void stateChanged(){
      if (myFreeze) {
        return;
      }
      myUserActivityDispatcher.getMulticaster().stateChanged();
    }
  }
,myDisposable);
}
