{
  myDependencies=bc.DEPENDENCIES;
  myProject=project;
  myRootModel=rootModel;
  myDisposable=new Disposable(){
    @Override public void dispose(){
    }
  }
;
  Disposer.register(myDisposable,mySdkPanel);
  final boolean mobilePlatform=bc.TARGET_PLATFORM == FlexIdeBuildConfiguration.TargetPlatform.Mobile;
  myComponentSetLabel.setVisible(!mobilePlatform && !bc.PURE_ACTION_SCRIPT);
  myComponentSetCombo.setVisible(!mobilePlatform && !bc.PURE_ACTION_SCRIPT);
  myComponentSetCombo.setModel(new DefaultComboBoxModel(FlexIdeBuildConfiguration.ComponentSet.values()));
  myComponentSetCombo.setRenderer(new ListCellRendererWrapper<FlexIdeBuildConfiguration.ComponentSet>(myComponentSetCombo.getRenderer()){
    public void customize(    JList list,    FlexIdeBuildConfiguration.ComponentSet value,    int index,    boolean selected,    boolean hasFocus){
      setText(value.PRESENTABLE_TEXT);
    }
  }
);
  final FlexIdeBuildConfiguration.FrameworkLinkage defaultLinkage=BCUtils.getDefaultFrameworkLinkage(bc.TARGET_PLATFORM,bc.PURE_ACTION_SCRIPT,bc.OUTPUT_TYPE);
  myFrameworkLinkageCombo.setRenderer(new ListCellRendererWrapper<FlexIdeBuildConfiguration.FrameworkLinkage>(myFrameworkLinkageCombo.getRenderer()){
    public void customize(    JList list,    FlexIdeBuildConfiguration.FrameworkLinkage value,    int index,    boolean selected,    boolean hasFocus){
      if (value == FlexIdeBuildConfiguration.FrameworkLinkage.Default) {
        setText(MessageFormat.format("Default ({0})",defaultLinkage.PRESENTABLE_TEXT));
      }
 else {
        setText(value.PRESENTABLE_TEXT);
      }
    }
  }
);
  myFrameworkLinkageCombo.setModel(new DefaultComboBoxModel(BCUtils.getSuitableFrameworkLinkages(bc.TARGET_PLATFORM,bc.PURE_ACTION_SCRIPT,bc.OUTPUT_TYPE)));
  myTable=new EditableTreeTable<MyTableItem>(""){
    @Override protected void render(    SimpleColoredComponent c,    MyTableItem item){
      if (item != null) {
        c.append(item.getText());
        c.setIcon(item.getIcon());
      }
    }
  }
;
  myTable.setRootVisible(false);
  myTable.getTree().setLineStyleAngled();
  ToolbarDecorator d=ToolbarDecorator.createDecorator(myTable);
  d.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      addItem(button);
    }
  }
);
  d.setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      removeSelection();
    }
  }
);
  d.setUpAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      moveSelection(-1);
    }
  }
);
  d.setDownAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      moveSelection(1);
    }
  }
);
  myEditAction=new AnActionButton(ProjectBundle.message("module.classpath.button.edit"),IconUtil.getEditIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      MyTableItem item=myTable.getItemAt(myTable.getSelectedRow());
      editLibrary(((ModuleLibraryItem)item).libraryEntry);
    }
  }
;
  d.addExtraAction(myEditAction);
  myTablePanel.add(d.createPanel(),BorderLayout.CENTER);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateEditButton();
    }
  }
);
  myTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        if (myTable.getSelectedRowCount() == 1) {
          MyTableItem item=myTable.getItemAt(myTable.getSelectedRow());
          if (item instanceof ModuleLibraryItem) {
            editLibrary(((ModuleLibraryItem)item).libraryEntry);
          }
        }
      }
    }
  }
);
  FlexIdeModuleStructureExtension.getInstance().getConfigurator().addListener(new FlexIdeBCConfigurator.Listener(){
    @Override public void moduleRemoved(    Module module){
      List<Integer> rowsToRemove=new ArrayList<Integer>();
      for (int row=0; row < myTable.getRowCount(); row++) {
        MyTableItem item=myTable.getItemAt(row);
        if (item instanceof BCItem && ((BCItem)item).configurable.getModifiableRootModel().getModule() == module) {
          rowsToRemove.add(row);
        }
      }
      if (!rowsToRemove.isEmpty()) {
        DefaultMutableTreeNode root=myTable.getRoot();
        for (int i=0; i < rowsToRemove.size(); i++) {
          root.remove(rowsToRemove.get(i) - i);
        }
        myTable.refresh();
      }
    }
    @Override public void buildConfigurationRemoved(    FlexIdeBCConfigurable configurable){
      if (configurable.getDependenciesConfigurable() == DependenciesConfigurable.this) {
        return;
      }
      for (int row=0; row < myTable.getRowCount(); ) {
        MyTableItem item=myTable.getItemAt(row);
        if (item instanceof BCItem && ((BCItem)item).configurable == configurable) {
          myTable.getRoot().remove(row);
          myTable.refresh();
          break;
        }
      }
    }
  }
,myDisposable);
}
