{
  mySdksModel=sdksModel;
  myModifiableRootModel=modifiableRootModel;
  myDependencies=bc.DEPENDENCIES;
  myProject=project;
  myNature=bc.getNature();
  myDisposable=Disposer.newDisposable();
  Disposer.register(myDisposable,mySdkPanel);
  myTargetPlayerLabel.setVisible(myNature.isWebPlatform());
  myTargetPlayerCombo.setVisible(myNature.isWebPlatform());
  mySdkPanel.addListener(new ChangeListener(){
    public void stateChanged(    final ChangeEvent e){
      updateAvailableTargetPlayers();
      updateComponentSetCombo();
      updateSdkTableItem(mySdkPanel.getCurrentSdk());
      myTable.refresh();
    }
  }
,myDisposable);
  myComponentSetCombo.setModel(new DefaultComboBoxModel(ComponentSet.values()));
  myComponentSetCombo.setRenderer(new ListCellRendererWrapper<ComponentSet>(myComponentSetCombo.getRenderer()){
    public void customize(    JList list,    ComponentSet value,    int index,    boolean selected,    boolean hasFocus){
      setText(value.getPresentableText());
    }
  }
);
  final LinkageType defaultLinkage=BCUtils.getDefaultFrameworkLinkage(myNature);
  myFrameworkLinkageCombo.setRenderer(new ListCellRendererWrapper<LinkageType>(myFrameworkLinkageCombo.getRenderer()){
    public void customize(    JList list,    LinkageType value,    int index,    boolean selected,    boolean hasFocus){
      if (value == LinkageType.Default) {
        setText(MessageFormat.format("Default ({0})",defaultLinkage.getLongText()));
      }
 else {
        setText(value.getLongText());
      }
    }
  }
);
  myFrameworkLinkageCombo.setModel(new DefaultComboBoxModel(BCUtils.getSuitableFrameworkLinkages(myNature)));
  ItemListener updateSdkItemsListener=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      DefaultMutableTreeNode sdkNode=findSdkNode();
      FlexSdk currentSdk=mySdkPanel.getCurrentSdk();
      if (sdkNode != null && currentSdk != null) {
        updateSdkEntries(sdkNode,currentSdk);
        myTable.refresh();
      }
    }
  }
;
  myTargetPlayerCombo.addItemListener(updateSdkItemsListener);
  myComponentSetCombo.addItemListener(updateSdkItemsListener);
  myFrameworkLinkageCombo.addItemListener(updateSdkItemsListener);
  myTable=new EditableTreeTable<MyTableItem>("",DEPENDENCY_TYPE_COLUMN){
    @Override protected void render(    SimpleColoredComponent c,    MyTableItem item){
      if (item != null) {
        c.append(item.getText(),item.isValid() ? SimpleTextAttributes.REGULAR_ATTRIBUTES : SimpleTextAttributes.ERROR_ATTRIBUTES);
        c.setIcon(item.getIcon());
      }
    }
  }
;
  myTable.setRootVisible(false);
  myTable.getTree().setShowsRootHandles(true);
  myTable.getTree().setLineStyleAngled();
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateEditButton();
      updateRemoveButton();
    }
  }
);
  ToolbarDecorator d=ToolbarDecorator.createDecorator(myTable);
  d.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      addItem(button);
    }
  }
);
  d.setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      removeSelection();
    }
  }
);
  myEditAction=new AnActionButton(ProjectBundle.message("module.classpath.button.edit"),IconUtil.getEditIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      MyTableItem item=myTable.getItemAt(myTable.getSelectedRow());
      editLibrary(((ModuleLibraryItem)item).orderEntry);
    }
  }
;
  d.addExtraAction(myEditAction);
  JPanel panel=d.createPanel();
  myTablePanel.add(panel,BorderLayout.CENTER);
  myRemoveButton=ToolbarDecorator.findRemoveButton(panel);
  myTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        if (myTable.getSelectedRowCount() == 1) {
          MyTableItem item=myTable.getItemAt(myTable.getSelectedRow());
          if (item instanceof BCItem) {
            FlexIdeBCConfigurable configurable=((BCItem)item).configurable;
            if (configurable != null) {
              Place place=new Place().putPath(ProjectStructureConfigurable.CATEGORY,ModuleStructureConfigurable.getInstance(myProject)).putPath(MasterDetailsComponent.TREE_OBJECT,configurable.getEditableObject());
              ProjectStructureConfigurable.getInstance(myProject).navigateTo(place,true);
            }
          }
 else           if (item instanceof ModuleLibraryItem && canEditLibrary((ModuleLibraryItem)item)) {
            editLibrary(((ModuleLibraryItem)item).orderEntry);
          }
        }
      }
    }
  }
);
  FlexIdeModuleStructureExtension.getInstance().getConfigurator().addListener(new FlexIdeBCConfigurator.Listener(){
    @Override public void moduleRemoved(    Module module){
      List<Integer> rowsToRemove=new ArrayList<Integer>();
      for (int row=0; row < myTable.getRowCount(); row++) {
        MyTableItem item=myTable.getItemAt(row);
        if (item instanceof BCItem) {
          FlexIdeBCConfigurable configurable=((BCItem)item).configurable;
          if (configurable != null && configurable.getModule() == module) {
            rowsToRemove.add(row);
          }
        }
      }
      if (!rowsToRemove.isEmpty()) {
        DefaultMutableTreeNode root=myTable.getRoot();
        for (int i=0; i < rowsToRemove.size(); i++) {
          root.remove(rowsToRemove.get(i) - i);
        }
        myTable.refresh();
      }
    }
    @Override public void buildConfigurationRemoved(    FlexIdeBCConfigurable configurable){
      if (configurable.isParentFor(DependenciesConfigurable.this)) {
        return;
      }
      for (int row=0; row < myTable.getRowCount(); row++) {
        MyTableItem item=myTable.getItemAt(row);
        if (item instanceof BCItem && ((BCItem)item).configurable == configurable) {
          myTable.getRoot().remove(row);
          myTable.refresh();
          break;
        }
      }
    }
  }
,myDisposable);
}
