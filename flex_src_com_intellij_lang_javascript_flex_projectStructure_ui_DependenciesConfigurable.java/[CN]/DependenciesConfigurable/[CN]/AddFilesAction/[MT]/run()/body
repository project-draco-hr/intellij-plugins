{
  final Collection<Library> usedLibraries=new ArrayList<Library>();
  List<MyTableItem> items=myTable.getItems();
  for (  MyTableItem item : items) {
    if (item instanceof ModuleLibraryItem) {
      LibraryOrderEntry orderEntry=((ModuleLibraryItem)item).orderEntry;
      if (orderEntry != null) {
        Library library=orderEntry.getLibrary();
        if (library != null) {
          usedLibraries.add(orderEntry.getLibrary());
        }
      }
    }
  }
  Condition<Library> filter=new Condition<Library>(){
    @Override public boolean value(    Library library){
      return usedLibraries.contains(library);
    }
  }
;
  LibraryTableBase.ModifiableModelEx modifiableModel=(LibraryTableBase.ModifiableModelEx)myModifiableRootModel.getModuleLibraryTable().getModifiableModel();
  LibraryTable.ModifiableModel librariesModelWrapper=new LibraryTableModifiableModelWrapper(modifiableModel,filter);
  Module module=myModifiableRootModel.getModule();
  List<? extends FlexLibraryType> libraryTypes=Collections.singletonList(new FlexLibraryType(){
    @Override public LibraryRootsComponentDescriptor createLibraryRootsComponentDescriptor(){
      return new FlexLibraryRootsComponentDescriptor(){
        @NotNull @Override public List<? extends RootDetector> getRootDetectors(){
          return Arrays.asList(SWC_LIBRARY_DETECTOR);
        }
      }
;
    }
    @NotNull @Override public FlexLibraryProperties createDefaultProperties(){
      return new FlexLibraryProperties(UUID.randomUUID().toString());
    }
  }
);
  CreateModuleLibraryChooser c=new CreateModuleLibraryChooser(libraryTypes,myMainPanel,module,librariesModelWrapper);
  try {
    c.doChoose();
    if (!c.isOK()) {
      return;
    }
    final List<Library> libraries=c.getChosenElements();
    if (libraries.isEmpty()) {
      return;
    }
    DefaultMutableTreeNode rootNode=myTable.getRoot();
    for (    Library library : libraries) {
      String libraryId=((FlexLibraryProperties)((LibraryEx)library).getProperties()).getId();
      LibraryOrderEntry libraryEntry=myModifiableRootModel.findLibraryOrderEntry(library);
      rootNode.add(new DefaultMutableTreeNode(new ModuleLibraryItem(libraryId,libraryEntry),false));
    }
    myTable.refresh();
    myTable.getSelectionModel().clearSelection();
    int rowCount=myTable.getRowCount();
    myTable.getSelectionModel().addSelectionInterval(rowCount - libraries.size(),rowCount - 1);
  }
  finally {
    Disposer.dispose(c);
  }
}
