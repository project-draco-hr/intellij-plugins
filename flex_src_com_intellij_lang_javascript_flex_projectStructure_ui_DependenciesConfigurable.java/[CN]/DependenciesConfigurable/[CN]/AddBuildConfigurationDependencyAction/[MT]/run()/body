{
  Collection<FlexIdeBCConfigurable> dependencies=new ArrayList<FlexIdeBCConfigurable>();
  List<MyTableItem> items=myTable.getItems();
  for (  MyTableItem item : items) {
    if (item instanceof BCItem) {
      FlexIdeBCConfigurable configurable=((BCItem)item).configurable;
      if (configurable != null) {
        dependencies.add(configurable);
      }
    }
  }
  Map<Module,List<FlexIdeBCConfigurable>> treeItems=new HashMap<Module,List<FlexIdeBCConfigurable>>();
  FlexIdeBCConfigurator configurator=FlexBuildConfigurationsExtension.getInstance().getConfigurator();
  for (  Module module : ModuleStructureConfigurable.getInstance(myProject).getModules()) {
    if (ModuleType.get(module) != FlexModuleType.getInstance()) {
      continue;
    }
    for (    CompositeConfigurable configurable : configurator.getBCConfigurables(module)) {
      FlexIdeBCConfigurable flexIdeBCConfigurable=FlexIdeBCConfigurable.unwrap(configurable);
      if (dependencies.contains(flexIdeBCConfigurable) || flexIdeBCConfigurable.isParentFor(DependenciesConfigurable.this)) {
        continue;
      }
      if (!BCUtils.isApplicableForDependency(myNature,flexIdeBCConfigurable.getOutputType())) {
        continue;
      }
      List<FlexIdeBCConfigurable> list=treeItems.get(module);
      if (list == null) {
        list=new ArrayList<FlexIdeBCConfigurable>();
        treeItems.put(module,list);
      }
      list.add(flexIdeBCConfigurable);
    }
  }
  if (treeItems.isEmpty()) {
    Messages.showInfoMessage(myProject,"No applicable build configurations found","Add Dependency");
    return;
  }
  ChooseBuildConfigurationDialog d=new ChooseBuildConfigurationDialog(myProject,treeItems);
  d.show();
  if (!d.isOK()) {
    return;
  }
  FlexIdeBCConfigurable[] configurables=d.getSelectedConfigurables();
  DefaultMutableTreeNode root=myTable.getRoot();
  for (  FlexIdeBCConfigurable configurable : configurables) {
    root.add(new DefaultMutableTreeNode(new BCItem(configurable),false));
  }
  myTable.refresh();
  myTable.getSelectionModel().clearSelection();
  int rowCount=myTable.getRowCount();
  myTable.getSelectionModel().addSelectionInterval(rowCount - configurables.length,rowCount - 1);
}
