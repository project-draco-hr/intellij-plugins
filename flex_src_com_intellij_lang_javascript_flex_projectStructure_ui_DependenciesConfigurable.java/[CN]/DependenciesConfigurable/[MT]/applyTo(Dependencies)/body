{
  final Object targetPlayer=myTargetPlayerCombo.getSelectedItem();
  if (targetPlayer != null) {
    dependencies.TARGET_PLAYER=(String)targetPlayer;
  }
  dependencies.COMPONENT_SET=(ComponentSet)myComponentSetCombo.getSelectedItem();
  dependencies.setFrameworkLinkage((LinkageType)myFrameworkLinkageCombo.getSelectedItem());
  dependencies.getEntries().clear();
  List<MyTableItem> items=myTable.getItems();
  for (  MyTableItem item : items) {
    DependencyEntry entry;
    if (item instanceof BCItem) {
      FlexIdeBCConfigurable configurable=((BCItem)item).configurable;
      if (configurable != null) {
        entry=new BuildConfigurationEntry(configurable.getModule(),configurable.getDisplayName());
      }
 else {
        entry=new BuildConfigurationEntry(myProject,((BCItem)item).moduleName,((BCItem)item).bcName);
      }
      ((BCItem)item).dependencyType.applyTo(entry.getDependencyType());
      dependencies.getEntries().add(entry);
    }
 else     if (item instanceof ModuleLibraryItem) {
      entry=new ModuleLibraryEntry(((ModuleLibraryItem)item).libraryId);
      ((ModuleLibraryItem)item).dependencyType.applyTo(entry.getDependencyType());
      dependencies.getEntries().add(entry);
    }
 else     if (item instanceof SdkItem || item instanceof SdkEntryItem) {
    }
 else {
      throw new IllegalArgumentException("unexpected item type: " + item);
    }
  }
  FlexSdk currentSdk=mySdkPanel.getCurrentSdk();
  if (currentSdk != null) {
    SdkEntry sdkEntry=new SdkEntry(currentSdk.getLibraryId(),currentSdk.getHomePath());
    dependencies.setSdkEntry(sdkEntry);
  }
 else {
    dependencies.setSdkEntry(null);
  }
}
