{
  SdkEntry sdkEntry=myDependencies.getSdkEntry();
  mySdkPanel.reset();
  mySdkPanel.setCurrentSdk(sdkEntry);
  updateAvailableTargetPlayers();
  myTargetPlayerCombo.setSelectedItem(myDependencies.getTargetPlayer());
  updateComponentSetCombo();
  myComponentSetCombo.setSelectedItem(myDependencies.getComponentSet());
  myFrameworkLinkageCombo.setSelectedItem(myDependencies.getFrameworkLinkage());
  DefaultMutableTreeNode root=myTable.getRoot();
  root.removeAllChildren();
  if (sdkEntry != null) {
    FlexSdk flexSdk=myConfigEditor.findSdk(sdkEntry.getLibraryId());
    if (flexSdk != null) {
      DefaultMutableTreeNode sdkNode=new DefaultMutableTreeNode(new SdkItem(flexSdk),true);
      myTable.getRoot().insert(sdkNode,0);
      updateSdkEntries(sdkNode,flexSdk);
    }
  }
  FlexIdeBCConfigurator configurator=FlexIdeModuleStructureExtension.getInstance().getConfigurator();
  for (  DependencyEntry entry : myDependencies.getEntries()) {
    MyTableItem item=null;
    if (entry instanceof BuildConfigurationEntry) {
      final BuildConfigurationEntry bcEntry=(BuildConfigurationEntry)entry;
      Module module=bcEntry.findModule();
      NamedConfigurable<ModifiableFlexIdeBuildConfiguration> configurable=module != null ? ContainerUtil.find(configurator.getBCConfigurables(module),new Condition<NamedConfigurable<ModifiableFlexIdeBuildConfiguration>>(){
        @Override public boolean value(        NamedConfigurable<ModifiableFlexIdeBuildConfiguration> configurable){
          return configurable.getEditableObject().getName().equals(bcEntry.getBcName());
        }
      }
) : null;
      if (configurable == null) {
        item=new BCItem(bcEntry.getModuleName(),bcEntry.getBcName());
      }
 else {
        item=new BCItem(FlexIdeBCConfigurable.unwrapIfNeeded(configurable));
      }
      ((BCItem)item).dependencyType.copyFrom(entry.getDependencyType());
    }
 else     if (entry instanceof ModuleLibraryEntry) {
      ModuleLibraryEntry moduleLibraryEntry=(ModuleLibraryEntry)entry;
      item=new ModuleLibraryItem(moduleLibraryEntry.getLibraryId(),myConfigEditor.findLibraryOrderEntry(myDependencies,moduleLibraryEntry),myProject);
      ((ModuleLibraryItem)item).dependencyType.copyFrom(entry.getDependencyType());
    }
    if (item != null) {
      root.add(new DefaultMutableTreeNode(item,false));
    }
  }
  myTable.refresh();
  updateEditButton();
}
