{
  SdkEntry sdk=myDependencies.getSdk();
  mySdkPanel.reset(sdk != null ? sdk.getCopy() : null);
  myComponentSetCombo.setSelectedItem(myDependencies.COMPONENT_SET);
  myFrameworkLinkageCombo.setSelectedItem(myDependencies.FRAMEWORK_LINKAGE);
  DefaultMutableTreeNode root=myTable.getRoot();
  root.removeAllChildren();
  if (sdk != null) {
    myTable.getRoot().insert(new DefaultMutableTreeNode(new SdkItem(sdk),true),0);
  }
  FlexIdeBCConfigurator configurator=FlexIdeModuleStructureExtension.getInstance().getConfigurator();
  for (  DependencyEntry entry : myDependencies.getEntries()) {
    MyTableItem item=null;
    if (entry instanceof BuildConfigurationEntry) {
      final BuildConfigurationEntry bcEntry=(BuildConfigurationEntry)entry;
      Module module=bcEntry.getModule();
      FlexIdeBCConfigurable configurable=module != null ? ContainerUtil.find(configurator.getBCConfigurables(module),new Condition<FlexIdeBCConfigurable>(){
        @Override public boolean value(        FlexIdeBCConfigurable configurable){
          return configurable.getEditableObject().NAME.equals(bcEntry.getBcName());
        }
      }
) : null;
      if (configurable == null) {
        item=new BCItem(bcEntry.getModuleName(),bcEntry.getBcName());
      }
 else {
        item=new BCItem(configurable);
      }
      entry.getDependencyType().applyTo(((BCItem)item).dependencyType);
    }
 else     if (entry instanceof ModuleLibraryEntry) {
      item=new ModuleLibraryItem(((ModuleLibraryEntry)entry).getCopy());
      entry.getDependencyType().applyTo(((ModuleLibraryItem)item).dependencyType);
    }
    if (item != null) {
      root.add(new DefaultMutableTreeNode(item,false));
    }
  }
  myTable.refresh();
  updateEditButton();
}
