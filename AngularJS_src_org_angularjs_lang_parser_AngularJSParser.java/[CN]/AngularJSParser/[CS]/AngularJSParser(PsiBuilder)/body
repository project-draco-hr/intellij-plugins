{
  super(JavaScriptSupportLoader.JAVASCRIPT_1_5,builder);
  myExpressionParser=new AngularJSExpressionParser();
  myStatementParser=new StatementParser<AngularJSParser>(this){
    @Override protected void doParseStatement(    boolean canHaveClasses){
      final IElementType firstToken=builder.getTokenType();
      if (firstToken == JSTokenTypes.LBRACE) {
        parseExpressionStatement();
        checkForSemicolon();
        return;
      }
      if (isIdentifierToken(firstToken)) {
        final IElementType nextToken=builder.lookAhead(1);
        if (nextToken == JSTokenTypes.EQ) {
          PsiBuilder.Marker marker=builder.mark();
          parseVarDeclaration(false);
          checkForSemicolon();
          marker.done(JSStubElementTypes.VAR_STATEMENT);
          return;
        }
 else         if (nextToken == JSTokenTypes.IN_KEYWORD) {
          parseInStatement();
          return;
        }
      }
      if (builder.getTokenType() == JSTokenTypes.LPAR) {
        if (parseInStatement()) {
          return;
        }
      }
      super.doParseStatement(canHaveClasses);
    }
    private boolean parseInStatement(){
      PsiBuilder.Marker statement=builder.mark();
      if (!getExpressionParser().parseInExpression()) {
        statement.drop();
        return false;
      }
      statement.done(JSElementTypes.EXPRESSION_STATEMENT);
      return true;
    }
  }
;
}
