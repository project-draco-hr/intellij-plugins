{
  PsiLanguageInjectionHost injectionHost=PsiTreeUtil.getParentOfType(psiElement,PsiLanguageInjectionHost.class);
  if (injectionHost != null) {
    visited.add(injectionHost);
    injectionHost.processInjectedPsi(new JSResolveUtil.JSInjectedFilesVisitor(){
      @Override protected void process(      JSFile file){
        Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
        int fileOffsetInHost=InjectedLanguageManager.getInstance(file.getProject()).injectedToHost(file,file.getTextRange().getStartOffset());
        int offsetInInjected=offset - fileOffsetInHost;
        compute(document,element2candidateMap,visited,document.getLineNumber(offsetInInjected),offset);
      }
    }
);
    return;
  }
  JSReferenceExpression expr=PsiTreeUtil.getParentOfType(psiElement,JSReferenceExpression.class);
  if (expr != null) {
    if (!visited.contains(expr)) {
      visited.add(expr);
      PsiElement resolve=expr.resolve();
      if (resolve instanceof JSFunction) {
        JSFunction fun=(JSFunction)resolve;
        PsiElement responsibleElement=expr;
        PsiElement parent=responsibleElement.getParent();
        if (parent instanceof JSDefinitionExpression) {
          responsibleElement=parent.getParent();
        }
 else         if (parent instanceof JSCallExpression)         responsibleElement=parent;
        element2candidateMap.put(responsibleElement,new JSFunctionSmartStepIntoVariant(fun));
      }
    }
  }
}
