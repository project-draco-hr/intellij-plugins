{
  final BidirectionalMap<String,String> result=new BidirectionalMap<String,String>();
  librariesDartFile.acceptChildren(new DartRecursiveVisitor(){
    public void visitMapLiteralEntry(    final @NotNull DartMapLiteralEntry mapLiteralEntry){
      final List<DartExpression> expressions=mapLiteralEntry.getExpressionList();
      if (expressions.size() != 2 || !(expressions.get(0) instanceof DartStringLiteralExpression) || !(expressions.get(1) instanceof DartConstConstructorExpression)) {
        return;
      }
      final DartStringLiteralExpression keyExpression=(DartStringLiteralExpression)expressions.get(0);
      final DartConstConstructorExpression constructorExpression=(DartConstConstructorExpression)expressions.get(1);
      final String libraryName=StringUtil.unquoteString(keyExpression.getText());
      if (libraryName.startsWith("_"))       return;
      final DartType dartType=constructorExpression.getType();
      if (dartType == null || !"LibraryInfo".equals(dartType.getText()))       return;
      final DartArguments arguments=constructorExpression.getArguments();
      final DartArgumentList argumentList=arguments != null ? arguments.getArgumentList() : null;
      final List<DartExpression> expressionList=argumentList != null ? argumentList.getExpressionList() : null;
      final DartExpression firstExpression=expressionList == null || expressionList.isEmpty() ? null : expressionList.get(0);
      final String libraryRelativePath=firstExpression instanceof DartStringLiteralExpression ? StringUtil.unquoteString(firstExpression.getText()) : null;
      if (libraryRelativePath != null) {
        result.put(libraryName,libraryRelativePath);
      }
    }
  }
);
  return result;
}
