{
  final PsiElementPattern.Capture<PsiElement> idInComponentName=psiElement().withSuperParent(1,DartId.class).withSuperParent(2,DartComponentName.class);
  final PatternCondition<PsiElement> notAfterDartType=new PatternCondition<PsiElement>("not after DartType"){
    public boolean accepts(    @NotNull final PsiElement element,    final ProcessingContext context){
      final PsiElement prev=UsefulPsiTreeUtil.getPrevSiblingSkipWhiteSpacesAndComments(element.getParent().getParent(),true);
      return prev == null || !(prev instanceof DartType) && prev.getNode().getElementType() != DartTokenTypes.VAR;
    }
  }
;
  final ElementPattern<PsiElement> pattern=or(idInComponentName.withSuperParent(4,DartNormalFormalParameter.class).with(notAfterDartType),idInComponentName.withSuperParent(3,DartVarAccessDeclaration.class).with(notAfterDartType));
  extend(CompletionType.BASIC,pattern,new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final Set<DartComponentName> suggestedVariants=new THashSet<DartComponentName>();
      DartResolveUtil.treeWalkUpAndTopLevelDeclarations(parameters.getPosition(),new ClassNameScopeProcessor(suggestedVariants));
      final Set<String> addedNames=DartLookupElement.appendVariantsToCompletionSet(result,suggestedVariants,false);
      if (parameters.getInvocationCount() > 1) {
        DartGlobalVariantsCompletionHelper.addAdditionalGlobalVariants(result,parameters.getPosition(),addedNames,new Condition<DartComponentInfo>(){
          @Override public boolean value(          DartComponentInfo info){
            return info.getType() == DartComponentType.CLASS;
          }
        }
);
      }
    }
  }
);
}
