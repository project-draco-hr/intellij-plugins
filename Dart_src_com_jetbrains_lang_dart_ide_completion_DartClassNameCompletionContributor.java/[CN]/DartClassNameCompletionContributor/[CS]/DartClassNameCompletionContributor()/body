{
  final PsiElementPattern.Capture<PsiElement> idInComponentName=psiElement().withSuperParent(1,DartId.class).withSuperParent(2,DartComponentName.class);
  final ElementPattern<PsiElement> pattern=or(idInComponentName.withSuperParent(4,DartNormalFormalParameter.class),idInComponentName.withSuperParent(3,DartVarAccessDeclaration.class).with(new PatternCondition<PsiElement>("not after DartType"){
    public boolean accepts(    @NotNull final PsiElement element,    final ProcessingContext context){
      return !(UsefulPsiTreeUtil.getPrevSiblingSkipWhiteSpacesAndComments(element.getParent().getParent(),true) instanceof DartType);
    }
  }
));
  extend(CompletionType.BASIC,pattern,new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final Set<DartComponentName> suggestedVariants=new THashSet<DartComponentName>();
      DartResolveUtil.treeWalkUpAndTopLevelDeclarations(parameters.getPosition(),new ClassNameScopeProcessor(suggestedVariants));
      for (      DartComponentName variant : suggestedVariants) {
        result.addElement(LookupElementBuilder.create(variant));
      }
      if (parameters.getInvocationCount() > 1) {
        DartGlobalVariantsCompletionHelper.addAdditionalGlobalVariants(result,parameters.getPosition(),suggestedVariants,new Condition<DartComponentInfo>(){
          @Override public boolean value(          DartComponentInfo info){
            return info.getType() == DartComponentType.CLASS;
          }
        }
);
      }
    }
  }
);
}
