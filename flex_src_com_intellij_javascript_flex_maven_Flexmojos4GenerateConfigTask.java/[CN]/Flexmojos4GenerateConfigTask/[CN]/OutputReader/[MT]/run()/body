{
  final StringBuilder stringBuilder=StringBuilderSpinAllocator.alloc();
  int exitCode=-1;
  @SuppressWarnings("IOResourceOpenedButNotSafelyClosed") final InputStreamReader reader=new InputStreamReader(process.getInputStream());
  final List<String> filesForRefresh=new ArrayList<>(projects.size());
  final THashMap<MavenProject,List<String>> sourceRoots=new THashMap<>(projects.size());
  try {
    char[] buf=new char[8196];
    int read;
    final Matcher matcher=RESULT_PATTERN.matcher(stringBuilder);
    int startForResultParse=0;
    while ((read=reader.read(buf,0,buf.length)) >= 0) {
      stringBuilder.append(buf,0,read);
      if (indicator.isCanceled()) {
        process.destroy();
      }
      while (matcher.find(startForResultParse)) {
        MavenProject mavenProject=projects.get(Integer.parseInt(matcher.group(1)));
        indicator.setText2(mavenProject.getDisplayName());
        filesForRefresh.add(matcher.group(2));
        StringTokenizer tokenizer=new StringTokenizer(matcher.group(3),"|");
        List<String> moduleSourcesRoots=new ArrayList<>();
        while (tokenizer.hasMoreTokens()) {
          moduleSourcesRoots.add(tokenizer.nextToken());
        }
        sourceRoots.put(mavenProject,moduleSourcesRoots);
        startForResultParse=matcher.end();
      }
    }
    try {
      process.waitFor();
    }
 catch (    InterruptedException ignored) {
    }
    exitCode=process.exitValue();
  }
 catch (  IOException e) {
    LOG.warn(stringBuilder.toString(),e);
  }
 finally {
    process.destroy();
    process=null;
    final String result=stringBuilder.toString().replace('\r','\n');
    StringBuilderSpinAllocator.dispose(stringBuilder);
    if (exitCode != 0) {
      LOG.warn("Generating flex configs exited with exit code " + exitCode);
      showWarning(project,"exit code: " + exitCode);
    }
    LOG.info("Generating flex configs out:\n" + result);
    if (result.startsWith(ERROR) || result.contains("\n" + ERROR)) {
      final StringBuilder errorBuf=new StringBuilder();
      final List<String> lines=StringUtil.split(result,"\n");
      for (      String line : lines) {
        if (line.startsWith(ERROR)) {
          if (errorBuf.length() > 0)           errorBuf.append("\n");
          errorBuf.append(line);
        }
      }
      showWarningWithDetails(project,errorBuf.toString());
    }
    if (!filesForRefresh.isEmpty()) {
      postTask=new RefreshConfigFiles(filesForRefresh,sourceRoots,project);
    }
  }
}
