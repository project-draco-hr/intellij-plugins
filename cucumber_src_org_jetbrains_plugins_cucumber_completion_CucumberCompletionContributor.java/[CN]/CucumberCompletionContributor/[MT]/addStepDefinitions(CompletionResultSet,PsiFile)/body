{
  result=result.withPrefixMatcher(new PlainPrefixMatcher(result.getPrefixMatcher().getPrefix()));
  final List<AbstractStepDefinition> definitions=CucumberStepsIndex.getInstance(file.getProject()).getAllStepDefinitions(file);
  for (  AbstractStepDefinition definition : definitions) {
    String text=definition.getCucumberRegex();
    if (text != null) {
      if (text.startsWith("^")) {
        text=text.substring(1);
      }
      if (text.endsWith("$")) {
        text=text.substring(0,text.length() - 1);
      }
      text=StringUtil.replace(text,"\\\"","\"");
      for (      Map.Entry<String,String> group : GROUP_TYPE_MAP.entrySet()) {
        text=StringUtil.replace(text,group.getKey(),group.getValue());
      }
      final List<TextRange> ranges=new ArrayList<TextRange>();
      Matcher m=POSSIBLE_GROUP_PATTERN.matcher(text);
      while (m.find()) {
        ranges.add(new TextRange(m.start(),m.end() - 3));
        text=m.replaceAll("$2");
      }
      m=QUESTION_MARK_PATTERN.matcher(text);
      if (m.find()) {
        text=m.replaceAll("$1");
      }
      m=PARAMETERS_PATTERN.matcher(text);
      while (m.find()) {
        ranges.add(new TextRange(m.start(),m.end()));
      }
      final PsiElement element=definition.getElement();
      final LookupElementBuilder lookup=element != null ? LookupElementBuilder.create(element,text).bold() : LookupElementBuilder.create(text);
      result.addElement(lookup.withInsertHandler(new StepInsertHandler(ranges)));
    }
  }
}
