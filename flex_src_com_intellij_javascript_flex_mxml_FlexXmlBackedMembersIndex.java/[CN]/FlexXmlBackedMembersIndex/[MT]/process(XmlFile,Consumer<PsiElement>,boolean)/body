{
  visitScriptTagInjectedFilesForIndexing(file,new JSResolveUtil.JSInjectedFilesVisitor(){
    @Override protected void process(    JSFile file){
      ResolveState state=ResolveState.initial().put(XmlBackedJSClass.PROCESS_XML_BACKED_CLASS_MEMBERS_HINT,Boolean.TRUE);
      file.processDeclarations(new ResolveProcessor(null){
{
          setSkipImplicitDeclarations(true);
        }
        @Override public boolean execute(        @NotNull PsiElement element,        ResolveState state){
          if (element instanceof JSFunction) {
            consumer.consume(element);
          }
 else           if (element instanceof JSVariable) {
            consumer.consume(element);
          }
          return true;
        }
        @Override public <T>T getHint(        @NotNull Key<T> hintKey){
          return null;
        }
        @Override public void handleEvent(        Event event,        Object associated){
        }
      }
,state,null,file);
    }
  }
,isPhysical);
  file.accept(new PsiRecursiveElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (element instanceof XmlTag) {
        XmlTag tag=(XmlTag)element;
        if (tag.getAttributeValue("id") != null && XmlBackedJSClassImpl.canBeReferencedById(tag)) {
          consumer.consume(tag);
        }
      }
      super.visitElement(element);
    }
  }
);
}
