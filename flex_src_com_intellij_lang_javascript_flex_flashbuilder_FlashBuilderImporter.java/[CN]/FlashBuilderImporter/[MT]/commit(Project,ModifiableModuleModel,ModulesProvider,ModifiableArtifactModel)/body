{
  FlexModuleBuilder.setupResourceFilePatterns(project);
  final ModifiableModuleModel moduleModel=model != null ? model : ModuleManager.getInstance(project).getModifiableModel();
  final Collection<FlashBuilderProject> flashBuilderProjects=FlashBuilderProjectLoadUtil.loadProjects(getList());
  final ModuleType moduleType=PlatformUtils.isFlexIde() ? FlexModuleType.getInstance() : StdModuleTypes.JAVA;
  final Map<FlashBuilderProject,ModifiableRootModel> flashBuilderProjectToModifiableModelMap=new THashMap<FlashBuilderProject,ModifiableRootModel>();
  final Map<Module,ModifiableRootModel> moduleToModifiableModelMap=new THashMap<Module,ModifiableRootModel>();
  final Set<String> moduleNames=new THashSet<String>(flashBuilderProjects.size());
  for (  FlashBuilderProject flashBuilderProject : flashBuilderProjects) {
    final String moduleName=makeUnique(flashBuilderProject.getName(),moduleNames);
    moduleNames.add(moduleName);
    final String moduleFilePath=flashBuilderProject.getProjectRootPath() + "/" + moduleName+ ModuleFileType.DOT_DEFAULT_EXTENSION;
    if (LocalFileSystem.getInstance().findFileByPath(moduleFilePath) != null) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          ModuleBuilder.deleteModuleFile(moduleFilePath);
        }
      }
);
    }
    final Module module=moduleModel.newModule(moduleFilePath,moduleType);
    final ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
    flashBuilderProjectToModifiableModelMap.put(flashBuilderProject,rootModel);
    moduleToModifiableModelMap.put(module,rootModel);
  }
  final FlexProjectConfigurationEditor currentFlexEditor=PlatformUtils.isFlexIde() ? FlexIdeBuildConfigurationsExtension.getInstance().getConfigurator().getConfigEditor() : null;
  final boolean needToCommitFlexEditor=PlatformUtils.isFlexIde() && currentFlexEditor == null;
  final LibraryTableBase.ModifiableModelEx globalLibrariesModifiableModel;
  final FlexProjectConfigurationEditor flexConfigEditor;
  if (!PlatformUtils.isFlexIde()) {
    globalLibrariesModifiableModel=null;
    flexConfigEditor=null;
  }
 else   if (currentFlexEditor != null) {
    globalLibrariesModifiableModel=null;
    flexConfigEditor=currentFlexEditor;
  }
 else {
    globalLibrariesModifiableModel=(LibraryTableBase.ModifiableModelEx)ApplicationLibraryTable.getApplicationTable().getModifiableModel();
    flexConfigEditor=createFlexConfigEditor(project,moduleToModifiableModelMap,globalLibrariesModifiableModel);
  }
  final FlashBuilderSdkFinder sdkFinder=new FlashBuilderSdkFinder(project,flexConfigEditor,getParameters().initiallySelectedDirPath,flashBuilderProjects);
  final FlashBuilderModuleImporter flashBuilderModuleImporter=new FlashBuilderModuleImporter(project,flexConfigEditor,flashBuilderProjects,sdkFinder);
  for (  final FlashBuilderProject flashBuilderProject : flashBuilderProjects) {
    flashBuilderModuleImporter.setupModule(flashBuilderProjectToModifiableModelMap.get(flashBuilderProject),flashBuilderProject);
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      if (PlatformUtils.isFlexIde()) {
        if (globalLibrariesModifiableModel != null) {
          globalLibrariesModifiableModel.commit();
        }
        if (needToCommitFlexEditor) {
          try {
            flexConfigEditor.commit();
          }
 catch (          ConfigurationException e) {
            Logger.getInstance(FlashBuilderImporter.class).error(e);
          }
        }
      }
      final Collection<ModifiableRootModel> rootModels=moduleToModifiableModelMap.values();
      ProjectRootManager.getInstance(project).multiCommit(moduleModel,rootModels.toArray(new ModifiableRootModel[rootModels.size()]));
    }
  }
);
  return new ArrayList<Module>(moduleToModifiableModelMap.keySet());
}
