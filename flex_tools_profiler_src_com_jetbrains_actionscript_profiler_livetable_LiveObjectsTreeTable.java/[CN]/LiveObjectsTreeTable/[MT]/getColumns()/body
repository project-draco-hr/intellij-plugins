{
  final ColumnInfo qnameColumn=new ColumnInfo("Class"){
    @Override public Class getColumnClass(){
      return TreeTableModel.class;
    }
    @Override public Object valueOf(    final Object o){
      return o;
    }
    @Override public Comparator<DefaultMutableTreeNode> getComparator(){
      return new AbstractSizeNodeComparator(){
        @Override protected int compareInfo(        SizeInfoNode si1,        SizeInfoNode si2){
          if (si1.isMethod() && si2.isMethod()) {
            return si1.getFrameInfo().compareTo(si2.getFrameInfo());
          }
          int result=si1.getClassName().compareTo(si2.getClassName());
          if (result != 0) {
            return result;
          }
          return si1.getPackageName().compareTo(si2.getPackageName());
        }
      }
;
    }
  }
;
  final ColumnInfo countColumn=new AbstractSizeColumnInfo("Count"){
    @Override protected String extractValueFromSizeInfoNode(    SizeInfoNode value){
      return Integer.toString(value.getCount());
    }
    @Override public Comparator<DefaultMutableTreeNode> getComparator(){
      return new AbstractSizeNodeComparator(){
        @Override protected int compareInfo(        SizeInfoNode si1,        SizeInfoNode si2){
          return (int)Math.signum(si2.getCount() - si1.getCount());
        }
      }
;
    }
  }
;
  final ColumnInfo sizeColumn=new AbstractSizeColumnInfo("Size, bytes"){
    @Override protected String extractValueFromSizeInfoNode(    SizeInfoNode value){
      return NumberFormat.getInstance().format(value.getSize());
    }
    @Override public Comparator<DefaultMutableTreeNode> getComparator(){
      return new AbstractSizeNodeComparator(){
        @Override protected int compareInfo(        SizeInfoNode si1,        SizeInfoNode si2){
          return (int)Math.signum(si2.getSize() - si1.getSize());
        }
      }
;
    }
  }
;
  return new ColumnInfo[]{qnameColumn,countColumn,sizeColumn};
}
