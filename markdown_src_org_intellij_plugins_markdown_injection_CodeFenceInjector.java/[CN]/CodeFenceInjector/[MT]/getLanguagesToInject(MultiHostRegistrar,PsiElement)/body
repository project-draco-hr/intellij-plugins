{
  if (!(context instanceof MarkdownCodeFenceImpl)) {
    return;
  }
  if (PsiTreeUtil.findChildOfType(context,MarkdownCodeFenceContentImpl.class) == null) {
    return;
  }
  final Language language=findLangForInjection(((MarkdownCodeFenceImpl)context));
  if (language == null || LanguageParserDefinitions.INSTANCE.forLanguage(language) == null) {
    return;
  }
  registrar.startInjecting(language);
  final List<MarkdownCodeFenceContentImpl> list=PsiTreeUtil.getChildrenOfTypeAsList(context,MarkdownCodeFenceContentImpl.class);
  for (int i=0; i < list.size(); i++) {
    final MarkdownCodeFenceContentImpl content=list.get(i);
    final boolean includeEol=(i + 1 < list.size());
    final TextRange rangeInHost=TextRange.from(content.getStartOffsetInParent(),content.getTextLength() + (includeEol ? 1 : 0));
    registrar.addPlace(null,null,((MarkdownCodeFenceImpl)context),rangeInHost);
  }
  registrar.doneInjecting();
}
