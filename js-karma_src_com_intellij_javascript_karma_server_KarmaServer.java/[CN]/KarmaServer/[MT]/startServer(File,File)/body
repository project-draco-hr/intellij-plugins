{
  GeneralCommandLine commandLine=new GeneralCommandLine();
  commandLine.setPassParentEnvironment(true);
  commandLine.setWorkDirectory(configurationFile.getParentFile());
  commandLine.setExePath(nodeInterpreter.getAbsolutePath());
  File serverFile=myKarmaJsSourcesLocator.getServerAppFile();
  commandLine.addParameter(serverFile.getAbsolutePath());
  commandLine.addParameter("--karmaPackageDir=" + myKarmaJsSourcesLocator.getKarmaPackageDir().getAbsolutePath());
  commandLine.addParameter("--configFile=" + configurationFile.getAbsolutePath());
  commandLine.addParameter("--coverageTempDir=" + myCoveragePeer.getCoverageTempDir());
  LOG.info("Starting karma server: " + commandLine.getCommandLineString());
  final Process process;
  try {
    process=commandLine.createProcess();
  }
 catch (  ExecutionException e) {
    throw new IOException("Can not launch process " + commandLine.getCommandLineString() + "\"",e);
  }
  KillableColoredProcessHandler processHandler=new KillableColoredProcessHandler(process,commandLine.getCommandLineString(),CharsetToolkit.UTF8_CHARSET);
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      FileUtil.asyncDelete(myCoveragePeer.getCoverageTempDir());
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          myDoListWhenReady.clear();
          myDoListWhenReadyWithCapturedBrowser.clear();
          fireOnTerminated(event.getExitCode());
        }
      }
);
    }
  }
);
  processHandler.addProcessListener(myState);
  ProcessTerminatedListener.attach(processHandler);
  processHandler.setShouldDestroyProcessRecursively(true);
  return processHandler;
}
