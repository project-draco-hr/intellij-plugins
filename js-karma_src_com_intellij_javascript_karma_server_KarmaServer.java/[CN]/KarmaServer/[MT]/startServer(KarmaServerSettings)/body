{
  GeneralCommandLine commandLine=new GeneralCommandLine();
  KarmaRunSettings runSettings=serverSettings.getRunSettings();
  runSettings.getEnvData().configureCommandLine(commandLine,true);
  commandLine.withWorkDirectory(serverSettings.getConfigurationFile().getParentFile());
  commandLine.setExePath(serverSettings.getNodeInterpreter().getInterpreterSystemDependentPath());
  File serverFile=myKarmaJsSourcesLocator.getServerAppFile();
  commandLine.addParameter(serverFile.getAbsolutePath());
  commandLine.addParameter("--karmaPackageDir=" + myKarmaJsSourcesLocator.getKarmaPackageDir().getAbsolutePath());
  commandLine.addParameter("--configFile=" + serverSettings.getConfigurationFilePath());
  String browsers=serverSettings.getRunSettings().getBrowsers();
  if (!StringUtil.isEmptyOrSpaces(browsers)) {
    commandLine.addParameter("--browsers=" + browsers);
  }
  if (myCoveragePeer != null) {
    commandLine.addParameter("--coverageTempDir=" + myCoveragePeer.getCoverageTempDir());
  }
  commandLine.setCharset(CharsetToolkit.UTF8_CHARSET);
  KillableColoredProcessHandler processHandler;
  try {
    processHandler=new KillableColoredProcessHandler(commandLine);
  }
 catch (  ExecutionException e) {
    throw new IOException("Can not start Karma server: " + commandLine.getCommandLineString(),e);
  }
  final int processHashCode=System.identityHashCode(processHandler.getProcess());
  LOG.info("Karma server " + processHashCode + " started successfully: "+ commandLine.getCommandLineString());
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      LOG.info("Karma server " + processHashCode + " terminated with exit code "+ event.getExitCode());
      Disposer.dispose(myDisposable);
      fireOnTerminated(event.getExitCode());
    }
  }
);
  ProcessTerminatedListener.attach(processHandler);
  processHandler.setShouldDestroyProcessRecursively(true);
  return processHandler;
}
