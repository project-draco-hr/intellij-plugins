{
  myCoverageTempDir=FileUtil.createTempDirectory("karma-intellij-coverage-",null);
  myConfigurationFile=configurationFile;
  myKarmaJsSourcesLocator=new KarmaJsSourcesLocator(karmaPackageDir);
  myState=new KarmaServerState(this);
  final KillableColoredProcessHandler processHandler;
  try {
    processHandler=startServer(nodeInterpreter,configurationFile);
  }
 catch (  ExecutionException e) {
    throw new IOException("Can not create karma server process",e);
  }
  myProcessOutputArchive=new ProcessOutputArchive(processHandler);
  registerStreamEventHandler(new StreamEventHandler(){
    @NotNull @Override public String getEventType(){
      return "coverageFinished";
    }
    @Override public void handle(    @NotNull JsonElement eventBody){
      KarmaCoverageSession coverageSession=myActiveCoverageSession;
      myActiveCoverageSession=null;
      if (coverageSession != null) {
        String path=GsonUtil.asString(eventBody);
        coverageSession.onCoverageSessionFinished(new File(path));
      }
    }
  }
);
  registerStreamEventHandler(new StreamEventHandler(){
    @NotNull @Override public String getEventType(){
      return "configFile";
    }
    @Override public void handle(    @NotNull JsonElement eventBody){
      myKarmaConfig=KarmaConfig.parseFromJson(eventBody);
    }
  }
);
  myProcessOutputArchive.addStreamEventListener(new StreamEventListener(){
    @Override public void on(    @NotNull String eventType,    @NotNull String eventBody){
      JsonElement jsonElement;
      try {
        JsonParser jsonParser=new JsonParser();
        jsonElement=jsonParser.parse(eventBody);
      }
 catch (      Exception e) {
        LOG.warn("Cannot parse message from karma server:" + " (eventType: " + eventType + ", eventBody: "+ eventBody+ ")");
        return;
      }
      StreamEventHandler handler=myHandlers.get(eventType);
      if (handler != null) {
        handler.handle(jsonElement);
      }
 else {
        LOG.warn("Cannot find handler for " + eventType);
      }
    }
  }
);
  myProcessOutputArchive.startNotify();
  Disposer.register(ApplicationManager.getApplication(),new Disposable(){
    @Override public void dispose(){
      if (!processHandler.isProcessTerminated()) {
        ScriptRunnerUtil.terminateProcessHandler(processHandler,500,null);
      }
    }
  }
);
}
