{
  super(file,project);
  setupUI();
  controller=file.getUserData(ProfileData.CONTROLLER);
  profilingManager=file.getUserData(ProfileData.PROFILING_MANAGER);
  if (controller == null || profilingManager == null) {
    return;
  }
  updateTimer=new Timer(2000,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (!liveUpdatesCheckBox.isSelected() || DumbServiceImpl.getInstance(getProject()).isDumb()) {
        return;
      }
      final List<TreePath> paths=TreeUtil.collectExpandedPaths(liveObjectsTreeTable.getTree());
      final TreePath selectionPath=liveObjectsTreeTable.getTree().getSelectionPath();
      controller.updateScope(getCurrentScope());
      controller.apply(liveObjectsTreeTable.getSortableTreeTableModel());
      liveObjectsTreeTable.reload();
      TreeUtil.restoreExpandedPaths(liveObjectsTreeTable.getTree(),paths);
      liveObjectsTreeTable.getTree().setSelectionPath(selectionPath);
      myAllocatedMemory.setText(ProfilerBundle.message("allocated.memory.size",controller.getAllocatedMemorySize()));
    }
  }
);
  updateTimer.setInitialDelay(1000);
  updateTimer.setRepeats(true);
  updateTimer.start();
  liveUpdatesCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (liveUpdatesCheckBox.isSelected()) {
        updateTimer.stop();
        updateTimer.setInitialDelay(0);
        updateTimer.start();
      }
    }
  }
);
  liveObjectsTreeTable.setFrameLocationResolveFunction(new Function<FrameInfo,Navigatable>(){
    @Override public Navigatable fun(    FrameInfo frameInfo){
      return new SampleLocationResolver(frameInfo,new ProjectAndLibrariesScope(getProject()));
    }
  }
);
  liveObjectsTreeTable.setClassNameLocationResolveFunction(new Function<String,Navigatable>(){
    @Nullable @Override public Navigatable fun(    String s){
      PsiElement element=ResolveUtil.findClassByQName(s,getCurrentScope());
      if (element instanceof JSClass) {
        return element.getNavigationElement().getContainingFile();
      }
      return null;
    }
  }
);
  liveObjectsTreeTable.getTree().setShowsRootHandles(true);
  profilingManager.startCollectingLiveObjects(new ProfilingManager.Callback(){
    @Override public void finished(    @Nullable String data,    @Nullable IOException ex){
      if (ex != null) {
        LOG.warn(ex);
      }
    }
  }
);
}
