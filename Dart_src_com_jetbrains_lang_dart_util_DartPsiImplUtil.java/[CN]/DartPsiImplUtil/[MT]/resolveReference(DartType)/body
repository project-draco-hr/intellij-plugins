{
  final DartExpression expression=dartType.getReferenceExpression();
  final String typeName=expression.getText();
  if (typeName.indexOf('.') != -1) {
    return expression instanceof DartReference ? ((DartReference)expression).resolve() : null;
  }
  List<DartComponentName> result=new ArrayList<DartComponentName>();
  final ResolveScopeProcessor resolveScopeProcessor=new ResolveScopeProcessor(result,typeName);
  final VirtualFile virtualFile=DartResolveUtil.getRealVirtualFile(dartType.getContainingFile());
  if (virtualFile != null) {
    DartResolveUtil.processTopLevelDeclarations(dartType,resolveScopeProcessor,virtualFile,typeName);
  }
  if (result.isEmpty()) {
    PsiTreeUtil.treeWalkUp(resolveScopeProcessor,dartType,null,new ResolveState());
    for (Iterator<DartComponentName> iterator=result.iterator(); iterator.hasNext(); ) {
      if (!(iterator.next().getParent() instanceof DartTypeParameter)) {
        iterator.remove();
      }
    }
  }
  if (result.isEmpty()) {
    final List<VirtualFile> libraryFile=DartResolveUtil.findLibrary(dartType.getContainingFile());
    DartResolveUtil.processTopLevelDeclarations(dartType,resolveScopeProcessor,libraryFile,typeName);
  }
  if (result.isEmpty()) {
    final List<VirtualFile> libraryFile=DartLibraryIndex.findLibraryClass(dartType,"dart:core");
    DartResolveUtil.processTopLevelDeclarations(dartType,resolveScopeProcessor,libraryFile,typeName);
  }
  return result.isEmpty() ? null : result.iterator().next();
}
