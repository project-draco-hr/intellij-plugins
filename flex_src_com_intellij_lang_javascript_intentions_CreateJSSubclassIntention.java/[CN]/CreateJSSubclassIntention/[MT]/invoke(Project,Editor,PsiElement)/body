{
  final JSClass jsClass=PsiTreeUtil.getParentOfType(element,JSClass.class);
  if (jsClass == null)   return;
  final PsiElement parent=jsClass.getParent();
  if (!(parent instanceof JSPackageStatement))   return;
  final JSPackageStatement jsPackageStatement=(JSPackageStatement)parent;
  final String defaultTemplateName=JavaScriptSupportLoader.ACTION_SCRIPT_CLASS_TEMPLATE_NAME;
  final String className;
  final String packageName;
  final String templateName;
  final PsiDirectory targetDirectory;
  final Collection<String> interfaces;
  final Map<String,Object> templateAttributes;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    className=suggestSubclassName(jsClass.getName());
    packageName="foo";
    templateName=defaultTemplateName;
    targetDirectory=ApplicationManager.getApplication().runWriteAction(new Computable<PsiDirectory>(){
      @Override public PsiDirectory compute(){
        return CreateClassOrInterfaceFix.findOrCreateDirectory(packageName,jsPackageStatement);
      }
    }
);
    interfaces=jsClass.isInterface() ? Collections.singletonList(jsClass.getQualifiedName()) : Collections.<String>emptyList();
    templateAttributes=Collections.emptyMap();
  }
 else {
    CreateClassParameters p=CreateClassOrInterfaceFix.createAndShow(defaultTemplateName,jsClass,suggestSubclassName(jsClass.getName()),true,jsPackageStatement.getQualifiedName(),jsClass,JSBundle.message("new.actionscript.class.dialog.title"),new Computable<List<FileTemplate>>(){
      @Override public List<FileTemplate> compute(){
        return CreateClassOrInterfaceFix.getApplicableTemplates(CreateClassOrInterfaceFix.ACTIONSCRIPT_TEMPLATES_EXTENSIONS);
      }
    }
);
    if (p == null)     return;
    className=p.getClassName();
    packageName=p.getPackageName();
    templateName=p.getTemplateName();
    targetDirectory=p.getTargetDirectory();
    interfaces=p.getInterfacesFqns();
    templateAttributes=new HashMap<String,Object>(p.getTemplateAttributes());
  }
  JSClass createdClass=CreateClassOrInterfaceFix.createClass(templateName,className,packageName,jsClass.isInterface() ? null : jsClass,interfaces,targetDirectory,getTitle(jsClass),true,templateAttributes,new Consumer<JSClass>(){
    @Override public void consume(    final JSClass aClass){
      if (aClass != null && !aClass.isInterface() && (jsClass.isInterface() || !interfaces.isEmpty())) {
        new MyImplementMethodsHandler(aClass).execute();
      }
    }
  }
);
  if (createdClass != null) {
    createdClass.navigate(true);
  }
}
