{
  final JSClass jsClass=PsiTreeUtil.getParentOfType(element,JSClass.class);
  if (jsClass == null)   return;
  final PsiElement parent=jsClass.getParent();
  if (!(parent instanceof JSPackageStatement))   return;
  final JSPackageStatement jsPackageStatement=(JSPackageStatement)parent;
  final String defaultTemplateName=JavaScriptSupportLoader.ACTION_SCRIPT_CLASS_TEMPLATE_NAME;
  final String className;
  final String packageName;
  final String templateName;
  final PsiDirectory targetDirectory;
  final Collection<String> interfaces;
  final Map<String,String> templateAttributes;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    className=suggestSubclassName(jsClass.getName());
    packageName="foo";
    templateName=defaultTemplateName;
    targetDirectory=ApplicationManager.getApplication().runWriteAction(new Computable<PsiDirectory>(){
      @Override public PsiDirectory compute(){
        return CreateClassOrInterfaceAction.findOrCreateDirectory(packageName,jsPackageStatement);
      }
    }
);
    interfaces=jsClass.isInterface() ? Collections.singletonList(jsClass.getQualifiedName()) : Collections.<String>emptyList();
    templateAttributes=Collections.emptyMap();
  }
 else {
    final WizardModel model=new WizardModel(jsClass,true);
    MainStep mainStep=new MainStep(model,project,suggestSubclassName(jsClass.getName()),true,jsPackageStatement.getQualifiedName(),jsClass,false,defaultTemplateName,jsClass,JSBundle.message("choose.super.class.title"));
    CustomVariablesStep customVariablesStep=new CustomVariablesStep(model);
    CreateFlashClassWizard w=new CreateFlashClassWizard(JSBundle.message("new.actionscript.class.dialog.title"),project,model,mainStep,customVariablesStep);
    w.show();
    if (w.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
      return;
    }
    className=model.getClassName();
    packageName=model.getPackageName();
    templateName=model.getTemplateName();
    targetDirectory=model.getTargetDirectory();
    interfaces=model.getInterfacesFqns();
    templateAttributes=model.getTemplateAttributes();
  }
  JSClass createdClass=CreateClassOrInterfaceAction.createClass(templateName,className,packageName,jsClass.isInterface() ? null : jsClass,interfaces,targetDirectory,getTitle(jsClass),true,templateAttributes,new Consumer<JSClass>(){
    @Override public void consume(    final JSClass aClass){
      if (aClass != null && !aClass.isInterface() && (jsClass.isInterface() || !interfaces.isEmpty())) {
        new MyImplementMethodsHandler(aClass).execute();
      }
    }
  }
);
  if (createdClass != null) {
    createdClass.navigate(true);
  }
}
