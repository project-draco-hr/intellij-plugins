{
  String includeResourceHeader=props.get(Constants.INCLUDE_RESOURCE);
  if (StringUtil.isEmpty(includeResourceHeader)) {
    return;
  }
  Map<String,Map<String,String>> map=OSGiHeader.parseHeader(includeResourceHeader);
  StringBuilder sanitizedHeader=new StringBuilder();
  for (Iterator<String> iterator=map.keySet().iterator(); iterator.hasNext(); ) {
    String name=iterator.next();
    String prefix="";
    String suffix="";
    if (StringUtil.startsWithChar(name,'{') && name.endsWith("}")) {
      name=name.substring(1,name.length() - 1).trim();
      prefix="{" + prefix;
      suffix+="}";
    }
    String[] parts=name.split("\\s*=\\s*");
    String source=parts[0];
    String target="";
    if (parts.length == 2) {
      source=parts[1];
      target=parts[0];
    }
    if (StringUtil.startsWithChar(source,'@')) {
      source=source.substring(1);
      prefix+="@";
    }
    String sanitizedSource=source.replace('\\','/');
    String sanitizedTarget=target.replace('\\','/');
    VirtualFile relativeFile=VfsUtil.findRelativeFile(project.getDirectoryFile(),sanitizedSource.split("/"));
    if (relativeFile != null) {
      sanitizedSource=relativeFile.getPath();
    }
    sanitizedHeader.append(prefix);
    if (!StringUtil.isEmpty(sanitizedTarget)) {
      sanitizedHeader.append(sanitizedTarget).append("=");
    }
    sanitizedHeader.append(sanitizedSource);
    sanitizedHeader.append(suffix);
    if (iterator.hasNext()) {
      sanitizedHeader.append(",");
    }
  }
  props.put(Constants.INCLUDE_RESOURCE,sanitizedHeader.toString());
}
