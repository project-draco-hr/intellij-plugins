{
  toolWindowForm=new MxmlPreviewToolWindowForm(project,this);
  String toolWindowId=FlashUIDesignerBundle.message("mxml.preview.tool.window.title");
  toolWindow=ToolWindowManager.getInstance(project).registerToolWindow(toolWindowId,false,ToolWindowAnchor.RIGHT,project,false);
  toolWindow.setIcon(PlatformIcons.UI_FORM_ICON);
  PropertiesComponent propertiesComponent=PropertiesComponent.getInstance(project);
  toolWindowVisible=propertiesComponent.getBoolean(SETTINGS_TOOL_WINDOW_VISIBLE,false);
  if (toolWindowVisible) {
    toolWindow.show(null);
  }
 else {
    toolWindow.hide(null);
  }
  ((ToolWindowManagerEx)ToolWindowManager.getInstance(project)).addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    @Override public void stateChanged(){
      if (project.isDisposed() || toolWindow == null || !toolWindow.isAvailable()) {
        return;
      }
      final boolean currentVisible=toolWindow.isVisible();
      if (currentVisible == toolWindowVisible) {
        return;
      }
      toolWindowVisible=currentVisible;
      PropertiesComponent propertiesComponent=PropertiesComponent.getInstance(project);
      if (currentVisible) {
        propertiesComponent.setValue(SETTINGS_TOOL_WINDOW_VISIBLE,"true");
        if (!lastPreviewChecked) {
          lastPreviewChecked=true;
          if (checkLastImage()) {
            return;
          }
        }
        render();
      }
 else {
        propertiesComponent.unsetValue(SETTINGS_TOOL_WINDOW_VISIBLE);
      }
    }
  }
);
  JPanel contentPanel=toolWindowForm.getContentPanel();
  ContentManager contentManager=toolWindow.getContentManager();
  Content content=contentManager.getFactory().createContent(contentPanel,null,false);
  content.setCloseable(false);
  content.setPreferredFocusableComponent(contentPanel);
  contentManager.addContent(content);
  contentManager.setSelectedContent(content,true);
  MessageBusConnection connection=ApplicationManager.getApplication().getMessageBus().connect(project);
  connection.subscribe(DesignerApplicationManager.MESSAGE_TOPIC,new DesignerApplicationManager.DocumentRenderedListener(){
    private boolean isApplicable(    DocumentFactoryManager.DocumentInfo info){
      return toolWindowVisible && toolWindowForm.getFile() != null && info.equals(DocumentFactoryManager.getInstance().getNullableInfo(toolWindowForm.getFile()));
    }
    @Override public void documentRendered(    DocumentFactoryManager.DocumentInfo info){
      if (isApplicable(info) && !toolWindowForm.waitingForGetDocument.get()) {
        UIUtil.invokeLaterIfNeeded(new Runnable(){
          @Override public void run(){
            render(false);
          }
        }
);
      }
    }
    @Override public void errorOccured(){
    }
  }
);
}
