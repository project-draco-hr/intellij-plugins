{
  toolWindowForm=new MxmlPreviewToolWindowForm(project,this);
  final String toolWindowId=FlashUIDesignerBundle.message("mxml.preview.tool.window.title");
  toolWindow=ToolWindowManager.getInstance(project).registerToolWindow(toolWindowId,false,ToolWindowAnchor.RIGHT,project,false);
  toolWindow.setIcon(PlatformIcons.UI_FORM_ICON);
  ((ToolWindowManagerEx)ToolWindowManager.getInstance(project)).addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    private boolean visible=false;
    @Override public void stateChanged(){
      if (project.isDisposed() || toolWindow == null || !toolWindow.isAvailable()) {
        return;
      }
      final boolean currentVisible=toolWindow.isVisible();
      PropertiesComponent propertiesComponent=PropertiesComponent.getInstance(project);
      if (currentVisible) {
        propertiesComponent.setValue(SETTINGS_TOOL_WINDOW_VISIBLE,"true");
      }
 else {
        propertiesComponent.unsetValue(SETTINGS_TOOL_WINDOW_VISIBLE);
      }
      if (currentVisible && !visible) {
        render();
      }
      visible=currentVisible;
    }
  }
);
  final JPanel contentPanel=toolWindowForm.getContentPanel();
  final ContentManager contentManager=toolWindow.getContentManager();
  final Content content=contentManager.getFactory().createContent(contentPanel,null,false);
  content.setCloseable(false);
  content.setPreferredFocusableComponent(contentPanel);
  contentManager.addContent(content);
  contentManager.setSelectedContent(content,true);
  toolWindow.setAvailable(false,null);
  MessageBusConnection connection=ApplicationManager.getApplication().getMessageBus().connect(project);
  connection.subscribe(SocketInputHandler.MESSAGE_TOPIC,new SocketInputHandler.DocumentRenderedListener(){
    @Override public void documentRenderedOnAutoSave(    DocumentFactoryManager.DocumentInfo info){
      if (!toolWindowDisposed && toolWindowForm != null && toolWindowForm.getFile() != null && info.equals(DocumentFactoryManager.getInstance().getNullableInfo(toolWindowForm.getFile()))) {
        render();
      }
    }
    @Override public void errorOccured(){
    }
  }
);
}
