{
  try {
    myConfigFiles=createConfigFiles();
    if (!compilationManager.isMake()) {
      final VirtualFile configFile=myConfigFiles.get(myConfigFiles.size() - 1);
      final String outputFilePath=FlexUtils.findXMLElement(configFile.getInputStream(),"<flex-config><output>");
      FlexCompilationUtils.deleteCacheForFile(outputFilePath);
    }
    final List<String> compilerCommand=FlexCompilationUtils.getMxmlcCompcCommand(myModule.getProject(),FlexUtils.getFlexSdkForFlexModuleOrItsFlexFacets(myModule),myConfig.OUTPUT_TYPE.equals(FlexBuildConfiguration.APPLICATION));
    final List<String> command=FlexCompilationUtils.buildCommand(compilerCommand,myConfigFiles,myModule,myConfig);
    final ProcessBuilder processBuilder=new ProcessBuilder(command);
    processBuilder.redirectErrorStream(true);
    processBuilder.directory(new File(FlexUtils.getFlexCompilerWorkDirPath(myModule.getProject(),null)));
    compilationManager.addMessage(this,CompilerMessageCategory.INFORMATION,StringUtil.join(command," "),null,-1,-1);
    myProcess=processBuilder.start();
    readInputStream(compilationManager);
  }
 catch (  IOException e) {
    compilationManager.addMessage(this,CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
    myCompilationFailed=true;
    cancel();
  }
}
