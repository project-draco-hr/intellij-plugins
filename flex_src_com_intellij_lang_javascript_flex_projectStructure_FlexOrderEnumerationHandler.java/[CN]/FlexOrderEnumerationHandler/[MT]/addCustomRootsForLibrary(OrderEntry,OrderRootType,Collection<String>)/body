{
  if (type != OrderRootType.CLASSES || !(forOrderEntry instanceof LibraryOrderEntry) && !(forOrderEntry instanceof JdkOrderEntry)) {
    return false;
  }
  if (myActiveConfigurations == null) {
    return false;
  }
  if (forOrderEntry instanceof LibraryOrderEntry) {
    LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)forOrderEntry;
    if (libraryOrderEntry.getLibraryLevel() != LibraryTablesRegistrar.APPLICATION_LEVEL) {
      return false;
    }
    Library library=libraryOrderEntry.getLibrary();
    if (library == null || !FlexSdk.isFlexSdk(library)) {
      return false;
    }
    final String[] allUrls=library.getUrls(OrderRootType.CLASSES);
    Collection<FlexIdeBuildConfiguration> accessibleConfigurations=myActiveConfigurations.get(forOrderEntry.getOwnerModule());
    final Set<String> allAccessibleUrls=new HashSet<String>();
    ContainerUtil.process(accessibleConfigurations,new Processor<FlexIdeBuildConfiguration>(){
      @Override public boolean process(      final FlexIdeBuildConfiguration bc){
        allAccessibleUrls.addAll(ContainerUtil.filter(allUrls,new Condition<String>(){
          @Override public boolean value(          String s){
            s=VirtualFileManager.extractPath(StringUtil.trimEnd(s,JarFileSystem.JAR_SEPARATOR));
            return BCUtils.getSdkEntryLinkageType(s,bc) != null;
          }
        }
));
        return true;
      }
    }
);
    urls.addAll(allAccessibleUrls);
    return true;
  }
 else {
    final FlexIdeBuildConfiguration bc=FlexBuildConfigurationManager.getInstance(forOrderEntry.getOwnerModule()).getActiveConfiguration();
    final SdkEntry sdkEntry=bc.getDependencies().getSdkEntry();
    if (sdkEntry == null) {
      return false;
    }
    final Sdk sdk=sdkEntry.findSdk();
    if (sdk == null || sdk.getSdkType() != FlexSdkType2.getInstance()) {
      return false;
    }
    urls.addAll(ContainerUtil.filter(sdk.getRootProvider().getUrls(type),new Condition<String>(){
      @Override public boolean value(      String s){
        s=VirtualFileManager.extractPath(StringUtil.trimEnd(s,JarFileSystem.JAR_SEPARATOR));
        return BCUtils.getSdkEntryLinkageType(s,bc) != null;
      }
    }
));
    return true;
  }
}
