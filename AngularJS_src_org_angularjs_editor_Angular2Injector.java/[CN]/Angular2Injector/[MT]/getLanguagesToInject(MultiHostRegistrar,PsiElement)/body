{
  final Project project=context.getProject();
  if (!AngularIndexUtil.hasAngularJS2(project))   return;
  if (context instanceof JSLiteralExpressionImpl && ((JSLiteralExpressionImpl)context).isQuotedLiteral()) {
    if (!(context.getParent() instanceof JSArrayLiteralExpression))     return;
    final JSProperty property=ObjectUtils.tryCast(context.getParent().getParent(),JSProperty.class);
    if (property != null && "styles".equals(property.getName())) {
      final JSCallExpression callExpression=PsiTreeUtil.getParentOfType(property,JSCallExpression.class);
      final JSExpression expression=callExpression != null ? callExpression.getMethodExpression() : null;
      if (expression instanceof JSReferenceExpression) {
        final String name=((JSReferenceExpression)expression).getReferenceName();
        if (!AngularJS2IndexingHandler.isDirective(name))         return;
        final TextRange range=ElementManipulators.getValueTextRange(context);
        registrar.startInjecting(CSSLanguage.INSTANCE).addPlace(null,null,(PsiLanguageInjectionHost)context,range).doneInjecting();
      }
    }
  }
}
