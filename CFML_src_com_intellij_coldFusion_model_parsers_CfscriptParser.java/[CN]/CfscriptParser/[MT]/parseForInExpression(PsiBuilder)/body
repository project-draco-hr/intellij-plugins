{
  if (myBuilder.getTokenType() != FOR_IN_KEYWORD) {
    return;
  }
  PsiBuilder.Marker forExpressionMarker=myBuilder.mark();
  myBuilder.advanceLexer();
  if (myBuilder.getTokenType() != L_BRACKET) {
    myBuilder.error(CfmlBundle.message("cfml.parsing.close.bracket.expected"));
    forExpressionMarker.drop();
    return;
  }
  myBuilder.advanceLexer();
  if (myBuilder.getTokenType() == CfscriptTokenTypes.VAR_KEYWORD) {
    myBuilder.advanceLexer();
  }
  PsiBuilder.Marker definitionMarker=myBuilder.mark();
  if (!(new CfmlExpressionParser(myBuilder)).parseReference(false)) {
    myBuilder.error(CfmlBundle.message("cfml.parsing.close.bracket.expected"));
    definitionMarker.drop();
  }
 else {
    definitionMarker.done(CfmlElementTypes.FORVARIABLE);
  }
  if (myBuilder.getTokenType() != IN_L) {
    forExpressionMarker.drop();
    return;
  }
  myBuilder.advanceLexer();
  if (!(new CfmlExpressionParser(myBuilder)).parseReference(false)) {
    (new CfmlExpressionParser(myBuilder)).parseArrayDefinition();
  }
  if (myBuilder.getTokenType() != R_BRACKET) {
    myBuilder.error(CfmlBundle.message("cfml.parsing.close.bracket.expected"));
  }
 else {
    myBuilder.advanceLexer();
  }
  parseScript(myBuilder,false);
  forExpressionMarker.done(CfmlElementTypes.FOREXPRESSION);
}
