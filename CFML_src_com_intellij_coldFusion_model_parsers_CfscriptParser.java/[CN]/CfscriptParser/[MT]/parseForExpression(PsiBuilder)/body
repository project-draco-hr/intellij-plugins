{
  if (myBuilder.getTokenType() != FOR_KEYWORD) {
    return;
  }
  PsiBuilder.Marker forExpressionMarker=myBuilder.mark();
  myBuilder.advanceLexer();
  if (myBuilder.getTokenType() != L_BRACKET) {
    myBuilder.error(CfmlBundle.message("cfml.parsing.close.bracket.expected"));
    forExpressionMarker.drop();
    return;
  }
  myBuilder.advanceLexer();
  if (!tryParseForIn(myBuilder)) {
    parseStatement(myBuilder);
    parseCondition(myBuilder);
    eatSemicolon(myBuilder);
    (new CfmlExpressionParser(myBuilder)).parseStatement();
  }
  if (myBuilder.getTokenType() != R_BRACKET) {
    myBuilder.error(CfmlBundle.message("cfml.parsing.close.bracket.expected"));
    forExpressionMarker.done(CfmlElementTypes.FOREXPRESSION);
    return;
  }
  myBuilder.advanceLexer();
  parseScript(myBuilder,false);
  forExpressionMarker.done(CfmlElementTypes.FOREXPRESSION);
}
