{
  commandLine.addParameter("--ignore-unrecognized-flags");
  final String vmOptions=runnerParameters.getVMOptions();
  if (vmOptions != null) {
    final StringTokenizer vmOptionsTokenizer=new CommandLineTokenizer(vmOptions);
    while (vmOptionsTokenizer.hasMoreTokens()) {
      commandLine.addParameter(vmOptionsTokenizer.nextToken());
    }
  }
  if (runnerParameters.isCheckedMode()) {
    commandLine.addParameter(DartiumUtil.CHECKED_MODE_OPTION);
  }
  final VirtualFile dartFile;
  try {
    dartFile=runnerParameters.getDartFile();
  }
 catch (  RuntimeConfigurationError e) {
    throw new ExecutionException(e);
  }
  final VirtualFile[] packageRoots=DartUrlResolver.getInstance(project,dartFile).getPackageRoots();
  if (packageRoots.length > 0) {
    commandLine.addParameter("--package-root=" + packageRoots[0].getPath());
  }
  if (DefaultDebugExecutor.EXECUTOR_ID.equals(getEnvironment().getExecutor().getId())) {
    myDebuggingPort=NetUtils.tryToFindAvailableSocketPort();
    commandLine.addParameter("--debug:" + myDebuggingPort);
  }
  myObservatoryPort=PubServerManager.findOneMoreAvailablePort(myDebuggingPort);
  commandLine.addParameter("--enable-vm-service:" + myObservatoryPort);
  commandLine.addParameter("--trace_service_pause_events");
  commandLine.addParameter(overriddenMainFilePath == null ? dartFile.getPath() : overriddenMainFilePath);
  final String arguments=runnerParameters.getArguments();
  if (arguments != null) {
    StringTokenizer argumentsTokenizer=new CommandLineTokenizer(arguments);
    while (argumentsTokenizer.hasMoreTokens()) {
      commandLine.addParameter(argumentsTokenizer.nextToken());
    }
  }
}
