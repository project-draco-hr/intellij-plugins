{
  commandLine.addParameter("--ignore-unrecognized-flags");
  int customObservatoryPort=-1;
  final String vmOptions=runnerParameters.getVMOptions();
  if (vmOptions != null) {
    final StringTokenizer vmOptionsTokenizer=new CommandLineTokenizer(vmOptions);
    while (vmOptionsTokenizer.hasMoreTokens()) {
      final String vmOption=vmOptionsTokenizer.nextToken();
      commandLine.addParameter(vmOption);
      try {
        if (vmOption.startsWith("--enable-vm-service:")) {
          customObservatoryPort=Integer.parseInt(vmOption.substring("--enable-vm-service:".length()));
        }
        if (vmOption.startsWith("--observe:")) {
          customObservatoryPort=Integer.parseInt(vmOption.substring("--observe:".length()));
        }
      }
 catch (      NumberFormatException ignore) {
      }
    }
  }
  if (runnerParameters.isCheckedMode()) {
    commandLine.addParameter(DartiumUtil.CHECKED_MODE_OPTION);
  }
  final VirtualFile dartFile;
  try {
    dartFile=runnerParameters.getDartFile();
  }
 catch (  RuntimeConfigurationError e) {
    throw new ExecutionException(e);
  }
  final VirtualFile packageRoot=DartUrlResolver.getInstance(project,dartFile).getPackageRoot();
  if (packageRoot != null) {
    commandLine.addParameter("--package-root=" + FileUtil.toSystemDependentName(packageRoot.getPath()));
  }
  if (DefaultDebugExecutor.EXECUTOR_ID.equals(getEnvironment().getExecutor().getId())) {
    if (StringUtil.compareVersionNumbers(sdk.getVersion(),"1.14") < 0) {
      myDebuggingPort=NetUtils.tryToFindAvailableSocketPort();
      commandLine.addParameter("--debug:" + myDebuggingPort);
      commandLine.addParameter("--break-at-isolate-spawn");
    }
 else {
      commandLine.addParameter("--pause_isolates_on_start");
    }
  }
  if (customObservatoryPort > 0) {
    myObservatoryPort=customObservatoryPort;
  }
 else {
    myObservatoryPort=PubServerManager.findOneMoreAvailablePort(myDebuggingPort);
    commandLine.addParameter("--enable-vm-service:" + myObservatoryPort);
  }
  commandLine.addParameter("--trace_service_pause_events");
  commandLine.addParameter(FileUtil.toSystemDependentName(overriddenMainFilePath == null ? dartFile.getPath() : overriddenMainFilePath));
  final String arguments=runnerParameters.getArguments();
  if (arguments != null) {
    StringTokenizer argumentsTokenizer=new CommandLineTokenizer(arguments);
    while (argumentsTokenizer.hasMoreTokens()) {
      commandLine.addParameter(argumentsTokenizer.nextToken());
    }
  }
}
