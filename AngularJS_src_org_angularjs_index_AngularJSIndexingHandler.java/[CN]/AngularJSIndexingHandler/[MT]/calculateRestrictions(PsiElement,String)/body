{
  final Ref<String> restrict=Ref.create(defaultRestrictions);
  final Ref<String> scope=Ref.create("");
  final PsiElement function=findFunction(element);
  if (function != null) {
    function.accept(new JSRecursiveElementVisitor(){
      @Override public void visitJSProperty(      JSProperty node){
        final String name=node.getName();
        final JSExpression value=node.getValue();
        if ("restrict".equals(name)) {
          if (value instanceof JSLiteralExpression && ((JSLiteralExpression)value).isQuotedLiteral()) {
            restrict.set(unquote(value));
          }
        }
 else         if ("scope".equals(name)) {
          if (value instanceof JSObjectLiteralExpression) {
            scope.set(StringUtil.join(((JSObjectLiteralExpression)value).getProperties(),new Function<JSProperty,String>(){
              @Override public String fun(              JSProperty property){
                return property.getName();
              }
            }
,","));
          }
        }
      }
    }
);
  }
  return restrict.get().trim() + ";;;" + scope.get();
}
