{
  final JSExpression methodExpression=callExpression.getMethodExpression();
  if (!(methodExpression instanceof JSReferenceExpression))   return;
  JSReferenceExpression callee=(JSReferenceExpression)methodExpression;
  JSExpression qualifier=callee.getQualifier();
  if (qualifier == null)   return;
  final String command=callee.getReferencedName();
  final ID<String,Void> index=INDEXERS.get(command);
  if (index != null) {
    JSExpression[] arguments=callExpression.getArguments();
    if (arguments.length > 0) {
      JSExpression argument=arguments[0];
      if (argument instanceof JSLiteralExpression && ((JSLiteralExpression)argument).isQuotedLiteral()) {
        final String argumentText=argument.getText();
        final Function<PsiElement,String> calculator=DATA_CALCULATORS.get(command);
        final String data=calculator != null ? calculator.fun(argument) : null;
        storeAdditionalData(builder,index,argument,command,argumentText,argument.getTextOffset(),data);
      }
 else       if (argument instanceof JSObjectLiteralExpression) {
        for (        JSProperty property : ((JSObjectLiteralExpression)argument).getProperties()) {
          final String argumentText=property.getName();
          storeAdditionalData(builder,index,property,command,argumentText,property.getTextOffset(),null);
        }
      }
    }
  }
  if (INTERESTING_METHODS.contains(command)) {
    JSExpression[] arguments=callExpression.getArguments();
    if (arguments.length > 0) {
      JSExpression argument=arguments[0];
      if (argument instanceof JSLiteralExpression && ((JSLiteralExpression)argument).isQuotedLiteral()) {
        builder.storeAdditionalData(AngularSymbolIndex.INDEX_ID.toString(),StringUtil.unquoteString(argument.getText()),serializeDataValue(false,argument.getTextOffset(),null));
      }
    }
  }
  if (INJECTABLE_METHODS.contains(command)) {
    JSExpression[] arguments=callExpression.getArguments();
    if (arguments.length > 0) {
      JSExpression argument=arguments[0];
      if (argument instanceof JSLiteralExpression && ((JSLiteralExpression)argument).isQuotedLiteral()) {
        generateNamespace(builder,argument);
      }
    }
  }
  if ("$interpolateProvider".equals(qualifier.getText())) {
    if ("startSymbol".equals(command) || "endSymbol".equals(command)) {
      JSExpression[] arguments=callExpression.getArguments();
      if (arguments.length > 0) {
        JSExpression argument=arguments[0];
        if (argument instanceof JSLiteralExpression && ((JSLiteralExpression)argument).isQuotedLiteral()) {
          String interpolation=StringUtil.unquoteString(argument.getText());
          if ("//".equals(interpolation))           return;
          builder.storeAdditionalData(AngularInjectionDelimiterIndex.INDEX_ID.toString(),command,serializeDataValue(false,argument.getTextOffset(),interpolation));
        }
      }
    }
  }
}
