{
  final String name=property.getName();
  if (name == null)   return outData;
  final Pair<JSCallExpression,Integer> pair=findImmediatelyWrappingCall(property);
  if (pair == null)   return outData;
  final JSCallExpression callExpression=pair.getFirst();
  final int level=pair.getSecond();
  final JSExpression methodExpression=callExpression.getMethodExpression();
  if (!(methodExpression instanceof JSReferenceExpression) || ((JSReferenceExpression)methodExpression).getQualifier() == null) {
    return outData;
  }
  final String command=((JSReferenceExpression)methodExpression).getReferenceName();
  final PairProcessor<JSProperty,JSElementIndexingData> customProcessor=CUSTOM_PROPERTY_PROCESSORS.get(command);
  JSElementIndexingData localOutData;
  if (customProcessor != null && customProcessor.process(property,(localOutData=(outData == null ? new JSElementIndexingDataImpl() : outData)))) {
    return localOutData;
  }
  if (level > 1)   return outData;
  final PsiElement parent=property.getParent();
  final StubIndexKey<String,JSImplicitElementProvider> index=INDEXERS.get(command);
  if (index == null)   return outData;
  if (callExpression.getArguments()[0] != parent)   return outData;
  if (outData == null)   outData=new JSElementIndexingDataImpl();
  addImplicitElements(property,command,index,name,null,outData);
  return outData;
}
