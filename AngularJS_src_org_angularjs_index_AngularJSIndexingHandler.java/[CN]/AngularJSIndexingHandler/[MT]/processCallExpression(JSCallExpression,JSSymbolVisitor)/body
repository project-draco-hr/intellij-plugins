{
  JSReferenceExpression callee=(JSReferenceExpression)callExpression.getMethodExpression();
  JSExpression qualifier=callee.getQualifier();
  if (qualifier == null)   return;
  final String command=callee.getReferencedName();
  final ID<String,Void> index=INDEXERS.get(command);
  if (index != null) {
    JSExpression[] arguments=callExpression.getArguments();
    if (arguments.length > 0) {
      JSExpression argument=arguments[0];
      if (argument instanceof JSLiteralExpression && ((JSLiteralExpression)argument).isQuotedLiteral()) {
        final Function<String,String> converter=NAME_CONVERTERS.get(command);
        final String defaultName=StringUtil.unquoteString(argument.getText());
        final String name=converter != null ? converter.fun(argument.getText()) : defaultName;
        if (name != null) {
          visitor.storeAdditionalData(argument,index.toString(),name,argument.getTextOffset());
          visitor.storeAdditionalData(argument,AngularSymbolIndex.INDEX_ID.toString(),name,argument.getTextOffset());
          if (!StringUtil.equals(defaultName,name)) {
            visitor.storeAdditionalData(argument,AngularSymbolIndex.INDEX_ID.toString(),defaultName,argument.getTextOffset());
          }
        }
      }
    }
  }
  if (INTERESTING_METHODS.contains(command)) {
    JSExpression[] arguments=callExpression.getArguments();
    if (arguments.length > 0) {
      JSExpression argument=arguments[0];
      if (argument instanceof JSLiteralExpression && ((JSLiteralExpression)argument).isQuotedLiteral()) {
        visitor.storeAdditionalData(argument,AngularSymbolIndex.INDEX_ID.toString(),StringUtil.unquoteString(argument.getText()),argument.getTextOffset());
      }
    }
  }
}
