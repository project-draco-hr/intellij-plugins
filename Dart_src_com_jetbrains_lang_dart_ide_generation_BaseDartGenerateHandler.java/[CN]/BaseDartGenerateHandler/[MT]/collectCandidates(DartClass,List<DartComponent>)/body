{
  final List<DartClass> superClasses=new ArrayList<DartClass>();
  final List<DartClass> superInterfaces=new ArrayList<DartClass>();
  DartResolveUtil.collectSupers(superClasses,superInterfaces,aClass);
  List<DartComponent> classMembers=DartResolveUtil.getNamedSubComponents(aClass);
  List<DartComponent> superClassesMembers=new ArrayList<DartComponent>();
  for (  DartClass superClass : superClasses) {
    superClassesMembers.addAll(DartResolveUtil.getNamedSubComponents(superClass));
  }
  List<DartComponent> superInterfacesMembers=new ArrayList<DartComponent>();
  for (  DartClass superInterface : superInterfaces) {
    superInterfacesMembers.addAll(DartResolveUtil.getNamedSubComponents(superInterface));
  }
  final Condition<DartComponent> notConstructorCondition=new Condition<DartComponent>(){
    @Override public boolean value(    DartComponent component){
      return DartComponentType.typeOf(component) != DartComponentType.CONSTRUCTOR;
    }
  }
;
  classMembers=ContainerUtil.filter(classMembers,notConstructorCondition);
  superClassesMembers=ContainerUtil.filter(superClassesMembers,notConstructorCondition);
  superInterfacesMembers=ContainerUtil.filter(superInterfacesMembers,notConstructorCondition);
  final Map<Pair<String,Boolean>,DartComponent> classMembersMap=DartResolveUtil.namedComponentToMap(classMembers);
  final Map<Pair<String,Boolean>,DartComponent> superClassesMembersMap=DartResolveUtil.namedComponentToMap(superClassesMembers);
  final Map<Pair<String,Boolean>,DartComponent> superInterfacesMembersMap=DartResolveUtil.namedComponentToMap(superInterfacesMembers);
  collectCandidates(classMembersMap,superClassesMembersMap,superInterfacesMembersMap,candidates);
}
