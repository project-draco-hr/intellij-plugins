{
  Collection<String> predefinedTags=new ArrayList<>();
  predefinedTags.add(FlexPredefinedTagNames.SCRIPT);
  predefinedTags.add(FlexPredefinedTagNames.STYLE);
  predefinedTags.add(FlexPredefinedTagNames.METADATA);
  if (JavaScriptSupportLoader.MXML_URI3.equals(codeContext.namespace)) {
    predefinedTags.add(FlexPredefinedTagNames.DECLARATIONS);
    predefinedTags.add(MxmlJSClass.PRIVATE_TAG_NAME);
    predefinedTags.add(FlexPredefinedTagNames.LIBRARY);
    final ClassBackedElementDescriptor definitionDescriptor=new ClassBackedElementDescriptor(DEFINITION_TAG_NAME,codeContext,codeContext.module.getProject(),true);
    definitionDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(MxmlLanguageTagsUtil.NAME_ATTRIBUTE,definitionDescriptor,true,null,null,null));
    codeContext.putDescriptor(DEFINITION_TAG_NAME,definitionDescriptor,false);
    final ClassBackedElementDescriptor reparentDescriptor=new ClassBackedElementDescriptor(REPARENT_TAG_NAME,codeContext,codeContext.module.getProject(),true);
    reparentDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(TARGET_ATTR_NAME,reparentDescriptor,true,null,null,null));
    reparentDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(FlexStateElementNames.INCLUDE_IN,reparentDescriptor,true,null,null,null));
    reparentDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(FlexStateElementNames.EXCLUDE_FROM,reparentDescriptor,true,null,null,null));
    codeContext.putDescriptor(REPARENT_TAG_NAME,reparentDescriptor,false);
  }
  for (  String predefined : predefinedTags) {
    codeContext.putDescriptor(predefined,new ClassBackedElementDescriptor(predefined,codeContext,codeContext.module.getProject(),true),false);
  }
  final ClassBackedElementDescriptor modelDescriptor=new ClassBackedElementDescriptor(FlexPredefinedTagNames.MODEL,codeContext,codeContext.module.getProject(),true);
  modelDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(FlexMxmlLanguageAttributeNames.ID,modelDescriptor,true,null,null,null));
  modelDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(FlexReferenceContributor.SOURCE_ATTR_NAME,modelDescriptor,true,null,null,null));
  codeContext.putDescriptor(FlexPredefinedTagNames.MODEL,modelDescriptor,false);
  final ClassBackedElementDescriptor bindingDescriptor=new ClassBackedElementDescriptor(FlexPredefinedTagNames.BINDING,codeContext,codeContext.module.getProject(),true);
  bindingDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(FlexReferenceContributor.SOURCE_ATTR_NAME,bindingDescriptor,true,null,null,null));
  bindingDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(FlexReferenceContributor.DESTINATION_ATTR_NAME,bindingDescriptor,true,null,null,null));
  if (JavaScriptSupportLoader.MXML_URI3.equals(codeContext.namespace)) {
    bindingDescriptor.addPredefinedMemberDescriptor(new AnnotationBackedDescriptorImpl(TWO_WAY_ATTR_NAME,bindingDescriptor,true,null,null,null));
  }
  codeContext.putDescriptor(FlexPredefinedTagNames.BINDING,bindingDescriptor,false);
  final ClassBackedElementDescriptor componentDescriptor=new ClassBackedElementDescriptor(XmlBackedJSClassImpl.COMPONENT_TAG_NAME,CLASS_FACTORY,codeContext,codeContext.module.getProject());
  codeContext.putDescriptor(XmlBackedJSClassImpl.COMPONENT_TAG_NAME,componentDescriptor,false);
}
