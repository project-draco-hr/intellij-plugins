{
  super(project);
  myProject=project;
  myTree.setRootVisible(false);
  myTree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      final DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
      final Object userObject=treeNode.getUserObject();
      if (userObject instanceof Module) {
        setIcon(ModuleType.get((Module)userObject).getNodeIcon(expanded));
        append(((Module)userObject).getName());
      }
 else       if (userObject instanceof FlexIdeBuildConfiguration) {
        setIcon(((FlexIdeBuildConfiguration)userObject).getIcon());
        BCUtils.renderBuildConfiguration((FlexIdeBuildConfiguration)userObject,null).appendToComponent(this);
      }
 else       if (userObject instanceof FlashProjectStructureProblem) {
        setIcon(ERROR_ICON);
        append(((FlashProjectStructureProblem)userObject).errorMessage);
      }
    }
  }
);
  myTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        openProjectStructure();
      }
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    final MouseEvent e){
      if (MouseEvent.BUTTON1 == e.getButton() && e.getClickCount() == 2) {
        openProjectStructure();
      }
    }
  }
);
  setTitle(FlexBundle.message("project.setup.problem.title"));
  setOKButtonText(FlexBundle.message("open.project.structure"));
  init();
}
