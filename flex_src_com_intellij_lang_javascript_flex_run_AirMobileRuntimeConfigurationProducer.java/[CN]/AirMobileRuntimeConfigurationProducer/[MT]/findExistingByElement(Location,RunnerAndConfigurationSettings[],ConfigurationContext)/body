{
  if (existingConfigurations.length == 0)   return null;
  if (!(location instanceof PsiLocation))   return null;
  final PsiElement psiElement=location.getPsiElement();
  final Module module=ModuleUtil.findModuleForPsiElement(psiElement);
  if (module == null || !FlexSdkUtils.hasDependencyOnAirMobile(module)) {
    return null;
  }
  final PsiFile psiFile=psiElement.getContainingFile();
  final VirtualFile virtualFile=psiFile == null ? null : psiFile.getVirtualFile();
  if (virtualFile != null && FlexUtils.isAirDescriptorFile(virtualFile) && FlexUtils.isAirMobileDescriptorFile(virtualFile)) {
    final FlexBuildConfiguration config=FlexBuildConfiguration.getConfigForFlexModuleOrItsFlexFacets(module).iterator().next();
    for (    final RunnerAndConfigurationSettings existingConfiguration : existingConfigurations) {
      final AirMobileRunnerParameters runnerParameters=((AirMobileRunConfiguration)existingConfiguration.getConfiguration()).getRunnerParameters();
      if (module.getName().equals(runnerParameters.getModuleName()) && AirMobileRunMode.AppDescriptor == runnerParameters.getAirMobileRunMode() && virtualFile.getPath().equals(runnerParameters.getAirDescriptorPath()) && config.getCompileOutputPath().equals(runnerParameters.getAirRootDirPath())) {
        return existingConfiguration;
      }
    }
  }
 else {
    final JSClass jsClass=FlexRuntimeConfigurationProducer.getJSClass(psiElement);
    if (jsClass != null && FlexRuntimeConfigurationProducer.isAcceptedMainClass(jsClass,module,false)) {
      for (      final RunnerAndConfigurationSettings existingConfiguration : existingConfigurations) {
        final AirMobileRunnerParameters runnerParameters=((AirMobileRunConfiguration)existingConfiguration.getConfiguration()).getRunnerParameters();
        if (module.getName().equals(runnerParameters.getModuleName()) && AirMobileRunMode.MainClass == runnerParameters.getAirMobileRunMode() && runnerParameters.getMainClassName().equals(jsClass.getQualifiedName())) {
          return existingConfiguration;
        }
      }
    }
  }
  return null;
}
