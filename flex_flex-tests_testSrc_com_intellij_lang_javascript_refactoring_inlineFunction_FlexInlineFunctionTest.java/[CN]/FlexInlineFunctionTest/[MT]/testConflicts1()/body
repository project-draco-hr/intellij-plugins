{
  String[] conflicts=new String[]{"Field Foo.inter with internal visibility won't be accessible from method OtherPackage.otherPackageFunc()","Field Foo.inter with internal visibility won't be accessible from method SubClass.subclassFunc()","Field Foo.priv with private visibility won't be accessible from method Neighbour.neighbourFunc()","Field Foo.priv with private visibility won't be accessible from method OtherPackage.otherPackageFunc()","Field Foo.priv with private visibility won't be accessible from method SubClass.subclassFunc()","Field Foo.prot with protected visibility won't be accessible from method Neighbour.neighbourFunc()","Field Foo.prot with protected visibility won't be accessible from method OtherPackage.otherPackageFunc()","Method Foo.fInter() with internal visibility won't be accessible from method OtherPackage.otherPackageFunc()","Method Foo.fInter() with internal visibility won't be accessible from method SubClass.subclassFunc()","Method Foo.fPriv() with private visibility won't be accessible from method Neighbour.neighbourFunc()","Method Foo.fPriv() with private visibility won't be accessible from method OtherPackage.otherPackageFunc()","Method Foo.fPriv() with private visibility won't be accessible from method SubClass.subclassFunc()","Method Foo.fProt() with protected visibility won't be accessible from method Neighbour.neighbourFunc()","Method Foo.fProt() with protected visibility won't be accessible from method OtherPackage.otherPackageFunc()"};
  doTestConflicts(getTestName(false),"js2",conflicts);
}
