{
  final JSClass jsClass=findSourceElement(element);
  final Module module=ModuleUtil.findModuleForPsiElement(element);
  if (jsClass == null || module == null) {
    return Collections.emptyList();
  }
  String possibleName=null;
  final String name=jsClass.getName();
  if (name != null && name.length() > "Test".length()) {
    possibleName=name.startsWith("Test") ? name.substring("Test".length()) : name.endsWith("Test") ? name.substring(0,name.length() - "Test".length()) : null;
  }
  if (possibleName == null) {
    return Collections.emptyList();
  }
  final GlobalSearchScope scope=GlobalSearchScope.moduleWithDependenciesScope(module).intersectWith(GlobalSearchScope.projectProductionScope(module.getProject()));
  final Collection<PsiElement> result=new ArrayList<PsiElement>();
  final Collection<JSQualifiedNamedElement> elements=JSResolveUtil.findElementsByName(possibleName,element.getProject(),scope);
  for (  final JSQualifiedNamedElement jsQualifiedNamedElement : elements) {
    if (jsQualifiedNamedElement instanceof JSClass) {
      result.add(jsQualifiedNamedElement);
    }
  }
  return result;
}
