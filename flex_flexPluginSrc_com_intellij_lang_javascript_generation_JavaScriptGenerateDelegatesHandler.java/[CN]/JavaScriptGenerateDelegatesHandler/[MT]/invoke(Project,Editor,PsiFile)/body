{
  final JSClass jsClass=findClass(file,editor);
  if (jsClass == null)   return;
  Collection<JSVariable> fields=findCandidateFields(jsClass);
  final JSVariable field;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    LOG.assertTrue(fields.size() == 1);
    field=fields.iterator().next();
  }
 else {
    final MemberChooser<JSNamedElementNode> targetChooser=createMemberChooserDialog(project,jsClass,wrap(fields),false,false,CodeInsightBundle.message("generate.delegate.target.chooser.title"));
    targetChooser.show();
    if (targetChooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)     return;
    field=(JSVariable)targetChooser.getSelectedElements().get(0).getPsiElement();
  }
  JSClass fieldClass=field.getType().resolveClass();
  final boolean allowPackageLocal=!JSPsiImplUtils.differentPackageName(StringUtil.getPackageName(fieldClass.getQualifiedName()),StringUtil.getPackageName(jsClass.getQualifiedName()));
class MemberDescriptor {
    private final String name;
    private final @Nullable JSFunction.FunctionKind kind;
    public MemberDescriptor(    JSFunction method){
      name=method.getName();
      kind=method.getKind();
    }
    public MemberDescriptor(    JSVariable field){
      name=field.getName();
      kind=null;
    }
    @Override public boolean equals(    Object o){
      if (this == o)       return true;
      if (o == null || getClass() != o.getClass())       return false;
      MemberDescriptor that=(MemberDescriptor)o;
      if (kind != that.kind)       return false;
      if (!name.equals(that.name))       return false;
      return true;
    }
    @Override public int hashCode(){
      int result=name.hashCode();
      result=31 * result + (kind != null ? kind.hashCode() : 0);
      return result;
    }
  }
  final Map<MemberDescriptor,JSNamedElement> memberCandidates=new HashMap<MemberDescriptor,JSNamedElement>();
  ResolveProcessor p=new ResolveProcessor(null){
{
      setToProcessHierarchy(true);
    }
    @Override public boolean execute(    PsiElement element,    ResolveState state){
      JSClass clazz=JSUtils.getMemberContainingClass(element);
      if (clazz == null || JSResolveUtil.isObjectClass(clazz) || clazz == jsClass) {
        return true;
      }
      if (element instanceof JSFunction) {
        JSFunction method=(JSFunction)element;
        if (memberCandidates.containsKey(method.getName())) {
          return true;
        }
        JSAttributeList attributeList=method.getAttributeList();
        if (attributeList.getAccessType() == JSAttributeList.AccessType.PRIVATE || attributeList.getAccessType() == JSAttributeList.AccessType.PROTECTED) {
          return true;
        }
        if (!allowPackageLocal && attributeList.getNamespace() == null && attributeList.getAccessType() == JSAttributeList.AccessType.PACKAGE_LOCAL) {
          return true;
        }
        if (method.getKind() == JSFunction.FunctionKind.CONSTRUCTOR) {
          return true;
        }
        if (attributeList.hasModifier(JSAttributeList.ModifierType.STATIC)) {
          return true;
        }
        if (JSInheritanceUtil.findMethodInClass(method,jsClass,true) != null) {
          return true;
        }
        memberCandidates.put(new MemberDescriptor(method),method);
      }
 else       if (element instanceof JSVariable) {
        JSVariable f=(JSVariable)element;
        if (memberCandidates.containsKey(f.getName())) {
          return true;
        }
        JSAttributeList attributeList=f.getAttributeList();
        if (attributeList.getAccessType() == JSAttributeList.AccessType.PRIVATE || attributeList.getAccessType() == JSAttributeList.AccessType.PROTECTED) {
          return true;
        }
        if (!allowPackageLocal && attributeList.getAccessType() == JSAttributeList.AccessType.PACKAGE_LOCAL) {
          return true;
        }
        if (jsClass.findFunctionByName(f.getName()) != null) {
          return true;
        }
        memberCandidates.put(new MemberDescriptor(f),f);
      }
      return true;
    }
  }
;
  fieldClass.processDeclarations(p,ResolveState.initial(),fieldClass,fieldClass);
  Collection<JSNamedElementNode> selected;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    LOG.assertTrue(!memberCandidates.isEmpty());
    selected=wrap(memberCandidates.values());
  }
 else {
    final MemberChooser<JSNamedElementNode> methodsChooser=createMemberChooserDialog(project,jsClass,wrap(memberCandidates.values()),false,true,CodeInsightBundle.message("generate.delegate.method.chooser.title"));
    methodsChooser.show();
    if (methodsChooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)     return;
    selected=methodsChooser.getSelectedElements();
  }
  BaseCreateMethodsFix fix=new BaseCreateMethodsFix<JSNamedElement>(jsClass){
    final JavaScriptGenerateAccessorHandler.MyBaseCreateMethodsFix generateGetterFix=new JavaScriptGenerateAccessorHandler.MyBaseCreateMethodsFix(JavaScriptGenerateAccessorHandler.GenerationMode.Getter,jsClass,null,false,field.getName());
    final JavaScriptGenerateAccessorHandler.MyBaseCreateMethodsFix generateSetterFix=new JavaScriptGenerateAccessorHandler.MyBaseCreateMethodsFix(JavaScriptGenerateAccessorHandler.GenerationMode.Setter,jsClass,null,false,field.getName());
    @Override protected String buildFunctionAttrText(    @NonNls String attrText,    JSAttributeList attributeList,    JSNamedElement function){
      StringBuilder result=new StringBuilder();
      JSConditionalCompileVariableReference ref=attributeList.getConditionalCompileVariableReference();
      if (ref != null) {
        result.append(ref.getText()).append(" ");
      }
      result.append("public");
      if (field.getAttributeList().hasModifier(JSAttributeList.ModifierType.STATIC)) {
        result.append(" static");
      }
      return result.toString();
    }
    @Override protected void processElements(    Project project,    MultiMap<String,String> types,    Set<JSNamedElement> elementsToProcess){
      for (      JSNamedElement e : elementsToProcess) {
        if (e instanceof JSFunction) {
          anchor=doAddOneMethod(project,buildFunctionText(e,types),anchor);
        }
 else {
          anchor=doAddOneMethod(project,generateGetterFix.buildFunctionText((JSVariable)e,types),anchor);
          anchor=doAddOneMethod(project,generateSetterFix.buildFunctionText((JSVariable)e,types),anchor);
        }
      }
    }
    protected String buildFunctionBodyText(    final String retType,    final JSParameterList parameterList,    final JSNamedElement element){
      return OverrideMethodsFix.buildDelegatingText(retType,parameterList,((JSFunction)element),field.getName());
    }
  }
;
  doInvoke(project,editor,file,selected,fix);
}
