{
  final RunConfiguration runConfiguration=CompileStepBeforeRun.getRunConfiguration(baseScope);
  final Collection<Pair<Module,FlexBuildConfiguration>> bcsToCompileForPackaging=FlexResourceBuildTargetScopeProvider.getBCsToCompileForPackaging(baseScope);
  List<String> targetIds=new ArrayList<>();
  try {
    for (    Pair<Module,FlexBuildConfiguration> moduleAndBC : getModulesAndBCsToCompile(baseScope)) {
      final Module module=moduleAndBC.first;
      final FlexBuildConfiguration bc=moduleAndBC.second;
      if (bcsToCompileForPackaging != null && contains(bcsToCompileForPackaging,module,bc)) {
        final boolean forcedDebugStatus=getForcedDebugStatus(project,bc);
        targetIds.add(FlexCommonUtils.getBuildTargetId(module.getName(),bc.getName(),forcedDebugStatus));
      }
 else       if (bc.isTempBCForCompilation()) {
        LOG.assertTrue(runConfiguration instanceof FlashRunConfiguration || runConfiguration instanceof FlexUnitRunConfiguration,bc.getName());
        final BCBasedRunnerParameters params=runConfiguration instanceof FlashRunConfiguration ? ((FlashRunConfiguration)runConfiguration).getRunnerParameters() : ((FlexUnitRunConfiguration)runConfiguration).getRunnerParameters();
        LOG.assertTrue(params.getModuleName().equals(module.getName()),"Module name in run config: " + params.getModuleName() + ", expected: "+ module.getName());
        LOG.assertTrue(params.getBCName().equals(bc.getName()),"BC name in run config: " + params.getBCName() + ", expected: "+ bc.getName());
        targetIds.add(FlexCommonUtils.getBuildTargetIdForRunConfig(runConfiguration.getType().getId(),runConfiguration.getName()));
      }
 else {
        targetIds.add(FlexCommonUtils.getBuildTargetId(module.getName(),bc.getName(),null));
      }
    }
  }
 catch (  ConfigurationException e) {
    LOG.error(e);
  }
  if (targetIds.isEmpty()) {
    return Collections.emptyList();
  }
  return Collections.singletonList(CmdlineProtoUtil.createTargetsScope(FlexBuildTargetType.INSTANCE.getTypeId(),targetIds,forceBuild));
}
