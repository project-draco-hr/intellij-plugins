{
  super(environment);
  myConfiguration=configuration;
  final File runFile=new File(myConfiguration.bndRunFile);
  if (!runFile.isFile()) {
    throw new CantRunException(message("bnd.run.configuration.invalid",runFile));
  }
  try {
    String title=message("bnd.run.configuration.progress");
    myTester=ProgressManager.getInstance().run(new Task.WithResult<ProjectTester,Exception>(myConfiguration.getProject(),title,false){
      @Override protected ProjectTester compute(      @NotNull ProgressIndicator indicator) throws Exception {
        indicator.setIndeterminate(true);
        return Workspace.getRun(runFile).getProjectTester();
      }
    }
);
  }
 catch (  Exception e) {
    LOG.info(e);
    throw new CantRunException(message("bnd.run.configuration.cannot.run",runFile,e.getMessage()));
  }
  if (!(myTester instanceof EclipseJUnitTester)) {
    throw new CantRunException(message("bnd.test.runner.unsupported",myTester.getClass().getName()));
  }
  try {
    mySocket=new ServerSocket(0);
    ((EclipseJUnitTester)myTester).setPort(mySocket.getLocalPort());
  }
 catch (  Exception e) {
    LOG.info(e);
    throw new CantRunException(message("bnd.test.cannot.run",e.getMessage()));
  }
  try {
    myTester.prepare();
  }
 catch (  Exception e) {
    LOG.info(e);
    throw new CantRunException(message("bnd.run.configuration.cannot.run",runFile,e.getMessage()));
  }
}
