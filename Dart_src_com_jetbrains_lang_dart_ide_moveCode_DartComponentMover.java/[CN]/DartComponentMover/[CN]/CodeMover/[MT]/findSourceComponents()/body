{
  Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,info.toMove);
  if (psiRange == null)   return;
  PsiElement firstMember=getDeclarationParent(firstMoveableComponent(psiRange.first));
  if (firstMember == null)   return;
  PsiElement lastMember;
  if (isComment(firstMember)) {
    lastMember=findAttachedDeclaration(firstMember);
    if (lastMember == firstMember)     lastMember=getDeclarationParent(psiRange.second);
  }
 else {
    lastMember=firstMember;
    firstMember=findAttachedComment(firstMember);
    if (firstMember == lastMember && !isMovingDown) {
      if (lastMember.getParent() instanceof DartClassMembers) {
        DartClassMembers members=(DartClassMembers)lastMember.getParent();
        PsiElement next=nextSib(members,false);
        if (next instanceof PsiWhiteSpace && !isCommentSeparator(next))         next=nextSib(next,false);
        if (isComment(next))         firstMember=next;
      }
    }
  }
  if (lastMember == null)   return;
  PsiElement sibling=lastMember.getNextSibling();
  if (!isCommentSeparator(sibling)) {
    PsiElement next=firstNonWhiteElement(lastMember.getNextSibling(),true);
    if (isSemicolon(next))     lastMember=next;
    if (isMovingDown) {
      next=lastMember.getNextSibling();
      if (next == null && lastMember.getParent() instanceof DartClassMembers) {
        DartClassMembers members=(DartClassMembers)lastMember.getParent();
        next=nextSib(members,true);
      }
      if (next instanceof PsiWhiteSpace && !StringUtil.containsLineBreak(next.getText()))       next=next.getNextSibling();
      if (next != null && isLineComment(next))       lastMember=next;
    }
  }
  sourceComponents=Pair.create(firstMember,lastMember);
}
