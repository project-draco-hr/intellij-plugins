{
  if (!(file instanceof DartFile))   return false;
  if (!super.checkAvailable(editor,file,info,down))   return false;
  info.indentTarget=false;
  Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,info.toMove);
  if (psiRange == null)   return false;
  final PsiElement firstMember=getDeclarationParent(psiRange.getFirst());
  PsiElement endElement=psiRange.getSecond();
  final PsiElement lastMember=getDeclarationParent(endElement);
  if (firstMember == null || lastMember == null)   return false;
  LineRange range;
  if (firstMember == lastMember) {
    range=memberRange(firstMember,editor,info.toMove);
    if (range == null)     return false;
    range.firstElement=range.lastElement=firstMember;
  }
 else {
    final PsiElement parent=PsiTreeUtil.findCommonParent(firstMember,lastMember);
    if (parent == null)     return false;
    final Pair<PsiElement,PsiElement> combinedRange=getElementRange(parent,firstMember,lastMember);
    if (combinedRange == null)     return false;
    final LineRange lineRange1=memberRange(combinedRange.getFirst(),editor,info.toMove);
    if (lineRange1 == null)     return false;
    final LineRange lineRange2=memberRange(combinedRange.getSecond(),editor,info.toMove);
    if (lineRange2 == null)     return false;
    range=new LineRange(lineRange1.startLine,lineRange2.endLine);
    range.firstElement=combinedRange.getFirst();
    range.lastElement=combinedRange.getSecond();
  }
  Document document=editor.getDocument();
  PsiElement ref;
  PsiElement sibling=down ? (ref=range.lastElement.getNextSibling()) : (ref=range.firstElement).getPrevSibling();
  sibling=firstNonWhiteElement(sibling,down);
  ref=firstNonWhiteElement(ref,!down);
  info.toMove=range;
  if (sibling != null) {
    if (crossesHeaderBoundary(ref,sibling)) {
      info.prohibitMove();
      return true;
    }
    info.toMove2=new LineRange(sibling,sibling,document);
  }
  return true;
}
