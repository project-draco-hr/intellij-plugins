{
  final Project project=context.getProject();
  if (!AngularIndexUtil.hasAngularJS(project))   return;
  final PsiElement parent=context.getParent();
  if (context instanceof XmlAttributeValueImpl && parent instanceof XmlAttribute) {
    final String value=context.getText();
    final int start=value.startsWith("'") || value.startsWith("\"") ? 1 : 0;
    final int end=value.endsWith("'") || value.endsWith("\"") ? 1 : 0;
    final int length=value.length();
    if (AngularAttributesRegistry.isAngularExpressionAttribute((XmlAttribute)parent) && length > 1) {
      registrar.startInjecting(AngularJSLanguage.INSTANCE).addPlace(null,null,(PsiLanguageInjectionHost)context,new TextRange(start,length - end)).doneInjecting();
      return;
    }
    if (AngularAttributesRegistry.isJSONAttribute((XmlAttribute)parent) && length > 1) {
      registrar.startInjecting(JsonLanguage.INSTANCE).addPlace(null,null,(PsiLanguageInjectionHost)context,new TextRange(start,length - end)).doneInjecting();
      return;
    }
  }
  if (context instanceof XmlTextImpl || context instanceof XmlAttributeValueImpl) {
    final String start=AngularJSBracesUtil.getInjectionStart(project);
    final String end=AngularJSBracesUtil.getInjectionEnd(project);
    if (AngularJSBracesUtil.hasConflicts(start,end,context))     return;
    final String text=context.getText();
    int startIndex;
    int endIndex=-1;
    do {
      startIndex=text.indexOf(start,endIndex);
      int afterStart=startIndex + start.length();
      endIndex=startIndex >= 0 ? text.indexOf(end,afterStart) : -1;
      endIndex=endIndex > 0 ? endIndex : text.length() - 1;
      final PsiElement injectionCandidate=startIndex >= 0 ? context.findElementAt(startIndex) : null;
      if (injectionCandidate != null && injectionCandidate.getNode().getElementType() != XmlTokenType.XML_COMMENT_CHARACTERS && !(injectionCandidate instanceof OuterLanguageElement)) {
        if (afterStart > endIndex) {
          LOG.error("Braces: " + start + ","+ end+ "\n"+ "Text: \""+ text+ "\""+ "\n"+ "Interval: ("+ afterStart+ ","+ endIndex+ ")"+ "\n"+ "File: "+ context.getContainingFile().getName()+ ", language:"+ context.getContainingFile().getLanguage());
        }
        registrar.startInjecting(AngularJSLanguage.INSTANCE).addPlace(null,null,(PsiLanguageInjectionHost)context,new TextRange(afterStart,endIndex)).doneInjecting();
      }
    }
 while (startIndex >= 0);
  }
}
