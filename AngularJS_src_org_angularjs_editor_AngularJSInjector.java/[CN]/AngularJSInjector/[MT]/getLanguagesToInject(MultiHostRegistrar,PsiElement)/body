{
  if (context.getContainingFile().getViewProvider() instanceof MultiplePsiFilesPerDocumentFileViewProvider)   return;
  final Project project=context.getProject();
  if (!AngularIndexUtil.hasAngularJS(project))   return;
  final PsiElement parent=context.getParent();
  if (context instanceof XmlAttributeValueImpl && parent instanceof XmlAttribute) {
    final XmlAttribute attribute=(XmlAttribute)parent;
    if (AngularAttributesRegistry.isAngularAttribute(attribute,"ng-init") || AngularAttributesRegistry.isAngularAttribute(attribute,"ng-repeat") || AngularAttributesRegistry.isAngularAttribute(attribute,"ng-controller")) {
      registrar.startInjecting(AngularJSLanguage.INSTANCE).addPlace(null,null,(PsiLanguageInjectionHost)context,new TextRange(1,context.getTextLength() - 1)).doneInjecting();
      return;
    }
  }
  if (context instanceof XmlTextImpl || context instanceof XmlAttributeValueImpl) {
    final String text=context.getText();
    int startIndex;
    int endIndex=-1;
    do {
      startIndex=text.indexOf("{{",endIndex);
      endIndex=startIndex >= 0 ? text.indexOf("}}",startIndex) : -1;
      endIndex=endIndex > 0 ? endIndex : text.length();
      final PsiElement injectionCandidate=startIndex >= 0 ? context.findElementAt(startIndex) : null;
      if (injectionCandidate != null && injectionCandidate.getNode().getElementType() != XmlTokenType.XML_COMMENT_CHARACTERS) {
        registrar.startInjecting(AngularJSLanguage.INSTANCE).addPlace(null,null,(PsiLanguageInjectionHost)context,new TextRange(startIndex + 2,endIndex)).doneInjecting();
      }
    }
 while (startIndex >= 0);
  }
}
