{
  if (key.getSortOrder() == SortOrder.UNSORTED) {
    return;
  }
  final int columnModelIndex=key.getColumn();
  TableColumnModel colModel=table.getColumnModel();
  int modelIndex=colModel.getColumn(columnModelIndex).getModelIndex();
  if (modelIndex < 0 || getComparator(modelIndex) == null) {
    return;
  }
  final Comparator<TreeNode> comparator=new ComparatorWrapper<TreeNode>(getComparator(modelIndex),key.getSortOrder() == SortOrder.ASCENDING);
  if (JTreeUtil.isSorted(table.getTableModel(),comparator)) {
    return;
  }
  TreeUtil.sort((DefaultTreeModel)table.getTableModel(),comparator);
  final List<TreePath> paths=TreeUtil.collectExpandedPaths(table.getTree());
  table.reload();
  TreeUtil.restoreExpandedPaths(table.getTree(),paths);
}
