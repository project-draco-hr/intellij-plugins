{
  int i=s.indexOf('[');
  if (i != -1)   s=s.substring(0,i);
  final int packageEnd=s.indexOf("::");
  int methodNameStart=s.indexOf('/',packageEnd + 1);
  String qName=methodNameStart != -1 ? s.substring(0,methodNameStart) : s;
  qName=StringUtil.replace(qName,"::",".");
  for (  String suffix : suffixes) {
    if (qName.endsWith(suffix)) {
      qName=qName.substring(0,qName.length() - suffix.length());
      break;
    }
  }
  if (methodNameStart != -1) {
    ++methodNameStart;
    int methodNameEnd=s.indexOf('(',methodNameStart);
    if (methodNameEnd == -1)     methodNameEnd=s.length();
    int possibleGetSet=s.indexOf(' ',methodNameStart);
    final int oldMethodStart=methodNameStart;
    if (possibleGetSet != -1)     methodNameStart=possibleGetSet + 1;
    String methodName=s.substring(methodNameStart,methodNameEnd);
    final int nsStart=methodName.indexOf("::");
    String namespace=null;
    if (nsStart != -1) {
      namespace=methodName.substring(0,nsStart);
      methodName=methodName.substring(nsStart + "::".length());
    }
    JSFunction.FunctionKind kind=null;
    if (possibleGetSet != -1) {
      String getOrSet=s.substring(oldMethodStart,possibleGetSet);
      if ("get".equals(getOrSet)) {
        kind=JSFunction.FunctionKind.GETTER;
      }
 else       if ("set".equals(getOrSet))       kind=JSFunction.FunctionKind.SETTER;
    }
    if ("ctor".equals(methodName)) {
      methodName=qName.substring(qName.lastIndexOf('.') + 1);
    }
    return new LocationInfo(qName,methodName,kind,namespace);
  }
  return new LocationInfo(qName,null,null,null);
}
