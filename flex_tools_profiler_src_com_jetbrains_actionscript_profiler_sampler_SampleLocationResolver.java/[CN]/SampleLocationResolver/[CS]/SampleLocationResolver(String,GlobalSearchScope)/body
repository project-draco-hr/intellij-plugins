{
  this.scope=scope;
  String s=path;
  boolean resolved=false;
  int line=UNKNOWN_LINE;
  final int i=s.indexOf('[');
  final int i2=s.indexOf(']',i);
  if (i != -1 && i2 != -1) {
    s=s.substring(i + 1,i2);
    int i3=s.indexOf(';');
    int i4=s.indexOf(';',i3 + 1);
    if (i3 == -1)     return;
    String dir=s.substring(0,i3);
    String packageName=s.substring(i3 + 1,i4);
    String filename=s.substring(i4 + 1);
    if (packageName.length() > 0) {
      dir+=File.separatorChar + packageName.replace('.',File.separatorChar);
    }
    dir+=File.separatorChar;
    final int endIndex=filename.indexOf(':');
    dir+=filename.substring(0,endIndex != -1 ? endIndex : filename.length());
    VirtualFile relativeFile=VfsUtil.findRelativeFile(dir,null);
    if (relativeFile == null) {
      String className=packageName.replace('\\','.').replace('/','.');
      if (className.length() > 0)       className+=".";
      className+=filename.substring(0,filename.indexOf('.'));
      PsiElement element=JSResolveUtil.findClassByQName(className,scope);
      if (element != null)       element=element.getNavigationElement();
      if (element != null && element.isWritable()) {
        relativeFile=element.getContainingFile().getVirtualFile();
      }
    }
    line=endIndex != -1 ? Integer.parseInt(filename.substring(endIndex + 1)) - 1 : 0;
    if (relativeFile != null) {
      resolvedFile=relativeFile;
      this.resolvedLine=line;
      resolved=true;
    }
  }
  if (!resolved) {
    LocationInfo locationInfo=buildMethodInfo(path);
    PsiElement element=JSResolveUtil.findClassByQName(locationInfo.clazz,scope);
    if (element instanceof XmlBackedJSClassImpl) {
      final PsiElement candidateElement=locationInfo.findFunctionOrField((XmlBackedJSClassImpl)element);
      if (candidateElement != null)       element=candidateElement;
    }
 else {
      if (element != null)       element=element.getNavigationElement();
      if (element instanceof JSClass) {
        final PsiElement candidateElement=locationInfo.findFunctionOrField((JSClass)element);
        if (candidateElement != null)         element=candidateElement;
      }
    }
    if (element instanceof Navigatable) {
      if (line != UNKNOWN_LINE) {
        this.resolvedLine=line;
        resolvedFile=element.getContainingFile().getVirtualFile();
      }
 else {
        resolvedElement=element;
      }
    }
  }
}
