{
  return new BaseCreateMethodsFix<JSVariable>(jsClass){
    @Override public void invoke(    @NotNull final Project project,    final Editor editor,    final PsiFile file) throws IncorrectOperationException {
      final JSCodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project).getCustomSettings(JSCodeStyleSettings.class);
      evalAnchor(editor,file);
      @NonNls String functionText="public function " + jsClass.getName() + "(";
      @NonNls String initialization="";
      boolean first=true;
      final String semicolon=JSChangeUtil.getSemicolon(project);
      Set<JSVariable> toProcess=getElementsToProcess();
      Iterator<JSVariable> variableIterator=toProcess.iterator();
      boolean hadSuperClassConstructorInitializationBefore=false;
      while (variableIterator.hasNext()) {
        JSVariable var=variableIterator.next();
        if (!first) {
          functionText+=", ";
        }
        first=false;
        final String name=var.getName();
        String parameterName=JSResolveUtil.transformVarNameToAccessorName(name,codeStyleSettings);
        final String typeString=var.getTypeString();
        functionText+=parameterName + (typeString != null ? ":" + typeString : "");
        if (JSResolveUtil.findParent(var) == jsClass) {
          if (hadSuperClassConstructorInitializationBefore) {
            initialization+=")" + semicolon + "\n";
            hadSuperClassConstructorInitializationBefore=false;
          }
          initialization+=(parameterName.equals(name) ? "this." : "") + name + " = "+ parameterName+ semicolon+ "\n";
        }
 else {
          if (hadSuperClassConstructorInitializationBefore) {
            initialization+=", ";
          }
 else {
            initialization+="super(";
          }
          initialization+=parameterName;
          hadSuperClassConstructorInitializationBefore=true;
        }
      }
      if (hadSuperClassConstructorInitializationBefore)       initialization+=")" + semicolon + "\n";
      functionText+=") {\n";
      functionText+=initialization;
      functionText+="}";
      doAddOneMethod(project,functionText,anchor);
    }
    @Override public Set<JSVariable> getElementsToProcess(){
      LinkedHashSet<JSVariable> vars=new LinkedHashSet<JSVariable>();
      JSFunction nontrivialSuperClassConstructor=JSAnnotatingVisitor.getNontrivialSuperClassConstructor(jsClass);
      if (nontrivialSuperClassConstructor != null) {
        ContainerUtil.addAll(vars,nontrivialSuperClassConstructor.getParameterList().getParameters());
      }
      vars.addAll(super.getElementsToProcess());
      return vars;
    }
  }
;
}
