{
  final ProcessHandler coverageProcess=coverageSuite.getCoverageProcess();
  if (coverageProcess != null) {
    for (int i=0; i < 100; ++i) {
      ProgressManager.checkCanceled();
      if (coverageProcess.waitFor(100)) {
        break;
      }
    }
    if (!coverageProcess.isProcessTerminated()) {
      coverageProcess.destroyProcess();
      return null;
    }
  }
  final String contextFilePath=coverageSuite.getContextFilePath();
  if (contextFilePath == null) {
    return null;
  }
  final String contextId=DartAnalysisServerService.getInstance().execution_createContext(contextFilePath);
  if (contextId == null) {
    return null;
  }
  final ProjectData projectData=new ProjectData();
  try {
    DartCoverageData data=new Gson().fromJson(new BufferedReader(new FileReader(sessionDataFile)),DartCoverageData.class);
    if (data == null) {
      LOG.warn("Coverage file does not contain valid data.");
      return null;
    }
    for (    Map.Entry<String,SortedMap<Integer,Integer>> entry : data.getMergedDartFileCoverageData().entrySet()) {
      ProgressManager.checkCanceled();
      String filePath=getFileForUri(contextId,entry.getKey());
      if (filePath == null) {
        continue;
      }
      SortedMap<Integer,Integer> lineHits=entry.getValue();
      ClassData classData=projectData.getOrCreateClassData(filePath);
      if (lineHits.size() == 0) {
        classData.setLines(new LineData[1]);
        continue;
      }
      LineData[] lines=new LineData[lineHits.lastKey() + 1];
      for (      Map.Entry<Integer,Integer> hit : lineHits.entrySet()) {
        LineData lineData=new LineData(hit.getKey(),null);
        lineData.setHits(hit.getValue());
        lines[hit.getKey()]=lineData;
      }
      classData.setLines(lines);
    }
  }
 catch (  FileNotFoundException|JsonSyntaxException e) {
    LOG.warn(e);
  }
 finally {
    DartAnalysisServerService.getInstance().execution_deleteContext(contextId);
  }
  return projectData;
}
