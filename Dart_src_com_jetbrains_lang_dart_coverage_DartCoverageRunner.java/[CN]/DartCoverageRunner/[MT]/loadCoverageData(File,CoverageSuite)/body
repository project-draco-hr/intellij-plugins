{
  if (baseCoverageSuite == null || !(baseCoverageSuite instanceof DartCoverageSuite)) {
    return null;
  }
  DartCoverageSuite coverageSuite=(DartCoverageSuite)baseCoverageSuite;
  VirtualFile contextFile=coverageSuite.getContextFile();
  if (contextFile == null) {
    return null;
  }
  String contextId=DartAnalysisServerService.getInstance().execution_createContext(contextFile.getPath());
  if (contextId == null) {
    return null;
  }
  try {
    for (int i=0; i < 10; i++) {
      LOG.warn(new Date().getTime() + ":" + sessionDataFile.length()+ ","+ sessionDataFile.exists());
      if (sessionDataFile.length() > 0) {
        break;
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        LOG.warn("Sleep interrupted.");
      }
    }
    DartCoverageData data=new Gson().fromJson(new BufferedReader(new FileReader(sessionDataFile)),DartCoverageData.class);
    ProjectData projectData=new ProjectData();
    for (    Map.Entry<String,SortedMap<Integer,Integer>> entry : data.getMergedDartFileCoverageData().entrySet()) {
      String filePath=getFileForUri(contextId,entry.getKey());
      if (filePath == null) {
        continue;
      }
      SortedMap<Integer,Integer> lineHits=entry.getValue();
      ClassData classData=projectData.getOrCreateClassData(filePath);
      if (lineHits.size() == 0) {
        classData.setLines(new LineData[1]);
        continue;
      }
      LineData[] lines=new LineData[lineHits.lastKey() + 1];
      for (      Map.Entry<Integer,Integer> hit : lineHits.entrySet()) {
        LineData lineData=new LineData(hit.getKey(),null);
        lineData.setHits(hit.getValue());
        lines[hit.getKey()]=lineData;
      }
      classData.setLines(lines);
    }
    return projectData;
  }
 catch (  FileNotFoundException e) {
    LOG.warn(e);
    return null;
  }
 finally {
    DartAnalysisServerService.getInstance().execution_deleteContext(contextId);
  }
}
