{
  if (!(yamlDep instanceof Map))   return;
  for (  Map.Entry<String,Object> packageEntry : ((Map<String,Object>)yamlDep).entrySet()) {
    final String packageName=packageEntry.getKey();
    final Object packageEntryValue=packageEntry.getValue();
    if (packageEntryValue instanceof Map) {
      final Object pathObj=((Map)packageEntryValue).get(PATH);
      if (pathObj instanceof String) {
        final VirtualFile packageFolder=VfsUtilCore.findRelativeFile(pathObj + "/" + LIB_DIR_NAME,baseDir);
        if (packageFolder != null && packageFolder.isDirectory() && ProjectRootManager.getInstance(project).getFileIndex().isInContent(packageFolder)) {
          pathPackageNameAndRelPathConsumer.consume(packageName,packageFolder);
          final VirtualFile otherPubspecYaml=packageFolder.getParent().findChild(PUBSPEC_YAML);
          if (otherPubspecYaml != null && !otherPubspecYaml.isDirectory()) {
            processInProjectPathPackagesRecursively(project,otherPubspecYaml,processedPubspecs,pathPackageNameAndRelPathConsumer);
          }
        }
      }
    }
  }
}
