{
  final String fullTestName=getTestName(true);
  final int dollarIndex=fullTestName.lastIndexOf('$');
  final String fixSimpleClassName=dollarIndex > 0 ? fullTestName.substring(dollarIndex + 1) : null;
  final String testName=dollarIndex > 0 ? fullTestName.substring(0,dollarIndex) : fullTestName;
  String[] files=ArrayUtil.append(additionalFiles,testName + getExtension());
  files=ArrayUtil.reverseArray(files);
  myFixture.configureByFiles(files);
  final Annotation annotation=doHighlightingAndFindIntention(message);
  assertNotNull("Can't find intention for message: " + message,annotation);
  final List<Annotation.QuickFixInfo> quickFixes=annotation.getQuickFixes();
  assertNotNull("Can't find fixes",quickFixes);
  assertFalse(quickFixes.isEmpty());
  final List<Annotation.QuickFixInfo> quickFixInfos=ContainerUtil.findAll(quickFixes,new Condition<Annotation.QuickFixInfo>(){
    @Override public boolean value(    Annotation.QuickFixInfo info){
      return fixSimpleClassName == null || info.quickFix.getClass().getSimpleName().equals(fixSimpleClassName);
    }
  }
);
  assertEquals("One quick fix expected",1,quickFixInfos.size());
  final Annotation.QuickFixInfo quickFixInfo=quickFixInfos.get(0);
  assertTrue("Fix not available",quickFixInfo.quickFix.isAvailable(myFixture.getProject(),myFixture.getEditor(),myFixture.getFile()));
  myFixture.launchAction(quickFixInfo.quickFix);
}
