{
  final DartClass dartClass=((DartTypeHierarchyNodeDescriptor)descriptor).getDartClass();
  if (dartClass == null) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final List<DartClass> supers=new ArrayList<DartClass>();
  final DartType superClass=dartClass.getSuperClass();
  if (superClass != null && !DartResolveUtil.OBJECT.equals(superClass.getName())) {
    final DartClassResolveResult dartClassResolveResult=DartResolveUtil.resolveClassByType(superClass);
    if (dartClassResolveResult.getDartClass() != null) {
      supers.add(dartClassResolveResult.getDartClass());
    }
  }
  List<DartClassResolveResult> implementsAndMixinsList=DartResolveUtil.resolveClassesByTypes(DartResolveUtil.getImplementsAndMixinsList(dartClass));
  for (  DartClassResolveResult resolveResult : implementsAndMixinsList) {
    final DartClass resolveResultDartClass=resolveResult.getDartClass();
    if (resolveResultDartClass != null) {
      supers.add(resolveResultDartClass);
    }
  }
  final List<DartTypeHierarchyNodeDescriptor> descriptors=new ArrayList<DartTypeHierarchyNodeDescriptor>(supers.size());
  for (  DartClass aSuper : supers) {
    descriptors.add(new DartTypeHierarchyNodeDescriptor(myProject,descriptor,aSuper,false));
  }
  return descriptors.toArray(new HierarchyNodeDescriptor[descriptors.size()]);
}
