{
  List<JSStatement> statements=JsPsiUtils.listStatementsInExecutionOrderNextTo(refStatement);
  for (  JSStatement statement : statements) {
    JSExpressionStatement expressionStatement=CastUtils.tryCast(statement,JSExpressionStatement.class);
    if (expressionStatement != null) {
      JSAssignmentExpression assignmentExpr=CastUtils.tryCast(expressionStatement.getExpression(),JSAssignmentExpression.class);
      if (assignmentExpr != null) {
        JSDefinitionExpression wholeLeftDefExpr=CastUtils.tryCast(assignmentExpr.getLOperand(),JSDefinitionExpression.class);
        if (wholeLeftDefExpr != null) {
          JSReferenceExpression wholeLeftRefExpr=CastUtils.tryCast(wholeLeftDefExpr.getExpression(),JSReferenceExpression.class);
          if (wholeLeftRefExpr != null) {
            JSReferenceExpression testCaseAndPrototypeRefExpr=CastUtils.tryCast(wholeLeftRefExpr.getQualifier(),JSReferenceExpression.class);
            if (testCaseAndPrototypeRefExpr != null) {
              if ("prototype".equals(testCaseAndPrototypeRefExpr.getReferencedName())) {
                JSReferenceExpression testCaseRefExpr=CastUtils.tryCast(testCaseAndPrototypeRefExpr.getQualifier(),JSReferenceExpression.class);
                if (testCaseRefExpr != null && testCaseRefExpr.getQualifier() == null) {
                  if (referenceName.equals(testCaseRefExpr.getReferencedName())) {
                    addPrototypeTest(testCaseStructure,assignmentExpr.getROperand(),wholeLeftRefExpr.getReferenceNameElement());
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
