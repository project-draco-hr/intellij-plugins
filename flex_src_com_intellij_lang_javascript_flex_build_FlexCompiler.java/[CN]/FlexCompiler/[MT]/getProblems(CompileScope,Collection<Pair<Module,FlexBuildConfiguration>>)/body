{
  final Collection<Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem>> problems=new ArrayList<Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem>>();
  for (  final Pair<Module,FlexBuildConfiguration> moduleAndBC : modulesAndBCsToCompile) {
    final Module module=moduleAndBC.first;
    final FlexBuildConfiguration bc=moduleAndBC.second;
    final Consumer<FlashProjectStructureProblem> errorConsumer=new Consumer<FlashProjectStructureProblem>(){
      public void consume(      final FlashProjectStructureProblem problem){
        problems.add(Trinity.create(module,bc,problem));
      }
    }
;
    checkConfiguration(module,bc,false,errorConsumer);
    if (bc.getNature().isMobilePlatform() && bc.getNature().isApp()) {
      final RunConfiguration runConfig=CompileStepBeforeRun.getRunConfiguration(scope);
      if (runConfig instanceof FlashRunConfiguration) {
        final FlashRunnerParameters params=((FlashRunConfiguration)runConfig).getRunnerParameters();
        if (module.getName().equals(params.getModuleName()) && bc.getName().equals(params.getBCName())) {
          if (params.getMobileRunTarget() == AirMobileRunTarget.AndroidDevice) {
            checkPackagingOptions(bc.getAndroidPackagingOptions(),PathUtil.getParentPath(bc.getActualOutputFilePath()),errorConsumer);
          }
 else           if (params.getMobileRunTarget() == AirMobileRunTarget.iOSDevice) {
            checkPackagingOptions(bc.getIosPackagingOptions(),PathUtil.getParentPath(bc.getActualOutputFilePath()),errorConsumer);
          }
        }
      }
    }
  }
  checkSimilarOutputFiles(modulesAndBCsToCompile,new Consumer<Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem>>(){
    public void consume(    final Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem> trinity){
      problems.add(trinity);
    }
  }
);
  return problems;
}
