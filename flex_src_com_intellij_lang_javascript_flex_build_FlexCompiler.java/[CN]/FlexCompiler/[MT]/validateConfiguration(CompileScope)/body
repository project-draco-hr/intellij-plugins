{
  final Module[] modules=scope.getAffectedModules();
  final Project project=modules.length > 0 ? modules[0].getProject() : null;
  if (project == null)   return true;
  final FlashProjectStructureErrorsDialog dialog=new FlashProjectStructureErrorsDialog(project);
  try {
    final Collection<Pair<Module,FlexIdeBuildConfiguration>> modulesAndBCsToCompile=getModulesAndBCsToCompile(scope);
    for (    final Pair<Module,FlexIdeBuildConfiguration> moduleAndBC : modulesAndBCsToCompile) {
      final Consumer<FlashProjectStructureProblem> errorConsumer=new Consumer<FlashProjectStructureProblem>(){
        public void consume(        final FlashProjectStructureProblem problem){
          dialog.addProblem(moduleAndBC.first,moduleAndBC.second,problem);
        }
      }
;
      checkConfiguration(moduleAndBC.first,moduleAndBC.second,false,errorConsumer);
      if (moduleAndBC.second.getNature().isMobilePlatform() && moduleAndBC.second.getNature().isApp()) {
        final RunConfiguration runConfig=CompileStepBeforeRun.getRunConfiguration(scope);
        if (runConfig instanceof FlashRunConfiguration) {
          final FlashRunnerParameters params=((FlashRunConfiguration)runConfig).getRunnerParameters();
          if (moduleAndBC.first.getName().equals(params.getModuleName()) && moduleAndBC.second.getName().equals(params.getBCName()) && params.getMobileRunTarget() == AirMobileRunTarget.AndroidDevice) {
            checkPackagingOptions(moduleAndBC.second.getAndroidPackagingOptions(),errorConsumer);
          }
        }
      }
    }
    checkSimilarOutputFiles(modulesAndBCsToCompile,new Consumer<Trinity<Module,FlexIdeBuildConfiguration,FlashProjectStructureProblem>>(){
      public void consume(      final Trinity<Module,FlexIdeBuildConfiguration,FlashProjectStructureProblem> trinity){
        dialog.addProblem(trinity.first,trinity.second,trinity.third);
      }
    }
);
  }
 catch (  ConfigurationException e) {
    Messages.showErrorDialog(project,e.getMessage(),FlexBundle.message("project.setup.problem.title"));
    return false;
  }
  if (dialog.containsProblems()) {
    dialog.show();
    if (dialog.isOK()) {
      ShowSettingsUtil.getInstance().editConfigurable(project,ProjectStructureConfigurable.getInstance(project));
    }
    return false;
  }
  return true;
}
