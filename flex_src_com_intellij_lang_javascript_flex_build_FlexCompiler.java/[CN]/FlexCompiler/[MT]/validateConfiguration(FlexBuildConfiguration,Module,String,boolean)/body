{
  if (!config.DO_BUILD)   return Pair.create(true,null);
  final Sdk flexSdk=FlexUtils.getFlexSdkForFlexModuleOrItsFlexFacets(module);
  if (flexSdk == null) {
    return Pair.create(false,FlexBundle.message("flex.sdk.not.set.for",presentableModuleOrFacetName));
  }
  if (flexSdk.getSdkType() instanceof FlexmojosSdkType) {
    final SdkAdditionalData data=flexSdk.getSdkAdditionalData();
    if (data == null || !(data instanceof FlexmojosSdkAdditionalData) || ((FlexmojosSdkAdditionalData)data).getFlexCompilerClasspath().isEmpty()) {
      return Pair.create(false,FlexBundle.message("sdk.flex.compiler.classpath.not.set",flexSdk.getName()));
    }
  }
 else {
    final VirtualFile sdkRoot=flexSdk.getHomeDirectory();
    if (sdkRoot == null || !sdkRoot.isValid()) {
      return Pair.create(false,FlexBundle.message("sdk.home.directory.not.found.for",flexSdk.getName()));
    }
  }
  if (config.USE_CUSTOM_CONFIG_FILE) {
    if (config.getType() == FlexBuildConfiguration.Type.FlexUnit && config.USE_CUSTOM_CONFIG_FILE_FOR_TESTS) {
      if (StringUtil.isEmptyOrSpaces(config.CUSTOM_CONFIG_FILE_FOR_TESTS)) {
        return Pair.create(false,FlexBundle.message("flex.compiler.config.file.for.tests.not.specified",presentableModuleOrFacetName));
      }
      final VirtualFile configFileForTests=VfsUtil.findRelativeFile(config.CUSTOM_CONFIG_FILE_FOR_TESTS,FlexUtils.getFlexCompilerWorkDir(module.getProject(),null));
      if (configFileForTests == null || !configFileForTests.isValid() || configFileForTests.isDirectory()) {
        return Pair.create(false,FlexBundle.message("flex.compiler.config.file.for.tests.not.found",config.CUSTOM_CONFIG_FILE_FOR_TESTS,presentableModuleOrFacetName));
      }
    }
 else {
      if (StringUtil.isEmptyOrSpaces(config.CUSTOM_CONFIG_FILE)) {
        return Pair.create(false,FlexBundle.message("flex.compiler.config.file.not.specified",presentableModuleOrFacetName));
      }
      final VirtualFile configFile=VfsUtil.findRelativeFile(config.CUSTOM_CONFIG_FILE,FlexUtils.getFlexCompilerWorkDir(module.getProject(),null));
      if (configFile == null || !configFile.isValid() || configFile.isDirectory()) {
        return Pair.create(false,FlexBundle.message("flex.compiler.config.file.not.found",config.CUSTOM_CONFIG_FILE,presentableModuleOrFacetName));
      }
    }
  }
 else {
    if (chooseMainClassIfNeeded && config.OUTPUT_TYPE.equals(FlexBuildConfiguration.APPLICATION) && StringUtil.isEmptyOrSpaces(FlexUtils.getPathToMainClassFile(config))) {
      final ChooseMainClassDialog dialog=new ChooseMainClassDialog(module,presentableModuleOrFacetName,config.MAIN_CLASS,FlexBundle.message("flex.compiler.problem"));
      dialog.show();
      if (dialog.isOK()) {
        config.MAIN_CLASS=dialog.getMainClassName();
      }
 else {
        return Pair.create(false,null);
      }
    }
    if (config.OUTPUT_TYPE.equals(FlexBuildConfiguration.APPLICATION)) {
      if (StringUtil.isEmptyOrSpaces(config.MAIN_CLASS)) {
        return Pair.create(false,FlexBundle.message("main.class.not.set.for",presentableModuleOrFacetName));
      }
 else       if (StringUtil.isEmptyOrSpaces(FlexUtils.getPathToMainClassFile(config))) {
        return Pair.create(false,FlexBundle.message("main.class.not.found",config.MAIN_CLASS,presentableModuleOrFacetName));
      }
    }
    if (StringUtil.isEmptyOrSpaces(config.OUTPUT_FILE_NAME)) {
      return Pair.create(false,FlexBundle.message("output.file.name.not.specified.for",presentableModuleOrFacetName));
    }
    if (TargetPlayerUtils.isTargetPlayerApplicable(flexSdk) && !TargetPlayerUtils.isTargetPlayerValid(config.TARGET_PLAYER_VERSION)) {
      return Pair.create(false,FlexBundle.message("invalid.target.player.version.for",config.TARGET_PLAYER_VERSION,presentableModuleOrFacetName));
    }
    for (    FlexBuildConfiguration.NamespaceAndManifestFileInfo info : config.NAMESPACE_AND_MANIFEST_FILE_INFO_LIST) {
      if (StringUtil.isEmptyOrSpaces(info.MANIFEST_FILE_PATH)) {
        return Pair.create(false,FlexBundle.message("flex.compiler.config.manifest.file.not.specified",presentableModuleOrFacetName));
      }
      final VirtualFile manifestFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(info.MANIFEST_FILE_PATH);
      if (manifestFile == null || manifestFile.isDirectory()) {
        return Pair.create(false,FlexBundle.message("flex.compiler.config.manifest.file.not.found",info.MANIFEST_FILE_PATH,presentableModuleOrFacetName));
      }
    }
    for (    FlexBuildConfiguration.ConditionalCompilationDefinition definition : config.CONDITIONAL_COMPILATION_DEFINITION_LIST) {
      if (!definition.NAME.matches(CONDITIONAL_COMPILATION_VARIABLE_PATTERN)) {
        return Pair.create(false,FlexBundle.message("incorrect.conditional.compilation.definition",definition.NAME));
      }
    }
    if (!StringUtil.isEmpty(config.PATH_TO_SERVICES_CONFIG_XML)) {
      final VirtualFile servicesConfigXml=VfsUtil.findRelativeFile(config.PATH_TO_SERVICES_CONFIG_XML,FlexUtils.getFlexCompilerWorkDir(module.getProject(),null));
      if (servicesConfigXml == null || servicesConfigXml.isDirectory()) {
        return Pair.create(false,FlexBundle.message("flex.services-config.xml.file.is.not.valid",config.PATH_TO_SERVICES_CONFIG_XML,presentableModuleOrFacetName));
      }
    }
  }
  return Pair.create(true,null);
}
