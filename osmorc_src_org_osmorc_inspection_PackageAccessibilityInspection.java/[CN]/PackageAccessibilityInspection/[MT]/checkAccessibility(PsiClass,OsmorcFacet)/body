{
  if (targetClass.isAnnotationType()) {
    RetentionPolicy retention=AnnotationsHighlightUtil.getRetentionPolicy(targetClass);
    if (retention == RetentionPolicy.SOURCE || retention == RetentionPolicy.CLASS) {
      return null;
    }
  }
  PsiFile targetFile=targetClass.getContainingFile();
  if (!(targetFile instanceof PsiClassOwner)) {
    return null;
  }
  String packageName=((PsiClassOwner)targetFile).getPackageName();
  if (packageName.isEmpty() || packageName.startsWith("java.")) {
    return null;
  }
  Project project=targetClass.getProject();
  Module requestorModule=facet.getModule();
  Module targetModule=ModuleUtilCore.findModuleForPsiElement(targetClass);
  if (targetModule == requestorModule) {
    return null;
  }
  BundleManifest manifest=BundleManifestCache.getInstance(project).getManifest(requestorModule);
  if (manifest != null && (manifest.isPrivatePackage(packageName) || manifest.getExportedPackage(packageName) != null)) {
    return null;
  }
  BundleManifest exporter=BundleManifestCache.getInstance(project).getManifest(targetClass);
  if (exporter == null || exporter.getBundleSymbolicName() == null) {
    return Problem.weak(message("PackageAccessibilityInspection.non.osgi",packageName));
  }
  String exportedPackage=exporter.getExportedPackage(packageName);
  if (exportedPackage == null) {
    return Problem.error(message("PackageAccessibilityInspection.not.exported",packageName));
  }
  if (!facet.getConfiguration().isManifestManuallyEdited()) {
    return null;
  }
  if (manifest != null) {
    if (manifest.isPackageImported(packageName)) {
      return null;
    }
    if (manifest.isBundleRequired(exporter.getBundleSymbolicName())) {
      return null;
    }
  }
  return Problem.error(message("PackageAccessibilityInspection.not.imported",packageName),new ImportPackageFix(exportedPackage));
}
