{
  if (file.getViewProvider().getPsi(JavaLanguage.INSTANCE) == null || !checkTests && ProjectRootsUtil.isInTestSource(file)) {
    return null;
  }
  final OsmorcFacet facet=OsmorcFacet.getInstance(file);
  if (facet == null) {
    return null;
  }
  final List<ProblemDescriptor> problems=ContainerUtil.newSmartList();
  DependenciesBuilder.analyzeFileDependencies(file,new DependenciesBuilder.DependencyProcessor(){
    @Override public void process(    PsiElement place,    PsiElement dependency){
      if (dependency instanceof PsiClass && PsiTreeUtil.getParentOfType(place,PsiImportList.class) == null) {
        String toImport=checkAccessibility((PsiClass)dependency,facet);
        if (toImport == NOT_EXPORTED) {
          String message=OsmorcBundle.message("WrongImportPackageInspection.message");
          problems.add(manager.createProblemDescriptor(place,message,isOnTheFly,null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
 else         if (toImport != null) {
          String message=OsmorcBundle.message("PackageAccessibilityInspection.message");
          LocalQuickFix[] fixes={new ImportPackageFix(toImport)};
          problems.add(manager.createProblemDescriptor(place,message,isOnTheFly,fixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
    }
  }
);
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
