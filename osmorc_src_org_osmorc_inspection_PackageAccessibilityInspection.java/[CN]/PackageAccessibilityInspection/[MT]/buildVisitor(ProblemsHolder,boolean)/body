{
  return new JavaElementVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      checkReference(reference);
    }
    @Override public void visitImportStaticReferenceElement(    PsiImportStaticReferenceElement reference){
      checkReference(reference);
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      checkReference(expression);
    }
    private void checkReference(    PsiJavaCodeReferenceElement ref){
      OsmorcFacet facet=OsmorcFacet.getInstance(ref);
      if (facet != null && facet.getConfiguration().isManifestManuallyEdited()) {
        PsiElement target=ref.resolve();
        Module module=facet.getModule();
        if (target instanceof PsiClass && !isAccessible((PsiClass)target,module)) {
          LocalQuickFix fix=new ImportPackageFix();
          holder.registerProblem(ref,OsmorcBundle.message("PackageAccessibilityInspection.message"),fix);
        }
      }
    }
    private boolean isAccessible(    PsiClass aClass,    Module requestorModule){
      String packageName=((PsiJavaFile)aClass.getContainingFile()).getPackageName();
      if (packageName.isEmpty() || packageName.startsWith("java.")) {
        return true;
      }
      Module targetModule=ModuleUtilCore.findModuleForPsiElement(aClass);
      if (targetModule == requestorModule) {
        return true;
      }
      BundleManager bundleManager=ServiceManager.getService(holder.getProject(),BundleManager.class);
      BundleManifest manifest=bundleManager.getManifestByObject(requestorModule);
      if (manifest != null) {
        if (manifest.isPackageImported(packageName)) {
          return true;
        }
        for (        String bundleSpec : manifest.getRequiredBundles()) {
          BundleManifest bundle=bundleManager.getManifestByBundleSpec(bundleSpec);
          if (bundle != null && bundle.isPackageExported(packageName)) {
            return true;
          }
        }
      }
      return false;
    }
  }
;
}
