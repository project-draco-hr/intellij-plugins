{
  boolean parentTagWritten=configurationName == null;
  for (  Method method : configClass.getDeclaredMethods()) {
    method.setAccessible(true);
    if (!Modifier.isPublic(method.getModifiers()) || method.getParameterTypes().length != 0) {
      continue;
    }
    String methodName=method.getName();
    if (methodName.equals("getLoadConfig") || methodName.equals("getDumpConfig")) {
      continue;
    }
    Object value=method.invoke(configuration);
    if (value == null) {
      continue;
    }
    if (methodName.equals("getFixedLiteralVector") && !((Boolean)value)) {
      continue;
    }
    if (!parentTagWritten) {
      parentTagWritten=true;
      out.append(indent,0,indent.length() - 1).append('<').append(configurationName).append('>');
    }
    Class<?> returnType=method.getReturnType();
    String name=parseName(methodName);
    if (value instanceof IFlexConfiguration) {
      build(value,returnType,indent + "\t",name.substring(0,name.length() - 14));
    }
 else     if (configuration instanceof IASDocConfiguration && "footer".equals(name)) {
      throw new UnsupportedOperationException();
    }
 else     if (value instanceof IRuntimeSharedLibraryPath || value instanceof IRuntimeSharedLibraryPath[]) {
      final IRuntimeSharedLibraryPath[] values;
      if (returnType.isArray()) {
        values=(IRuntimeSharedLibraryPath[])value;
      }
 else {
        values=new IRuntimeSharedLibraryPath[]{(IRuntimeSharedLibraryPath)value};
      }
      for (      IRuntimeSharedLibraryPath arg : values) {
        out.append("\n\t<").append(name).append(">\n\t\t<path-element>").append(arg.pathElement()).append("</path-element>");
        for (        Map.Entry<String,String> entry : (Set<Map.Entry<String,String>>)arg.rslUrl().entrySet()) {
          out.append("\n\t\t<rsl-url>").append(entry.getKey()).append("</rsl-url>");
          if (entry.getValue() != null) {
            out.append("\n\t\t<policy-file-url>").append(entry.getValue()).append("</policy-file-url>");
          }
        }
        out.append("\n\t</").append(name).append('>');
      }
    }
 else     if (value instanceof IFlexArgument || value instanceof IFlexArgument[]) {
      IFlexArgument[] values;
      Class<?> type=returnType;
      if (type.isArray()) {
        values=(IFlexArgument[])value;
        type=returnType.getComponentType();
      }
 else {
        values=new IFlexArgument[]{(IFlexArgument)value};
        type=returnType;
      }
      Field orderField=type.getField("ORDER");
      orderField.setAccessible(true);
      String[] order=(String[])type.getField("ORDER").get(returnType);
      for (      IFlexArgument iFlexArgument : values) {
        out.append(indent).append('<').append(name).append('>');
        for (        String argMethodName : order) {
          Object argValue=type.getDeclaredMethod(argMethodName).invoke(iFlexArgument);
          if (argValue == null) {
            throw new UnsupportedOperationException();
          }
 else           if (argValue instanceof Collection<?> || argValue.getClass().isArray()) {
            throw new UnsupportedOperationException();
          }
 else           if (argValue instanceof Map<?,?>) {
            throw new UnsupportedOperationException();
          }
 else {
            writeTag(indent,argMethodName.equals("serialNumber") ? "serial-number" : argMethodName,(String)argValue,name);
          }
        }
        out.append(indent).append("</").append(name).append('>');
      }
    }
 else     if (configuration instanceof IMetadataConfiguration && (name.equals("language") || name.equals("creator") || name.equals("publisher"))) {
      for (      String v : (String[])value) {
        out.append(indent).append("<").append(name).append(">").append(v).append("</").append(name).append('>');
      }
    }
 else     if (returnType.isArray() || value instanceof Collection<?>) {
      Object[] values;
      if (returnType.isArray()) {
        values=(Object[])value;
      }
 else {
        values=((Collection<?>)value).toArray();
      }
      out.append(indent).append('<').append(name);
      if (values.length == 0) {
        out.append("/>");
      }
 else {
        out.append('>');
        String childTagName=childTagNameMap.get(name);
        if (childTagName == null) {
          childTagName=PATH_ELEMENT;
        }
        for (        Object v : values) {
          writeTag(indent,childTagName,v.toString(),name);
        }
        out.append(indent).append("</").append(name).append('>');
      }
    }
 else {
      out.append(indent).append('<').append(name).append('>');
      processValue(value.toString(),name);
      out.append("</").append(name).append('>');
    }
  }
  if (parentTagWritten && configurationName != null) {
    out.append(indent,0,indent.length() - 1).append("</").append(configurationName).append('>');
  }
}
