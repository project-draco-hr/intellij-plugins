{
  final Project project=context.getProject();
  final Module module=ModuleUtil.findModuleForPsiElement(context);
  final List<Property> properties=ContainerUtil.findAll(PropertiesUtil.findPropertiesByKey(project,name),new Condition<Property>(){
    public boolean value(    final Property property){
      return Comparing.equal(property.getKey(),name);
    }
  }
);
  String value=null;
  final Property strutsDefaultProperty=ContainerUtil.find(properties,new Condition<Property>(){
    public boolean value(    final Property property){
      final VirtualFile virtualFile=property.getContainingFile().getVirtualFile();
      return virtualFile != null && virtualFile.getFileSystem() instanceof JarFileSystem && StringUtil.endsWith(virtualFile.getPath(),STRUTS_DEFAULT_PROPERTIES) && ModuleUtil.moduleContainsFile(module,virtualFile,true);
    }
  }
);
  if (strutsDefaultProperty != null) {
    value=strutsDefaultProperty.getValue();
  }
  final Condition<Constant> constantNameCondition=new Condition<Constant>(){
    public boolean value(    final Constant constant){
      return Comparing.equal(constant.getName().getStringValue(),name);
    }
  }
;
  final List<DomFileElement<StrutsRoot>> domFileElements=new ArrayList<DomFileElement<StrutsRoot>>();
  collectStrutsXmls(domFileElements,strutsModel,"struts-default.xml",true);
  collectStrutsXmls(domFileElements,strutsModel,"struts-plugin.xml",true);
  collectStrutsXmls(domFileElements,strutsModel,"struts.xml",false);
  for (  final DomFileElement<StrutsRoot> domFileElement : domFileElements) {
    final Constant constant=ContainerUtil.find(domFileElement.getRootElement().getConstants(),constantNameCondition);
    final String strutsXmlValue=constant != null ? constant.getValue().getStringValue() : null;
    if (strutsXmlValue != null) {
      value=strutsXmlValue;
    }
  }
  final Property strutsProperty=ContainerUtil.find(properties,new Condition<Property>(){
    public boolean value(    final Property property){
      final VirtualFile virtualFile=property.getContainingFile().getVirtualFile();
      return virtualFile != null && Comparing.equal(virtualFile.getName(),STRUTS_PROPERTIES_FILENAME) && ModuleUtil.moduleContainsFile(module,virtualFile,false);
    }
  }
);
  if (strutsProperty != null) {
    value=strutsProperty.getValue();
  }
  final WebFacet webFacet=WebUtil.getWebFacet(context);
  if (webFacet == null) {
    return value;
  }
  final WebApp webApp=webFacet.getRoot();
  if (webApp == null) {
    return value;
  }
  final Filter filter=ContainerUtil.find(webApp.getFilters(),WEB_XML_STRUTS_FILTER_CONDITION);
  if (filter != null) {
    final ParamValue initParam=ContainerUtil.find(filter.getInitParams(),new Condition<ParamValue>(){
      public boolean value(      final ParamValue paramValue){
        return Comparing.equal(paramValue.getParamName().getStringValue(),name);
      }
    }
);
    if (initParam != null) {
      value=initParam.getParamValue().getStringValue();
    }
  }
  return value;
}
