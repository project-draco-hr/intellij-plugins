{
  Map<String,String> properties=ContainerUtil.newHashMap();
  boolean isMaven=OsgiBuildUtil.getMavenProjectPath(myContext,myModule) != null;
  properties.put(Constants.IMPORT_PACKAGE,"*");
  properties.put(Constants.REMOVEHEADERS,Constants.INCLUDE_RESOURCE + ',' + Constants.PRIVATE_PACKAGE);
  properties.put(Constants.CREATED_BY,"IntelliJ IDEA / OSGi Plugin");
  if (myExtension.isOsmorcControlsManifest()) {
    properties.putAll(myExtension.getAdditionalProperties());
    properties.put(Constants.BUNDLE_SYMBOLICNAME,myExtension.getBundleSymbolicName());
    properties.put(Constants.BUNDLE_VERSION,myExtension.getBundleVersion());
    String activator=myExtension.getBundleActivator();
    if (!StringUtil.isEmptyOrSpaces(activator)) {
      properties.put(Constants.BUNDLE_ACTIVATOR,activator);
    }
  }
 else {
    File manifestFile=myExtension.getManifestFile();
    if (manifestFile == null) {
      throw new OsgiBuildException("Manifest file '" + myExtension.getManifestLocation() + "' missing - please check OSGi facet settings.");
    }
    properties.put(Constants.MANIFEST,manifestFile.getAbsolutePath());
  }
  List<String> resources=ContainerUtil.newSmartList();
  if (myExtension.isOsmorcControlsManifest()) {
    String custom=properties.get(Constants.INCLUDE_RESOURCE);
    if (custom != null) {
      resources.add(custom);
    }
  }
  for (  OsmorcJarContentEntry contentEntry : myExtension.getAdditionalJarContents()) {
    resources.add(contentEntry.myDestination + '=' + contentEntry.mySource);
  }
  if (!resources.isEmpty()) {
    properties.put(Constants.INCLUDE_RESOURCE,StringUtil.join(resources,","));
  }
  String pattern=myExtension.getIgnoreFilePattern();
  if (!StringUtil.isEmptyOrSpaces(pattern)) {
    try {
      Pattern.compile(pattern);
    }
 catch (    PatternSyntaxException e) {
      throw new OsgiBuildException("The file ignore pattern is invalid - please check OSGi facet settings.");
    }
    properties.put(Constants.DONOTCOPY,pattern);
  }
  if (isMaven && myExtension.isOsmorcControlsManifest()) {
    progress("Calculating local packages");
    LocalPackageCollector.addLocalPackages(myModuleOutputDir,properties);
  }
  return properties;
}
