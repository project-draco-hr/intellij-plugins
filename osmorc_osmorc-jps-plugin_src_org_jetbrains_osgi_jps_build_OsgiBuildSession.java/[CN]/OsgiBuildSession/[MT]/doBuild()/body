{
  progress("Running Bnd to build the bundle");
  if (myExtension.isUseBndFile()) {
    String bndPath=myExtension.getBndFileLocation();
    File bndFile=OsgiBuildUtil.findFileInModuleContentRoots(myModule,bndPath);
    if (bndFile == null || !bndFile.canRead()) {
      throw new OsgiBuildException("Bnd file missing '" + bndPath + "' - please check OSGi facet settings.");
    }
    mySourceToReport=bndFile.getAbsolutePath();
    try {
      myBndWrapper.build(bndFile,myClasses,mySources,myOutputJarFile);
    }
 catch (    Exception e) {
      throw new OsgiBuildException("Unexpected build error",e,null);
    }
    mySourceToReport=null;
  }
 else   if (myExtension.isUseBundlorFile()) {
    String bundlorPath=myExtension.getBundlorFileLocation();
    File bundlorFile=OsgiBuildUtil.findFileInModuleContentRoots(myModule,bundlorPath);
    if (bundlorFile == null) {
      throw new OsgiBuildException("Bundlor file missing '" + bundlorPath + "' - please check OSGi facet settings.");
    }
    File tempFile=new File(myOutputJarFile.getAbsolutePath() + ".tmp.jar");
    try {
      Map<String,String> properties=Collections.singletonMap(Constants.CREATED_BY,"IntelliJ IDEA / OSGi Plugin");
      myBndWrapper.build(properties,myClasses,mySources,tempFile);
    }
 catch (    Exception e) {
      throw new OsgiBuildException("Unexpected build error",e,null);
    }
    progress("Running Bundlor to calculate the manifest");
    try {
      Properties properties=OsgiBuildUtil.getMavenProjectProperties(myContext,myModule);
      List<String> warnings=new BundlorWrapper().wrapModule(properties,tempFile,myOutputJarFile,bundlorFile);
      for (      String warning : warnings) {
        warning(warning,null,bundlorFile.getPath());
      }
    }
  finally {
      if (!FileUtil.delete(tempFile)) {
        warning("Can't delete temporary file '" + tempFile + "'",null,null);
      }
    }
  }
 else   if (myExtension.isManifestManuallyEdited() || myExtension.isOsmorcControlsManifest()) {
    Map<String,String> buildProperties=getBuildProperties();
    if (LOG.isDebugEnabled()) {
      LOG.debug("build properties: " + buildProperties);
    }
    mySourceToReport=getSourceFileToReport();
    try {
      myBndWrapper.build(buildProperties,myClasses,mySources,myOutputJarFile);
    }
 catch (    Exception e) {
      throw new OsgiBuildException("Unexpected build error",e,null);
    }
    mySourceToReport=null;
    progress("Bundling non-OSGi libraries");
    bundlifyLibraries();
  }
 else {
    ManifestGenerationMode mode=((JpsOsmorcModuleExtensionImpl)myExtension).getProperties().myManifestGenerationMode;
    throw new OsgiBuildException("Internal error (unknown build method `" + mode + "`)");
  }
}
