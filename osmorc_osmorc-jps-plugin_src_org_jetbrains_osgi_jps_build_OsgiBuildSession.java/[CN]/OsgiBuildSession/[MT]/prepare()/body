{
  myModuleOutputDir=JpsJavaExtensionService.getInstance().getOutputDirectory(myModule,false);
  if (myModuleOutputDir == null) {
    throw new OsgiBuildException("Unable to determine the compiler output path for the module.");
  }
  String jarFileLocation=myExtension.getJarFileLocation();
  if (jarFileLocation.isEmpty()) {
    throw new OsgiBuildException("Bundle path is empty - please check OSGi facet settings.");
  }
  myOutputJarFile=new File(jarFileLocation);
  if (!FileUtil.delete(myOutputJarFile)) {
    throw new OsgiBuildException("Can't delete bundle file '" + myOutputJarFile + "'.");
  }
  if (!FileUtil.createParentDirs(myOutputJarFile)) {
    throw new OsgiBuildException("Cannot create directory for bundle file '" + myOutputJarFile + "'.");
  }
  List<File> classes=ContainerUtil.newSmartList(myModuleOutputDir);
  for (  JpsDependencyElement dependency : myModule.getDependenciesList().getDependencies()) {
    if (dependency instanceof JpsModuleDependency) {
      JpsModule module=((JpsModuleDependency)dependency).getModule();
      if (module != null && JpsOsmorcExtensionService.getExtension(module) == null) {
        File outputDir=JpsJavaExtensionService.getInstance().getOutputDirectory(module,false);
        if (outputDir != null) {
          classes.add(outputDir);
        }
      }
    }
  }
  myClasses=classes.toArray(new File[classes.size()]);
  mySources=ContainerUtil.map2Array(myModule.getSourceRoots(),File.class,new Function<JpsModuleSourceRoot,File>(){
    @Override public File fun(    JpsModuleSourceRoot root){
      return root.getFile();
    }
  }
);
  myOutputDir=BndWrapper.getOutputDir(myModuleOutputDir);
  myBndWrapper=new BndWrapper(this);
}
