{
  return new DataIndexer<String,List<String>,FileContent>(){
    @NotNull @Override public Map<String,List<String>> map(    @NotNull FileContent inputData){
      final Map<String,List<String>> map=new HashMap<>();
      final PsiFile psiFile=inputData.getPsiFile();
      if (psiFile instanceof JSFile) {
        psiFile.accept(new JSRecursiveElementVisitor(){
          @Override public void visitJSCallExpression(          JSCallExpression call){
            final JSExpression methodExpression=call.getMethodExpression();
            if (methodExpression instanceof JSReferenceExpression && ((JSReferenceExpression)methodExpression).getQualifier() != null && AngularJSIndexingHandler.MODULE.equals(((JSReferenceExpression)methodExpression).getReferenceName())) {
              final JSExpression[] arguments=call.getArguments();
              if (arguments.length > 1 && arguments[0] instanceof JSLiteralExpression && ((JSLiteralExpression)arguments[0]).isQuotedLiteral() && arguments[1] instanceof JSArrayLiteralExpression) {
                final JSArrayLiteralExpression array=(JSArrayLiteralExpression)arguments[1];
                final JSExpression[] children=array.getExpressions();
                final Set<String> dependencies=new HashSet<String>();
                for (                JSExpression child : children) {
                  if (child instanceof JSLiteralExpression && ((JSLiteralExpression)child).isQuotedLiteral()) {
                    dependencies.add(StringUtil.unquoteString(child.getText()));
                  }
                }
                if (!dependencies.isEmpty()) {
                  map.put(StringUtil.unquoteString(arguments[0].getText()),new ArrayList<>(dependencies));
                }
              }
            }
            super.visitJSCallExpression(call);
          }
        }
);
      }
      return map;
    }
  }
;
}
