{
  VirtualFile file=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>(){
    @Override public VirtualFile compute(){
      final String uri=scriptRef.getUri();
      if (myDASExecutionContextId != null && !isDartPatchUri(uri)) {
        final String path=DartAnalysisServerService.getInstance().execution_mapUri(myDASExecutionContextId,null,uri);
        if (path != null) {
          return LocalFileSystem.getInstance().findFileByPath(path);
        }
      }
      return myDartUrlResolver.findFileByDartUrl(uri);
    }
  }
);
  if (file == null) {
    file=myScriptIdToContentMap.get(scriptRef.getId());
  }
  TIntObjectHashMap<Pair<Integer,Integer>> tokenPosToLineAndColumn=myScriptIdToLinesAndColumnsMap.get(scriptRef.getId());
  if (file != null && tokenPosToLineAndColumn != null) {
    final Pair<Integer,Integer> lineAndColumn=tokenPosToLineAndColumn.get(tokenPos);
    return XDebuggerUtil.getInstance().createPosition(file,lineAndColumn.first,lineAndColumn.second);
  }
  final Script script=myVmServiceWrapper.getScriptSync(isolateId,scriptRef.getId());
  if (script == null)   return null;
  if (file == null) {
    file=new LightVirtualFile(PathUtil.getFileName(script.getUri()),DartFileType.INSTANCE,script.getSource());
    ((LightVirtualFile)file).setWritable(false);
    myScriptIdToContentMap.put(scriptRef.getId(),(LightVirtualFile)file);
  }
  if (tokenPosToLineAndColumn == null) {
    tokenPosToLineAndColumn=createTokenPosToLineAndColumnMap(script.getTokenPosTable());
    myScriptIdToLinesAndColumnsMap.put(scriptRef.getId(),tokenPosToLineAndColumn);
  }
  final Pair<Integer,Integer> lineAndColumn=tokenPosToLineAndColumn.get(tokenPos);
  return XDebuggerUtil.getInstance().createPosition(file,lineAndColumn.first,lineAndColumn.second);
}
