{
  super(session);
  myDebuggingHost=debuggingHost;
  myObservatoryPort=observatoryPort;
  myExecutionResult=executionResult;
  myDartUrlResolver=dartUrlResolver;
  myRemoteDebug=remoteDebug;
  myIsolatesInfo=new IsolatesInfo();
  final DartVmServiceBreakpointHandler breakpointHandler=new DartVmServiceBreakpointHandler(this);
  myBreakpointHandlers=new XBreakpointHandler[]{breakpointHandler};
  setLogger();
  session.addSessionListener(new XDebugSessionAdapter(){
    @Override public void sessionPaused(){
      stackFrameChanged();
    }
    @Override public void stackFrameChanged(){
      final XStackFrame stackFrame=getSession().getCurrentStackFrame();
      myLatestCurrentIsolateId=stackFrame instanceof DartVmServiceStackFrame ? ((DartVmServiceStackFrame)stackFrame).getIsolateId() : null;
    }
  }
);
  myDASExecutionContextId=dasExecutionContextId;
  scheduleConnect();
  if (remoteDebug) {
    LOG.assertTrue(myExecutionResult == null && myDASExecutionContextId == null,myDASExecutionContextId + myExecutionResult);
  }
 else {
    LOG.assertTrue(myExecutionResult != null && myDASExecutionContextId != null,myDASExecutionContextId + myExecutionResult);
  }
}
