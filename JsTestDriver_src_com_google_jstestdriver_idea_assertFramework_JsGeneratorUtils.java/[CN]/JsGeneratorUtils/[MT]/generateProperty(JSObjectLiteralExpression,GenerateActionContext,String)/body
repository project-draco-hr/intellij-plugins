{
  PsiElement precedingAnchor=objectLiteralExpression.getFirstChild();
  if (precedingAnchor == null) {
    return;
  }
  final int caretOffset=context.getDocumentCaretOffset();
  JSProperty precedingProperty=findPrecedingProperty(objectLiteralExpression,caretOffset);
  JSProperty followingProperty=findFollowingProperty(objectLiteralExpression,caretOffset);
  boolean generateCommaBefore=false;
  boolean generateCommaAfter=followingProperty != null;
  if (precedingProperty != null) {
    precedingAnchor=precedingProperty;
    PsiElement comma=findNextSiblingComma(precedingProperty);
    generateCommaBefore=comma == null;
    if (comma != null) {
      precedingAnchor=comma;
    }
  }
  TextRange whitespaceTextRange=unionFollowingWhitespaceTextRanges(precedingAnchor);
  generateProperty(context,markedPropertyStr,whitespaceTextRange,generateCommaBefore,generateCommaAfter);
}
