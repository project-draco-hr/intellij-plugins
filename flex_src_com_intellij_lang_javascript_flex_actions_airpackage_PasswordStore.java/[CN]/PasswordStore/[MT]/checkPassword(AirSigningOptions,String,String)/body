{
  final KeyStore keyStore;
  try {
    keyStore=signingOptions.getProvider().isEmpty() ? KeyStore.getInstance(signingOptions.getKeystoreType()) : KeyStore.getInstance(signingOptions.getKeystoreType(),signingOptions.getProvider());
  }
 catch (  KeyStoreException ex) {
    throw new SigningOptionsException("Keystore type is not available: " + signingOptions.getKeystoreType());
  }
catch (  NoSuchProviderException ex) {
    throw new SigningOptionsException("Provider is not available: " + signingOptions.getProvider());
  }
  try {
    try {
      keyStore.load(new FileInputStream(signingOptions.getKeystorePath()),keystorePassword.toCharArray());
    }
 catch (    IOException ex) {
      throw new SigningOptionsException("Incorrect keystore password",true,false);
    }
catch (    CertificateException ex) {
      throw new SigningOptionsException("Failed to load a certificate");
    }
    String keyAlias=signingOptions.getKeyAlias();
    if (keyAlias.isEmpty()) {
      if (!keyStore.aliases().hasMoreElements()) {
        throw new SigningOptionsException("Failed to obtain the key.");
      }
      keyAlias=keyStore.aliases().nextElement();
    }
    try {
      if (keyPassword.isEmpty())       keyPassword=keystorePassword;
      final PrivateKey key=(PrivateKey)keyStore.getKey(keyAlias,keyPassword.toCharArray());
    }
 catch (    UnrecoverableKeyException ex) {
      throw new SigningOptionsException("Incorrect key password",false,true);
    }
  }
 catch (  KeyStoreException ex) {
    throw new RuntimeException("Failed to load keystore");
  }
catch (  NoSuchAlgorithmException ex) {
    throw new SigningOptionsException("required crypto algorithm not available");
  }
}
