{
  element.setAttribute(VM_PARAMETERS_ATTRIBUTE,vmParameters == null ? "" : vmParameters);
  element.setAttribute(PROGRAM_PARAMETERS_ATTRIBUTE,programParameters == null ? "" : programParameters);
  element.setAttribute(INCLUDE_ALL_BUNDLES_IN_CLASS_PATH_ATTRIBUTE,Boolean.toString(includeAllBundlesInClassPath));
  element.setAttribute(WORKING_DIR_ATTRIBUTE,workingDir == null ? "" : workingDir);
  element.setAttribute(USE_ALTERNATIVE_JRE_ATTRIBUTE,String.valueOf(useAlternativeJre));
  element.setAttribute(ALTERNATIVE_JRE_PATH,alternativeJrePath != null ? alternativeJrePath : "");
  element.setAttribute(FRAMEWORK_START_LEVEL,String.valueOf(frameworkStartLevel));
  element.setAttribute(DEFAULT_START_LEVEL,String.valueOf(defaultStartLevel));
  element.setAttribute(GENERATE_WORKING_DIR_ATTRIBUTE,String.valueOf(generateWorkingDir));
  for (  SelectedBundle selectedBundle : bundlesToDeploy) {
    Element bundle=new Element(BUNDLE_ELEMENT);
    bundle.setAttribute(NAME_ATTRIBUTE,selectedBundle.getName());
    if (!selectedBundle.isModule()) {
      bundle.setAttribute(URL_ATTRIBUTE,selectedBundle.getBundleUrl());
    }
    bundle.setAttribute(START_LEVEL_ATTRIBUTE,String.valueOf(selectedBundle.getStartLevel()));
    bundle.setAttribute(TYPE_ATTRIBUTE,selectedBundle.getBundleType().name());
    bundle.setAttribute(START_AFTER_INSTALLATION_ATTRIBUTE,Boolean.toString(selectedBundle.isStartAfterInstallation()));
    element.addContent(bundle);
  }
  Element framework=new Element(FRAMEWORK_ELEMENT);
  framework.setAttribute(INSTANCE_ATTRIBUTE,instanceToUse != null ? instanceToUse.getName() : "");
  element.addContent(framework);
  Element additionalProperties=new Element(ADDITIONAL_PROPERTIES_ELEMENT);
  for (  String additionalPropertyName : this.additionalProperties.keySet()) {
    additionalProperties.setAttribute(additionalPropertyName,this.additionalProperties.get(additionalPropertyName));
  }
  element.addContent(additionalProperties);
  super.writeExternal(element);
}
