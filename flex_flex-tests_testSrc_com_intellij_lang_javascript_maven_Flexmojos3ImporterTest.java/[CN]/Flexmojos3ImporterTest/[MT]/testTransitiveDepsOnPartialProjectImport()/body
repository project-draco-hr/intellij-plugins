{
  createProjectPom(mavenProjectDescription("aggregator","pom") + "  <modules>\n" + "    <module>app</module>\n"+ "    <module>libA</module>\n"+ "    <module>libB</module>\n"+ "  </modules>\n");
  final VirtualFile app=createModulePom("app",parent() + "  <artifactId>ttApp</artifactId>\n" + "  <packaging>jar</packaging>\n"+ "\n"+ dependencies("A","jar"));
  createModulePom("libA",parent() + "  <artifactId>A</artifactId>\n" + "  <packaging>jar</packaging>\n"+ "  \n"+ dependencies("B","jar"));
  createModulePom("libB",parent() + "  <artifactId>B</artifactId>\n" + "  <packaging>jar</packaging>");
  importProject();
  MavenProjectsTree.EmbedderTask task=new MavenProjectsTree.EmbedderTask(){
    @Override public void run(    MavenEmbedderWrapper embedder) throws MavenProcessCanceledException {
      MavenWorkspaceMap workspaceMap=new MavenWorkspaceMap();
      for (      MavenProject mavenProject : myProjectsTree.getProjects()) {
        if (MavenConstants.TYPE_JAR.equalsIgnoreCase(mavenProject.getPackaging())) {
          workspaceMap.register(mavenProject.getMavenId(),new File(mavenProject.getFile().getPath()),new File(mavenProject.getMavenId().getArtifactId() + ".jar"));
        }
 else {
          workspaceMap.register(mavenProject.getMavenId(),new File(mavenProject.getFile().getPath()));
        }
      }
      embedder.customizeForStrictResolve(workspaceMap,NULL_MAVEN_CONSOLE,EMPTY_MAVEN_PROCESS);
      MavenServerExecutionResult result=embedder.execute(app,Collections.<String>emptyList(),Collections.<String>emptyList(),Collections.singletonList("compile"));
      assertEmpty(result.problems);
      assertNotNull(result);
      MavenModel mavenModel=result.projectData.mavenModel;
      assertTransitiveDeps(TEST_GROUP_ID,TEST_VERSION,mavenModel.getDependencies());
      MavenArtifact resolve=embedder.resolve(new MavenArtifactInfo(TEST_GROUP_ID,"B",TEST_VERSION,MavenConstants.TYPE_JAR,null),mavenModel.getRemoteRepositories());
      assertNotNull(resolve);
      assertEquals("B.jar",resolve.getFile().getPath());
    }
  }
;
  MavenProject appProject=myProjectsTree.findProject(new MavenId(TEST_GROUP_ID,"ttApp",TEST_VERSION));
  assertNotNull(appProject);
  myProjectsTree.executeWithEmbedder(appProject,myProjectsManager.getEmbeddersManager(),MavenEmbeddersManager.FOR_POST_PROCESSING,NULL_MAVEN_CONSOLE,EMPTY_MAVEN_PROCESS,task);
  List<MavenArtifact> appSubProjectDeps=appProject.getDependencies();
  assertTransitiveDeps(TEST_GROUP_ID,TEST_VERSION,appSubProjectDeps);
}
