{
  FrameworkIntegratorRegistry registry=ServiceManager.getService(myProject,FrameworkIntegratorRegistry.class);
  FrameworkInstanceDefinition frameworkInstance=myApplicationSettings.getFrameworkInstance(instanceName);
  if (frameworkInstance != null) {
    FrameworkIntegrator integrator=registry.findIntegratorByInstanceDefinition(frameworkInstance);
    if (integrator != null) {
      integrator.getFrameworkInstanceManager().collectLibraries(frameworkInstance,new JarFileLibraryCollector(){
        @Override protected void collectFrameworkJars(        @NotNull final Collection<VirtualFile> jarFiles,        @NotNull final FrameworkInstanceLibrarySourceFinder sourceFinder){
          myApplication.runWriteAction(new Runnable(){
            @Override public void run(){
              LibraryTable.ModifiableModel projectModel=doDeleteFrameworkInstanceLibraries();
              int idx=1;
              for (              VirtualFile jarFile : jarFiles) {
                Library library=projectModel.createLibrary(OsmorcControlledLibrariesPrefix + idx + ":"+ jarFile.getNameWithoutExtension());
                Library.ModifiableModel libraryModel=library.getModifiableModel();
                VirtualFile folder=FileUtil.getFolder(jarFile);
                if (folder != null) {
                  libraryModel.addRoot(folder,OrderRootType.CLASSES);
                }
                List<VirtualFile> sources=sourceFinder.getSourceForLibraryClasses(jarFile);
                for (                VirtualFile source : sources) {
                  VirtualFile sourceFolder=FileUtil.getFolder(source);
                  libraryModel.addRoot(sourceFolder,OrderRootType.SOURCES);
                }
                libraryModel.commit();
                idx++;
              }
              projectModel.commit();
            }
          }
);
        }
      }
);
    }
  }
}
