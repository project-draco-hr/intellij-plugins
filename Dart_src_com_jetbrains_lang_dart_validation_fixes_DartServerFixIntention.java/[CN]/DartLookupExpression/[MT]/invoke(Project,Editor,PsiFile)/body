{
  final SourceFileEdit fileEdit=myChange.getEdits().get(0);
  final String filePath=FileUtil.toSystemIndependentName(fileEdit.getFile());
  final SourceEdit sourceEdit=fileEdit.getEdits().get(0);
  final VirtualFile virtualFile;
  if (fileEdit.getFileStamp() == -1) {
    try {
      final String directoryPath=PathUtil.getParentPath(filePath);
      if (directoryPath.isEmpty())       throw new IOException("empty folder path");
      final VirtualFile directory=VfsUtil.createDirectoryIfMissing(directoryPath);
      if (directory == null)       throw new IOException("failed to create folder " + FileUtil.toSystemDependentName(directoryPath));
      virtualFile=directory.createChildData(this,PathUtil.getFileName(filePath));
    }
 catch (    IOException e) {
      final String message=DartBundle.message("failed.to.create.file.0.1",FileUtil.toSystemDependentName(filePath),e.getMessage());
      CommonRefactoringUtil.showErrorHint(project,editor,message,CommonBundle.getErrorTitle(),null);
      return;
    }
  }
 else {
    virtualFile=LocalFileSystem.getInstance().findFileByPath(filePath);
  }
  if (virtualFile == null)   return;
  if (!FileModificationService.getInstance().prepareVirtualFilesForWrite(project,Collections.singletonList(virtualFile)))   return;
  final Document document=FileDocumentManager.getInstance().getDocument(virtualFile);
  if (document == null)   return;
  if (sourceEdit.getLength() > 0) {
    final Runnable runnable=new Runnable(){
      public void run(){
        document.deleteString(sourceEdit.getOffset(),sourceEdit.getOffset() + sourceEdit.getLength());
      }
    }
;
    if (CommandProcessor.getInstance().getCurrentCommand() == null) {
      CommandProcessor.getInstance().runUndoTransparentAction(runnable);
    }
 else {
      runnable.run();
    }
  }
  final TemplateManager templateManager=TemplateManager.getInstance(project);
  final Template template=templateManager.createTemplate("","");
  template.setToReformat(true);
  addContents(template,sourceEdit);
  final Editor targetEditor=BaseCreateFix.navigate(project,sourceEdit.getOffset(),virtualFile);
  if (targetEditor != null) {
    templateManager.startTemplate(targetEditor,template);
  }
}
