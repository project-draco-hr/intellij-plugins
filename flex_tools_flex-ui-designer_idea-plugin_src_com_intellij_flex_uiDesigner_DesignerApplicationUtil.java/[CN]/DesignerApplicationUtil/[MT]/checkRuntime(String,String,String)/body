{
  if (StringUtil.isEmpty(runtimePath)) {
    return false;
  }
  File runtime=new File(runtimePath);
  if (!runtime.isDirectory()) {
    return false;
  }
  if (SystemInfo.isMac && !checkMacRuntimeVersion(runtimePath)) {
    return false;
  }
  final List<String> command=new ArrayList<String>();
  command.add(adlPath);
  command.add("-runtime");
  command.add(runtimePath);
  command.add("-nodebug");
  command.add(checkDescriptorPath);
  final Process checkProcess=new ProcessBuilder(command).start();
  final Integer exitCode;
  try {
    exitCode=ApplicationManager.getApplication().executeOnPooledThread(new Callable<Integer>(){
      @Override public Integer call() throws Exception {
        return checkProcess.waitFor();
      }
    }
).get(10,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    checkProcess.destroy();
    return false;
  }
catch (  java.util.concurrent.ExecutionException e) {
    LOG.error(e);
    checkProcess.destroy();
    return false;
  }
catch (  TimeoutException e) {
    checkProcess.destroy();
    LOG.warn("Timeout while check runtime for " + adlPath + " "+ runtimePath);
    return false;
  }
  if (exitCode == 6) {
    LOG.error("Check descriptor file cannot be found " + checkDescriptorPath);
  }
  return exitCode == 7;
}
