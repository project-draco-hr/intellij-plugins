{
  try {
    builtInCompilerHandler.startCompilerIfNeeded(bc.getSdk(),context,compilerName);
  }
 catch (  IOException e) {
    context.processMessage(new CompilerMessage(compilerName,BuildMessage.Kind.ERROR,e.toString()));
    return Status.Failed;
  }
  final List<String> mxmlcOrCompc=Collections.singletonList(bc.getOutputType() == OutputType.Library ? "compc" : "mxmlc");
  final List<String> command=buildCommand(mxmlcOrCompc,configFiles,bc);
  final String plainCommand=StringUtil.join(command,new Function<String,String>(){
    public String fun(    final String s){
      return s.indexOf(' ') >= 0 && !(s.startsWith("\"") && s.endsWith("\"")) ? '\"' + s + '\"' : s;
    }
  }
," ");
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  context.processMessage(new CompilerMessage(compilerName,BuildMessage.Kind.INFO,plainCommand));
  final BuiltInCompilerListener listener=new BuiltInCompilerListener(context,compilerName,new Runnable(){
    public void run(){
      semaphore.up();
    }
  }
);
  builtInCompilerHandler.sendCompilationCommand(plainCommand,listener);
  semaphore.waitFor();
  builtInCompilerHandler.removeListener(listener);
  return listener.isCompilationCancelled() ? Status.Cancelled : listener.isCompilationFailed() ? Status.Failed : Status.Ok;
}
