{
switch (info.getType().charAt(0)) {
case 'u':
    if (info.getFormat().equals(FlexCssPropertyDescriptor.COLOR_FORMAT)) {
      if (value.getText().equals("0")) {
        propertyOut.write(CssPropertyType.NUMBER);
        propertyOut.writeAmfInt(0);
      }
 else {
        propertyOut.write(CssPropertyType.COLOR_INT);
        writeColor(value);
      }
    }
 else {
      propertyOut.write(CssPropertyType.NUMBER);
      propertyOut.writeAmfInt(value.getText());
    }
  break;
case 'i':
propertyOut.write(CssPropertyType.NUMBER);
propertyOut.writeAmfInt(value.getText());
break;
case 'S':
if (value.getFirstChild().getFirstChild().getNode().getElementType() == CssElementTypes.CSS_FUNCTION) {
propertyOut.write(CssPropertyType.NULL);
propertyOut.write(Amf3Types.NULL);
}
 else {
propertyOut.write(CssPropertyType.STRING);
propertyOut.write(StringUtil.stripQuotesAroundValue(value.getText()));
}
break;
case 'B':
propertyOut.write(CssPropertyType.BOOL);
propertyOut.write(value.getText().charAt(0) == 't' ? Amf3Types.TRUE : Amf3Types.FALSE);
break;
case 'N':
propertyOut.write(CssPropertyType.NUMBER);
propertyOut.writeAmfDouble(value.getText());
break;
case 'C':
writeClassReference(value.getFirstChild().getFirstChild());
break;
case 'O':
writeUndefinedPropertyValue(value);
break;
default :
propertyOut.write(CssPropertyType.NUMBER);
propertyOut.writeAmfInt(0);
break;
}
}
