{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 4:
{
        return IDENTIFIER;
      }
case 131:
    break;
case 83:
{
    return TRY;
  }
case 132:
break;
case 92:
{
return RAW_TRIPLE_QUOTED_STRING;
}
case 133:
break;
case 18:
{
return LPAREN;
}
case 134:
break;
case 101:
{
return PART;
}
case 135:
break;
case 48:
{
return PLUS_PLUS;
}
case 136:
break;
case 32:
{
return AND;
}
case 137:
break;
case 111:
{
return WHILE;
}
case 138:
break;
case 110:
{
return CONST;
}
case 139:
break;
case 95:
{
return TRUE;
}
case 140:
break;
case 60:
{
return EXPRESSION_BODY_DEF;
}
case 141:
break;
case 61:
{
return INT_DIV;
}
case 142:
break;
case 17:
{
return RBRACKET;
}
case 143:
break;
case 115:
{
return STATIC;
}
case 144:
break;
case 3:
{
return NUMBER;
}
case 145:
break;
case 38:
{
popState();
return BAD_CHARACTER;
}
case 146:
break;
case 27:
{
return COLON;
}
case 147:
break;
case 63:
{
return GT_EQ;
}
case 148:
break;
case 107:
{
return BREAK;
}
case 149:
break;
case 113:
{
return EXPORT;
}
case 150:
break;
case 73:
{
pushState(SHORT_TEMPLATE_ENTRY);
yypushback(yylength() - 1);
return SHORT_TEMPLATE_ENTRY_START;
}
case 151:
break;
case 78:
{
return SINGLE_LINE_DOC_COMMENT;
}
case 152:
break;
case 22:
{
return EQ;
}
case 153:
break;
case 39:
{
popState();
return IDENTIFIER;
}
case 154:
break;
case 126:
{
return EXTERNAL;
}
case 155:
break;
case 123:
{
return TYPEDEF;
}
case 156:
break;
case 124:
{
return LIBRARY;
}
case 157:
break;
case 121:
{
return RETHROW;
}
case 158:
break;
case 23:
{
return BIN_NOT;
}
case 159:
break;
case 79:
{
pushState(MULTI_LINE_COMMENT_STATE);
return MULTI_LINE_DOC_COMMENT_START;
}
case 160:
break;
case 82:
{
return SET;
}
case 161:
break;
case 65:
{
return LT_LT;
}
case 162:
break;
case 122:
{
return EXTENDS;
}
case 163:
break;
case 45:
{
return DIV_EQ;
}
case 164:
break;
case 112:
{
return RETURN;
}
case 165:
break;
case 94:
{
return SHOW;
}
case 166:
break;
case 91:
{
return MULTI_LINE_COMMENT;
}
case 167:
break;
case 105:
{
return SUPER;
}
case 168:
break;
case 114:
{
return ASSERT;
}
case 169:
break;
case 67:
{
return OR_OR;
}
case 170:
break;
case 16:
{
return LBRACKET;
}
case 171:
break;
case 102:
{
popState();
return THIS;
}
case 172:
break;
case 20:
{
return SEMICOLON;
}
case 173:
break;
case 108:
{
return CATCH;
}
case 174:
break;
case 24:
{
return REM;
}
case 175:
break;
case 26:
{
return COMMA;
}
case 176:
break;
case 52:
{
return ON;
}
case 177:
break;
case 75:
{
yypushback(1);
return REGULAR_STRING_PART;
}
case 178:
break;
case 35:
{
popState();
return REGULAR_STRING_PART;
}
case 179:
break;
case 46:
{
return MUL_EQ;
}
case 180:
break;
case 41:
{
if (myLeftBraceCount == 0) {
popState();
return LONG_TEMPLATE_ENTRY_END;
}
myLeftBraceCount--;
return RBRACE;
}
case 181:
break;
case 31:
{
return XOR;
}
case 182:
break;
case 10:
{
pushState(QUO_STRING);
return OPEN_QUOTE;
}
case 183:
break;
case 8:
{
return DIV;
}
case 184:
break;
case 68:
{
return XOR_EQ;
}
case 185:
break;
case 59:
{
return EQ_EQ;
}
case 186:
break;
case 57:
{
return MINUS_MINUS;
}
case 187:
break;
case 40:
{
myLeftBraceCount++;
return LBRACE;
}
case 188:
break;
case 14:
{
return PLUS;
}
case 189:
break;
case 34:
{
return MULTI_LINE_COMMENT_BODY;
}
case 190:
break;
case 117:
{
return NATIVE;
}
case 191:
break;
case 2:
{
return BAD_CHARACTER;
}
case 192:
break;
case 99:
{
return NULL;
}
case 193:
break;
case 36:
{
popState();
return CLOSING_QUOTE;
}
case 194:
break;
case 28:
{
return LT;
}
case 195:
break;
case 116:
{
return SWITCH;
}
case 196:
break;
case 109:
{
return CLASS;
}
case 197:
break;
case 6:
{
return HASH;
}
case 198:
break;
case 37:
{
return SHORT_TEMPLATE_ENTRY_START;
}
case 199:
break;
case 13:
{
return DOT;
}
case 200:
break;
case 125:
{
return DEFAULT;
}
case 201:
break;
case 56:
{
return DO;
}
case 202:
break;
case 55:
{
return IN;
}
case 203:
break;
case 104:
{
return FINAL;
}
case 204:
break;
case 103:
{
return FALSE;
}
case 205:
break;
case 43:
{
return NEQ;
}
case 206:
break;
case 71:
{
pushState(MULTI_LINE_COMMENT_STATE);
return MULTI_LINE_COMMENT_BODY;
}
case 207:
break;
case 15:
{
return RBRACE;
}
case 208:
break;
case 70:
{
return AND_AND;
}
case 209:
break;
case 84:
{
return NEW;
}
case 210:
break;
case 25:
{
return GT;
}
case 211:
break;
case 51:
{
return OF;
}
case 212:
break;
case 87:
{
return EQ_EQ_EQ;
}
case 213:
break;
case 98:
{
return HIDE;
}
case 214:
break;
case 128:
{
return CONTINUE;
}
case 215:
break;
case 1:
{
return REGULAR_STRING_PART;
}
case 216:
break;
case 30:
{
return OR;
}
case 217:
break;
case 89:
{
return GT_GT_EQ;
}
case 218:
break;
case 54:
{
return IS;
}
case 219:
break;
case 12:
{
return LBRACE;
}
case 220:
break;
case 72:
{
popState();
return yystate() == MULTI_LINE_COMMENT_STATE ? MULTI_LINE_COMMENT_BODY : MULTI_LINE_COMMENT_END;
}
case 221:
break;
case 85:
{
return VAR;
}
case 222:
break;
case 49:
{
return PLUS_EQ;
}
case 223:
break;
case 77:
{
return NEQ_EQ;
}
case 224:
break;
case 66:
{
return OR_EQ;
}
case 225:
break;
case 7:
{
return NOT;
}
case 226:
break;
case 62:
{
return REM_EQ;
}
case 227:
break;
case 118:
{
return IMPORT;
}
case 228:
break;
case 5:
{
return WHITE_SPACE;
}
case 229:
break;
case 129:
{
return OPERATOR;
}
case 230:
break;
case 88:
{
return INT_DIV_EQ;
}
case 231:
break;
case 74:
{
pushState(LONG_TEMPLATE_ENTRY);
return LONG_TEMPLATE_ENTRY_START;
}
case 232:
break;
case 58:
{
return MINUS_EQ;
}
case 233:
break;
case 33:
{
return AT;
}
case 234:
break;
case 106:
{
return THROW;
}
case 235:
break;
case 93:
{
return ELSE;
}
case 236:
break;
case 53:
{
return IF;
}
case 237:
break;
case 100:
{
return WITH;
}
case 238:
break;
case 11:
{
pushState(APOS_STRING);
return OPEN_QUOTE;
}
case 239:
break;
case 47:
{
return RAW_SINGLE_QUOTED_STRING;
}
case 240:
break;
case 9:
{
return MUL;
}
case 241:
break;
case 42:
{
return SINGLE_LINE_COMMENT;
}
case 242:
break;
case 120:
{
return FINALLY;
}
case 243:
break;
case 130:
{
return IMPLEMENTS;
}
case 244:
break;
case 81:
{
pushState(THREE_APOS_STRING);
return OPEN_QUOTE;
}
case 245:
break;
case 21:
{
return MINUS;
}
case 246:
break;
case 127:
{
return ABSTRACT;
}
case 247:
break;
case 76:
{
return FOR;
}
case 248:
break;
case 97:
{
return CASE;
}
case 249:
break;
case 86:
{
return GET;
}
case 250:
break;
case 19:
{
return RPAREN;
}
case 251:
break;
case 90:
{
return LT_LT_EQ;
}
case 252:
break;
case 29:
{
return QUEST;
}
case 253:
break;
case 69:
{
return AND_EQ;
}
case 254:
break;
case 44:
{
pushState(MULTI_LINE_COMMENT_STATE);
return MULTI_LINE_COMMENT_START;
}
case 255:
break;
case 96:
{
return THIS;
}
case 256:
break;
case 64:
{
return LT_EQ;
}
case 257:
break;
case 119:
{
return FACTORY;
}
case 258:
break;
case 50:
{
return AS;
}
case 259:
break;
case 80:
{
pushState(THREE_QUO_STRING);
return OPEN_QUOTE;
}
case 260:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
