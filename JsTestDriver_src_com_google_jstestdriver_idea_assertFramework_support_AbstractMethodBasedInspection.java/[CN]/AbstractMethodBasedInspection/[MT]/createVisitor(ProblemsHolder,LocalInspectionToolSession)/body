{
  if (holder == null) {
    return JSElementVisitor.NOP_ELEMENT_VISITOR;
  }
  Project project=holder.getProject();
  if (project == null) {
    return JSElementVisitor.NOP_ELEMENT_VISITOR;
  }
  if (!JstdSettingsUtil.areJstdConfigFilesInProject(project)) {
    return JSElementVisitor.NOP_ELEMENT_VISITOR;
  }
  return new JSElementVisitor(){
    @Override public void visitJSCallExpression(    final JSCallExpression jsCallExpression){
      JSFile jsFile=null;
      if (jsCallExpression != null) {
        jsFile=ObjectUtils.tryCast(jsCallExpression.getContainingFile(),JSFile.class);
      }
      if (jsFile == null) {
        return;
      }
      JSReferenceExpression methodExpression=ObjectUtils.tryCast(jsCallExpression.getMethodExpression(),JSReferenceExpression.class);
      if (methodExpression == null) {
        return;
      }
      boolean suitableSymbol=isSuitableElement(jsFile,jsCallExpression);
      if (suitableSymbol) {
        boolean resolved=isResolved(methodExpression);
        if (!resolved) {
          TextRange rangeInElement=TextRange.create(0,methodExpression.getTextLength());
          HintWrapperQuickFix fix=new HintWrapperQuickFix(methodExpression,rangeInElement,getFix());
          holder.registerProblem(methodExpression,getProblemDescription(),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,rangeInElement,fix);
        }
      }
    }
  }
;
}
