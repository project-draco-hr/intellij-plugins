{
  int newLineInd=text.indexOf(NEW_LINE);
  if (newLineInd == -1) {
    myStdOutCurrentLineBuffer.append(text);
    myStdOutCurrentLineChunks.add(Pair.create(text,type));
    return;
  }
  String beforeNewLineText=text.substring(0,newLineInd + 1);
  myStdOutCurrentLineBuffer.append(beforeNewLineText);
  myStdOutCurrentLineChunks.add(Pair.create(beforeNewLineText,type));
  String line=myStdOutCurrentLineBuffer.toString();
  if (!handleLineAsEvent(line)) {
    onStandardOutputLineAvailable(line);
    for (    Pair<String,Key> chunk : myStdOutCurrentLineChunks) {
      addText(chunk.getFirst(),chunk.getSecond());
    }
  }
  myStdOutCurrentLineBuffer.setLength(0);
  myStdOutCurrentLineChunks.clear();
  int prevNewLineInd=newLineInd;
  newLineInd=text.indexOf(NEW_LINE,prevNewLineInd + 1);
  while (newLineInd != -1) {
    line=text.substring(prevNewLineInd + 1,newLineInd + 1);
    if (!handleLineAsEvent(line)) {
      onStandardOutputLineAvailable(line);
      addText(line,type);
    }
    prevNewLineInd=newLineInd;
    newLineInd=text.indexOf(NEW_LINE,prevNewLineInd + 1);
  }
  if (prevNewLineInd + 1 < text.length()) {
    String rest=text.substring(prevNewLineInd + 1);
    myStdOutCurrentLineBuffer.append(rest);
    myStdOutCurrentLineChunks.add(Pair.create(rest,type));
  }
}
