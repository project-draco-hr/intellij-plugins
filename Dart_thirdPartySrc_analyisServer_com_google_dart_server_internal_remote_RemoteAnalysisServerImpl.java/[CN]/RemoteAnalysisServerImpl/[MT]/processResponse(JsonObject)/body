{
  if (processNotification(response)) {
    return;
  }
  JsonPrimitive idJsonPrimitive=(JsonPrimitive)response.get("id");
  if (idJsonPrimitive == null) {
    return;
  }
  String idString=idJsonPrimitive.getAsString();
  Consumer consumer=null;
synchronized (consumerMapLock) {
    consumer=consumerMap.get(idString);
  }
  JsonObject errorObject=(JsonObject)response.get("error");
  RequestError requestError=null;
  if (errorObject != null) {
    requestError=processErrorResponse(errorObject);
    listener.requestError(requestError);
  }
  JsonObject resultObject=(JsonObject)response.get("result");
  if (consumer instanceof UpdateContentConsumer) {
    ((UpdateContentConsumer)consumer).onResponse();
  }
  if (consumer instanceof GetSuggestionsConsumer) {
    new CompletionIdProcessor((GetSuggestionsConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof FindElementReferencesConsumer) {
    new FindElementReferencesProcessor((FindElementReferencesConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof FindMemberDeclarationsConsumer) {
    new FindMemberDeclarationsProcessor((FindMemberDeclarationsConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof FindMemberReferencesConsumer) {
    new FindMemberReferencesProcessor((FindMemberReferencesConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof FindTopLevelDeclarationsConsumer) {
    new FindTopLevelDeclarationsProcessor((FindTopLevelDeclarationsConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetTypeHierarchyConsumer) {
    new TypeHierarchyProcessor((GetTypeHierarchyConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof FormatConsumer) {
    new FormatProcessor((FormatConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetHoverConsumer) {
    new HoverProcessor((GetHoverConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetRefactoringConsumer) {
    new GetRefactoringProcessor(requestToRefactoringKindMap,(GetRefactoringConsumer)consumer).process(idString,resultObject,requestError);
  }
 else   if (consumer instanceof GetAssistsConsumer) {
    new AssistsProcessor((GetAssistsConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetFixesConsumer) {
    new FixesProcessor((GetFixesConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetLibraryDependenciesConsumer) {
    new LibraryDependenciesProcessor((GetLibraryDependenciesConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetNavigationConsumer) {
    new GetNavigationProcessor((GetNavigationConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetAvailableRefactoringsConsumer) {
    new RefactoringGetAvailableProcessor((GetAvailableRefactoringsConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetErrorsConsumer) {
    new AnalysisErrorsProcessor((GetErrorsConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof OrganizeDirectivesConsumer) {
    new OrganizeDirectivesProcessor((OrganizeDirectivesConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof SortMembersConsumer) {
    new SortMembersProcessor((SortMembersConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof CreateContextConsumer) {
    new CreateContextProcessor((CreateContextConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof MapUriConsumer) {
    new MapUriProcessor((MapUriConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof GetVersionConsumer) {
    new VersionProcessor((GetVersionConsumer)consumer).process(resultObject,requestError);
  }
 else   if (consumer instanceof BasicConsumer) {
    ((BasicConsumer)consumer).received();
  }
synchronized (consumerMapLock) {
    consumerMap.remove(idString);
  }
}
