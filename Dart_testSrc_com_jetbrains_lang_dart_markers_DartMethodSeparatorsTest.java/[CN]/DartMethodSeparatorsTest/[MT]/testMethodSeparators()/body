{
  DaemonCodeAnalyzerSettings.getInstance().SHOW_METHOD_SEPARATORS=true;
  try {
    configureByText(DartFileType.INSTANCE,"abstract class A {\n" + "  firstMethod(){}\n" + "  <lineMarker>bar(){}</lineMarker>\n"+ "  <lineMarker>baz(){}</lineMarker>\n"+ "  <lineMarker>abstract abs();</lineMarker>\n"+ "}");
    doDoTest(false,false);
    configureByText(DartFileType.INSTANCE,"class A {\n" + "  firstMethod(){}\n" + "  <lineMarker>get v => 1;</lineMarker>\n"+ "  <lineMarker>set v(i) {}</lineMarker>\n"+ "  <lineMarker>int get i => 1;</lineMarker>\n"+ "}");
    doDoTest(false,false);
    configureByText(DartFileType.INSTANCE,"class A {\n" + "  firstMethod(){}\n" + "  <lineMarker>A() {}</lineMarker>\n"+ "  <lineMarker>A.b() {}</lineMarker>\n"+ "}");
    doDoTest(false,false);
    configureByText(DartFileType.INSTANCE,"  firstFunction(){}\n" + "  <lineMarker>func(){}</lineMarker>\n" + "  <lineMarker>get v => 1;</lineMarker>\n"+ "  <lineMarker>set v(i) {}</lineMarker>\n"+ "  <lineMarker>int get i => 1;</lineMarker>");
    doDoTest(false,false);
    configureByText(DartFileType.INSTANCE,"class A {\n" + "  var b;\n" + "  <lineMarker>bar(){}</lineMarker>\n"+ "}");
    doDoTest(false,false);
    configureByText(DartFileType.INSTANCE,"bar() {\n" + "  foo() {}\n" + "  foo1() {}\n"+ "}");
    doDoTest(false,false);
  }
  finally {
    DaemonCodeAnalyzerSettings.getInstance().SHOW_METHOD_SEPARATORS=false;
  }
}
