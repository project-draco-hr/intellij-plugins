{
  if (!(psiElement instanceof XmlAttributeValue))   return false;
  final PsiElement parent=psiElement.getParent();
  if (!(parent instanceof XmlAttribute) || !"src".equalsIgnoreCase(((XmlAttribute)parent).getName()))   return false;
  final XmlTag tag=(XmlTag)parent.getParent();
  if (tag == null || !HtmlUtil.isScriptTag(tag))   return false;
  final TextRange range=ElementManipulators.getValueTextRange(psiElement);
  int offset=range.getStartOffset();
  int endOffset=range.getEndOffset();
  final String elementText=psiElement.getText();
  final String text=elementText.substring(offset,endOffset);
  if (!text.trim().startsWith("packages/"))   return false;
  FileReferenceSet set=new FileReferenceSet(text,psiElement,offset,null,true,false,null);
  set.addCustomization(FileReferenceSet.DEFAULT_PATH_EVALUATOR_OPTION,new Function<PsiFile,Collection<PsiFileSystemItem>>(){
    @Override public Collection<PsiFileSystemItem> fun(    final PsiFile psiFile){
      final VirtualFile file=DartResolveUtil.getRealVirtualFile(psiFile);
      if (file == null)       return Collections.emptyList();
      final List<VirtualFile> packageRoots=PubspecYamlUtil.getDartPackageRoots(psiFile.getProject(),file);
      final Collection<PsiFileSystemItem> result=new ArrayList<PsiFileSystemItem>(packageRoots.size());
      for (      VirtualFile packageRoot : packageRoots) {
        final VirtualFile parentFolder=packageRoot.getParent();
        final PsiFileSystemItem psiDirectory=parentFolder == null ? null : PsiManager.getInstance(psiFile.getProject()).findDirectory(parentFolder);
        if (psiDirectory != null) {
          result.add(psiDirectory);
        }
      }
      return result;
    }
  }
);
  final FileReference[] allReferences=set.getAllReferences();
  Collections.addAll(references,allReferences);
  return allReferences.length > 0;
}
