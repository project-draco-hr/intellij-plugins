{
  String referencedName=referenceExpression.getReferencedName();
  Annotation annotation=holder.createErrorAnnotation(referenceExpression,referencedName + " is unresolved.");
  System.out.println("installing annotation '" + annotation.getMessage() + "'");
  annotation.registerFix(new IntentionAction(){
    @NotNull @Override public String getText(){
      return "Add '" + JsAssertFrameworkLibraryManager.LIBRARY_NAME + "' JavaScript library";
    }
    @NotNull @Override public String getFamilyName(){
      return getText();
    }
    @Override public boolean isAvailable(    @NotNull Project project,    Editor editor,    PsiFile file){
      if (referenceExpression.getContainingFile() == file) {
        Document document=editor.getDocument();
        int editorCaretLineNo=document.getLineNumber(editor.getCaretModel().getOffset());
        int methodReferenceLineNo=document.getLineNumber(referenceExpression.getTextOffset());
        return editorCaretLineNo == methodReferenceLineNo;
      }
      return false;
    }
    @Override public void invoke(    @NotNull final Project project,    Editor editor,    PsiFile file) throws IncorrectOperationException {
      final ScriptingLibraryModel scriptingLibraryModel=JsAssertFrameworkLibraryManager.createScriptingLibraryModelAndAssociateIt(project,project.getBaseDir());
      FileContentUtil.reparseFiles(project,Arrays.asList(file.getVirtualFile()),true);
      if (scriptingLibraryModel == null) {
        System.out.println("Unable to create library '" + JsAssertFrameworkLibraryManager.LIBRARY_NAME + "'");
      }
    }
    @Override public boolean startInWriteAction(){
      return false;
    }
  }
);
}
