{
  String[] conflicts=new String[]{"Class AuxClass with internal visibility won't be accessible from method movedMethod(AuxClass, AuxInterface, AuxClassPub, AuxFunc, AuxConst)","Class FromImpl with internal visibility won't be accessible from constructor Usage.Usage()","Function AuxFunc() with internal visibility won't be accessible from method movedMethod(AuxClass, AuxInterface, AuxClassPub, AuxFunc, AuxConst)","Function globalMethod() with internal visibility won't be accessible from method movedMethod(AuxClass, AuxInterface, AuxClassPub, AuxFunc, AuxConst)","Interface AuxInterface with internal visibility won't be accessible from method movedMethod(AuxClass, AuxInterface, AuxClassPub, AuxFunc, AuxConst)","Constant AuxConst with internal visibility won't be accessible from method movedMethod(AuxClass, AuxInterface, AuxClassPub, AuxFunc, AuxConst)","Class FromImpl with internal visibility won't be accessible from constructor Usage.Usage()","Method FromImpl.stat() with internal visibility won't be accessible from constructor Usage()"};
  doTestConflicts(JSExtractSuperProcessor.Mode.RenameImplementation,false,"From","com.FromImpl",DocCommentPolicy.COPY,new String[]{"movedMethod"},conflicts);
}
