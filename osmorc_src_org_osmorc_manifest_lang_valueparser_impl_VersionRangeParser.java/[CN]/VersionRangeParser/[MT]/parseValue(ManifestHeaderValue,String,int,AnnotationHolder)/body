{
  VersionRange.Boundary floorBoundary=null;
  Version floor=null;
  Version ceiling=null;
  VersionRange.Boundary ceilingBoundary=null;
  int nextStart=start;
  int nextEnd=nextStart + 1;
  if (text.charAt(nextStart) == '[' || text.charAt(nextStart) == '(') {
    if (annotationHolder != null) {
      annotationHolder.createErrorAnnotation(createTextRange(headerValue,nextStart,nextEnd),"Version ranges have to be enclosed in double quotes.");
    }
    nextStart++;
  }
 else   if (text.charAt(nextStart) == '\"') {
    nextStart++;
    while (Character.isWhitespace(text.charAt(nextStart))) {
      nextStart++;
    }
    if (text.charAt(nextStart) == '[') {
      floorBoundary=VersionRange.Boundary.INCLUSIVE;
    }
 else     if (text.charAt(nextStart) == '(') {
      floorBoundary=VersionRange.Boundary.EXCLUSIVE;
    }
 else {
      nextEnd=nextStart + 1;
      while (!Character.isDigit(text.charAt(nextEnd))) {
        nextEnd++;
      }
      if (annotationHolder != null) {
        Annotation annotation=annotationHolder.createErrorAnnotation(createTextRange(headerValue,nextStart,nextEnd),"Invalid boundary definition");
      }
    }
  }
  nextEnd=text.indexOf(',');
  return null;
}
