{
  final String rootPath=ModuleRootManager.getInstance(myModule).getContentRoots()[0].getPath();
  myFixture.addFileToProject("pubspec.yaml","name: RootProject");
  myFixture.addFileToProject("lib/rootlib.dart","");
  final VirtualFile nestedPubspec=myFixture.addFileToProject("example/pubspec.yaml","name: NestedProject\n" + "dependencies:\n" + "  RootProject:\n"+ "    path: ../").getVirtualFile();
  myFixture.addFileToProject("example/lib/src/nestedlib.dart","");
  myFixture.addFileToProject("example/packages/NestedProject/nestedlib.dart","");
  myFixture.addFileToProject("example/packages/RootProject/rootlib.dart","");
  myFixture.addFileToProject("example/packages/SomePackage/somepack.dart","");
  final VirtualFile customPack=myFixture.addFileToProject("custom_pack/RootProject/rootlib.dart","").getVirtualFile().getParent().getParent();
  DartUrlResolver resolver=DartUrlResolver.getInstance(getProject(),nestedPubspec);
  VirtualFile file;
  file=resolver.findFileByDartUrl("dart:collection");
  assertNotNull(file);
  assertEquals(DartTestUtils.SDK_HOME_PATH + "/lib/collection/collection.dart",file.getPath());
  assertEquals("dart:collection",resolver.getDartUrlForFile(file));
  file=resolver.findFileByDartUrl("dart:collection/hash_map.dart");
  assertNotNull(file);
  assertEquals(DartTestUtils.SDK_HOME_PATH + "/lib/collection/hash_map.dart",file.getPath());
  assertEquals("dart:collection/hash_map.dart",resolver.getDartUrlForFile(file));
  file=resolver.findFileByDartUrl("package:NestedProject/src/nestedlib.dart");
  assertNotNull(file);
  assertEquals(rootPath + "/example/lib/src/nestedlib.dart",file.getPath());
  assertEquals("package:NestedProject/src/nestedlib.dart",resolver.getDartUrlForFile(file));
  file=resolver.findFileByDartUrl("package:RootProject/rootlib.dart");
  assertNotNull(file);
  assertEquals(rootPath + "/lib/rootlib.dart",file.getPath());
  assertEquals("package:RootProject/rootlib.dart",resolver.getDartUrlForFile(file));
  file=resolver.findFileByDartUrl("package:SomePackage/somepack.dart");
  assertNotNull(file);
  assertEquals(rootPath + "/example/packages/SomePackage/somepack.dart",file.getPath());
  assertEquals("package:SomePackage/somepack.dart",resolver.getDartUrlForFile(file));
  try {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        final ModifiableRootModel modifiableModel=ModuleRootManager.getInstance(myModule).getModifiableModel();
        try {
          final Library library=modifiableModel.getModuleLibraryTable().createLibrary("Dart custom package root");
          final Library.ModifiableModel libModel=library.getModifiableModel();
          libModel.addRoot(customPack.getUrl(),OrderRootType.CLASSES);
          libModel.commit();
          modifiableModel.commit();
        }
 catch (        Exception e) {
          if (!modifiableModel.isDisposed())           modifiableModel.dispose();
        }
      }
    }
);
    resolver=DartUrlResolver.getInstance(getProject(),nestedPubspec);
    file=resolver.findFileByDartUrl("package:NestedProject/src/nestedlib.dart");
    assertNull(file);
    file=resolver.findFileByDartUrl("package:RootProject/rootlib.dart");
    assertNotNull(file);
    assertEquals(rootPath + "/custom_pack/RootProject/rootlib.dart",file.getPath());
    assertEquals("package:RootProject/rootlib.dart",resolver.getDartUrlForFile(file));
  }
  finally {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        final ModifiableRootModel modifiableModel=ModuleRootManager.getInstance(myModule).getModifiableModel();
        for (        final OrderEntry entry : modifiableModel.getOrderEntries()) {
          if (entry instanceof LibraryOrderEntry && "Dart custom package root".equals(((LibraryOrderEntry)entry).getLibraryName())) {
            modifiableModel.removeOrderEntry(entry);
            break;
          }
        }
        modifiableModel.commit();
      }
    }
);
  }
}
