{
  final GlobalSearchScope tempScope=JSInheritanceUtil.getEnforcedScope();
  if (tempScope != null) {
    return tempScope;
  }
  PsiElement explicitContext=JSResolveUtil.getContext(element);
  if (explicitContext != null)   element=explicitContext;
  if (element instanceof PsiCodeFragment) {
    final GlobalSearchScope forced=((PsiCodeFragment)element).getForcedResolveScope();
    if (forced != null)     return forced;
  }
  final PsiFile containingFile=element.getContainingFile();
  if (containingFile == null)   return getProjectScopeIncludingPredefines(element.getProject());
  final PsiFile psiFile=containingFile.getOriginalFile();
  VirtualFile file=psiFile.getVirtualFile();
  final Project project=psiFile.getProject();
  if (file == null)   return getProjectScopeIncludingPredefines(project);
  final GlobalSearchScope scope=isApplicable(file) ? ResolveScopeManager.getInstance(project).getDefaultResolveScope(file) : null;
  if (scope != null) {
    if (ProjectFileIndex.SERVICE.getInstance(project).isInLibraryClasses(file) && !scope.contains(file)) {
      return scope.union(GlobalSearchScope.fileScope(project,file));
    }
    return scope;
  }
  final GlobalSearchScope fileResolveScope=getResolveScope(file,project,false);
  return fileResolveScope != null ? fileResolveScope : getProjectScopeIncludingPredefines(project);
}
