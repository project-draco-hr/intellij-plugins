{
  String[] frames=Arrays.copyOf(callFrames,callFrames.length + 1);
  frames[frames.length - 1]=frame;
  Pair<Map<String,Long>,Map<String,Long>> countMaps;
  if (backTrace) {
    countMaps=callTree.getCallersTimeMaps(frames);
  }
 else {
    countMaps=callTree.getCalleesTimeMaps(ArrayUtil.reverseArray(frames));
  }
  final Map<String,Long> countMap=countMaps.getFirst();
  final Map<String,Long> selfCountMap=countMaps.getSecond();
  final SearchScope _selectedScope=filterScope.getSelectedScope();
  GlobalSearchScope scope=_selectedScope instanceof GlobalSearchScope ? (GlobalSearchScope)_selectedScope : GlobalSearchScope.allScope(getProject());
  int index=0;
  for (  final String s : countMap.keySet()) {
    SampleLocationResolver.LocationInfo l=SampleLocationResolver.buildMethodInfo(s);
    final PsiElement classByQName=JSResolveUtil.findClassByQName(l.clazz,scope);
    boolean isAnonymous="Function".equals(l.clazz) && "<anonymous>".equals(l.name);
    if (classByQName == null && !isAnonymous)     continue;
    model.insertNodeInto(new MergedCallNode<T>(s,callTree,frames,countMap.get(s),selfCountMap.get(s),model,backTrace),this,index++);
  }
}
