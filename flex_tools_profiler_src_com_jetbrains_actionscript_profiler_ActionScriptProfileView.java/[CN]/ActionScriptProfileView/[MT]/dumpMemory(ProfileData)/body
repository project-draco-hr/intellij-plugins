{
  final Map<String,Set<CreateObjectSample>> objectsByClasses=new HashMap<String,Set<CreateObjectSample>>();
  final ArrayList<Set<CreateObjectSample>> list=new ArrayList<Set<CreateObjectSample>>();
  for (  CreateObjectSample x : data.getCreateObjectSamples()) {
    Set<CreateObjectSample> createObjectSamples=objectsByClasses.get(x.className);
    if (createObjectSamples == null) {
      createObjectSamples=new HashSet<CreateObjectSample>();
      objectsByClasses.put(x.className,createObjectSamples);
      list.add(createObjectSamples);
    }
    createObjectSamples.add(x);
  }
  final Map<Set<CreateObjectSample>,Integer> instances2Size=new HashMap<Set<CreateObjectSample>,Integer>();
  Collections.sort(list,new Comparator<Set<CreateObjectSample>>(){
    public int compare(    Set<CreateObjectSample> o1,    Set<CreateObjectSample> o2){
      return getKey(o2) - getKey(o1);
    }
    private Integer getKey(    Set<CreateObjectSample> o1){
      Integer integer=instances2Size.get(o1);
      if (integer == null) {
        integer=calcSize(o1);
        instances2Size.put(o1,integer);
      }
      return integer;
    }
  }
);
  final DefaultTreeModel memoryModel=(DefaultTreeModel)myMemoryTree.getModel();
  final DefaultMutableTreeNode memoryModelRoot=(DefaultMutableTreeNode)memoryModel.getRoot();
  int index2=0;
  final Function<Set<CreateObjectSample>,Integer> function=new Function<Set<CreateObjectSample>,Integer>(){
    public Integer fun(    Set<CreateObjectSample> samples){
      return percent(calcSize(samples),data);
    }
  }
;
  for (  final Set<CreateObjectSample> s : list) {
    Integer total=instances2Size.get(s);
    if (total == null)     total=calcSize(s);
    final String userObject=s.iterator().next().className + " " + percent(total,data)+ "% {"+ s.size()+ " objects of "+ total+ " bytes}";
    DefaultMutableTreeNode classNode=new LazyNode(){
      @Override protected void doLoadChildren(){
        buildSamples(memoryModel,this,true,s,0,function,getCurrentScope());
      }
    }
;
    classNode.setUserObject(userObject);
    memoryModel.insertNodeInto(classNode,memoryModelRoot,index2++);
  }
}
