{
  final Ref<ExecutionException> ref=new Ref<ExecutionException>();
  ApplicationManager.getApplication().assertIsDispatchThread();
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      try {
        final VirtualFile componentFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(params.getPath());
        if (componentFile == null) {
          throw new ExecutionException("File " + params.getPath() + " not found");
        }
        final VirtualFile directory=componentFile.getParent();
        final String launcherFileName="mxunit-launcher.cfc";
        LOG.debug("Copying script file" + launcherFileName + " to component folder: "+ directory);
        createFile(project,directory,launcherFileName,getLauncherText("/scripts/mxunit-launcher.cfc"));
        final String resultsFileName="mxunit-result-capture.cfc";
        LOG.debug("Copying results capture file " + resultsFileName + " to component folder: "+ directory);
        createFile(project,directory,resultsFileName,getLauncherText("/scripts/mxunit-result-capture.cfc"));
        String webPath=params.getWebPath();
        if (webPath.endsWith("/") || webPath.endsWith("\\")) {
          webPath=webPath.substring(0,webPath.length() - 1);
        }
        String agentPath=webPath.substring(0,webPath.lastIndexOf('/')) + "/" + launcherFileName;
        LOG.debug("Retrieving data from coldfusion server by " + agentPath + " URL");
        BufferedReader reader=null;
        String agentUrl;
        if (params.getScope() == CfmlUnitRunnerParameters.Scope.Directory) {
          agentUrl=agentPath + "?method=executeDirectory&directoryName=" + componentFile.getName();
        }
 else {
          agentUrl=agentPath + "?method=executeTestCase&componentName=" + componentFile.getNameWithoutExtension();
          if (params.getScope() == CfmlUnitRunnerParameters.Scope.Method) {
            agentUrl+="&methodName=" + params.getMethod();
          }
        }
        HttpMethod method=null;
        try {
          LOG.debug("Retrieving test results from: " + agentUrl);
          HttpClient client=new HttpClient();
          method=new GetMethod(agentUrl);
          int statusCode=client.executeMethod(method);
          if (statusCode != HttpStatus.SC_OK) {
            LOG.debug("Http request failed: " + method.getStatusLine());
            processHandler.notifyTextAvailable("Http request failed: " + method.getStatusLine(),ProcessOutputTypes.SYSTEM);
          }
          final InputStream responseStream=method.getResponseBodyAsStream();
          reader=new BufferedReader(new InputStreamReader(responseStream));
          String line;
          while (!processHandler.isProcessTerminating() && !processHandler.isProcessTerminated() && (line=reader.readLine()) != null) {
            if (!StringUtil.isEmptyOrSpaces(line)) {
              LOG.debug("MXUnit: " + line);
              processHandler.notifyTextAvailable(line + "\n",ProcessOutputTypes.SYSTEM);
            }
          }
        }
 catch (        IOException e) {
          LOG.warn(e);
          processHandler.notifyTextAvailable("Failed to retrieve test results from the server at " + agentUrl + "\n",ProcessOutputTypes.SYSTEM);
        }
 finally {
          if (method != null) {
            method.releaseConnection();
          }
          if (reader != null) {
            try {
              reader.close();
            }
 catch (            IOException e) {
            }
          }
        }
        LOG.debug("Cleaning temporary files");
        deleteFile(project,directory.findChild(launcherFileName));
        deleteFile(project,directory.findChild(resultsFileName));
        if (!processHandler.isProcessTerminated() && !processHandler.isProcessTerminating()) {
          processHandler.destroyProcess();
        }
      }
 catch (      ExecutionException e) {
        ref.set(e);
      }
    }
  }
);
  if (!ref.isNull()) {
    throw ref.get();
  }
}
