{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 16:
{
        return HbTokenTypes.CONTENT;
      }
case 31:
    break;
case 7:
{
    return HbTokenTypes.ESCAPE_CHAR;
  }
case 32:
break;
case 2:
{
return HbTokenTypes.WHITE_SPACE;
}
case 33:
break;
case 28:
zzMarkedPos=zzStartRead + 5;
{
return HbTokenTypes.BOOLEAN;
}
case 34:
break;
case 27:
zzMarkedPos=zzStartRead + 4;
{
return HbTokenTypes.BOOLEAN;
}
case 35:
break;
case 18:
{
return HbTokenTypes.OPEN_PARTIAL;
}
case 36:
break;
case 4:
{
return HbTokenTypes.SEP;
}
case 37:
break;
case 9:
yypushback(1);
{
return HbTokenTypes.ID;
}
case 38:
break;
case 11:
zzMarkedPos=zzStartRead + 1;
{
return HbTokenTypes.ID;
}
case 39:
break;
case 12:
{
return HbTokenTypes.ID;
}
case 40:
break;
case 8:
{
while (yylength() > 0 && yytext().subSequence(yylength() - 1,yylength()).toString().equals("{")) {
yypushback(1);
}
if (yylength() > 1 && yytext().subSequence(yylength() - 2,yylength()).toString().equals("\\\\")) {
return HbTokenTypes.CONTENT;
}
 else if (yylength() > 0 && yytext().toString().substring(yylength() - 1,yylength()).equals("\\")) {
yypushback(1);
yypushState(emu);
}
 else {
yypushState(mu);
}
if (!yytext().toString().equals("")) {
if (yytext().toString().trim().length() == 0) {
return HbTokenTypes.WHITE_SPACE;
}
 else {
return HbTokenTypes.CONTENT;
}
}
}
case 41:
break;
case 26:
zzMarkedPos=zzStartRead + 4;
{
return HbTokenTypes.ELSE;
}
case 42:
break;
case 25:
{
yypopState();
return HbTokenTypes.UNCLOSED_COMMENT;
}
case 43:
break;
case 22:
{
yypushback(3);
yypopState();
yypushState(comment);
}
case 44:
break;
case 10:
{
return HbTokenTypes.OPEN;
}
case 45:
break;
case 24:
{
while (yylength() > 0 && (yytext().subSequence(yylength() - 1,yylength()).toString().equals("{") || yytext().subSequence(yylength() - 1,yylength()).toString().equals("\\"))) {
yypushback(1);
}
yypopState();
return HbTokenTypes.CONTENT;
}
case 46:
break;
case 20:
{
return HbTokenTypes.OPEN_ENDBLOCK;
}
case 47:
break;
case 21:
{
return HbTokenTypes.OPEN_INVERSE;
}
case 48:
break;
case 14:
{
return HbTokenTypes.STRING;
}
case 49:
break;
case 30:
{
yypopState();
return HbTokenTypes.COMMENT;
}
case 50:
break;
case 19:
{
return HbTokenTypes.OPEN_BLOCK;
}
case 51:
break;
case 6:
{
return HbTokenTypes.DATA_PREFIX;
}
case 52:
break;
case 1:
{
return HbTokenTypes.CONTENT;
}
case 53:
break;
case 5:
{
return HbTokenTypes.EQUALS;
}
case 54:
break;
case 17:
{
return HbTokenTypes.OPEN_UNESCAPED;
}
case 55:
break;
case 29:
{
while (yylength() > 2 && yytext().subSequence(yylength() - 3,yylength()).toString().equals("}}}")) {
yypushback(1);
}
yypopState();
return HbTokenTypes.COMMENT;
}
case 56:
break;
case 23:
{
yypopState();
return HbTokenTypes.CLOSE_UNESCAPED;
}
case 57:
break;
case 13:
{
yypopState();
return HbTokenTypes.CLOSE;
}
case 58:
break;
case 3:
{
return HbTokenTypes.INVALID;
}
case 59:
break;
case 15:
yypushback(1);
{
return HbTokenTypes.INTEGER;
}
case 60:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
