{
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  List<Module> modules=new ArrayList<Module>(myTreeItems.keySet());
  Collections.sort(modules,new Comparator<Module>(){
    @Override public int compare(    final Module o1,    final Module o2){
      return o1.getName().compareToIgnoreCase(o2.getName());
    }
  }
);
  for (  Module module : modules) {
    DefaultMutableTreeNode moduleNode=new DefaultMutableTreeNode(module,true);
    root.add(moduleNode);
    List<FlexIdeBCConfigurable> bcs=myTreeItems.get(module);
    Collections.sort(bcs,new Comparator<FlexIdeBCConfigurable>(){
      @Override public int compare(      final FlexIdeBCConfigurable o1,      final FlexIdeBCConfigurable o2){
        return o1.getDisplayName().compareToIgnoreCase(o2.getDisplayName());
      }
    }
);
    for (    FlexIdeBCConfigurable bc : bcs) {
      DefaultMutableTreeNode bcNode=new DefaultMutableTreeNode(bc,false);
      moduleNode.add(bcNode);
    }
  }
  myTree.setModel(new DefaultTreeModel(root));
  myTree.setRootVisible(false);
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    @Override public String convert(    TreePath o){
      Object lastPathComponent=o.getLastPathComponent();
      return getText((DefaultMutableTreeNode)lastPathComponent);
    }
  }
,true).setComparator(new SpeedSearchComparator(false));
  TreeUIHelper.getInstance().installTreeSpeedSearch(myTree);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      updateOnSelectionChange();
    }
  }
);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    @Override public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
      Object object=treeNode.getUserObject();
      if (object instanceof Module) {
        Module module=(Module)object;
        setIcon(ModuleType.get(module).getNodeIcon(expanded));
        append(module.getName());
      }
 else {
        FlexIdeBCConfigurable configurable=(FlexIdeBCConfigurable)object;
        setIcon(configurable.getIcon());
        BCUtils.renderBuildConfiguration(configurable.getEditableObject(),null).appendToComponent(this);
      }
    }
  }
);
  TreeUtil.expandAll(myTree);
  myTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2 && mySelection != null) {
        doOKAction();
      }
    }
  }
);
  myTree.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == KeyEvent.VK_ENTER) {
        doOKAction();
      }
    }
  }
);
  updateOnSelectionChange();
  return myContentPane;
}
