{
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  for (  Module module : myTreeItems.keySet()) {
    DefaultMutableTreeNode moduleNode=new DefaultMutableTreeNode(module,true);
    root.add(moduleNode);
    for (    FlexIdeBCConfigurable bc : myTreeItems.get(module)) {
      DefaultMutableTreeNode bcNode=new DefaultMutableTreeNode(bc,false);
      moduleNode.add(bcNode);
    }
  }
  myTree=new Tree(new DefaultTreeModel(root));
  myTree.setRootVisible(false);
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    @Override public String convert(    TreePath o){
      Object lastPathComponent=o.getLastPathComponent();
      return getText((DefaultMutableTreeNode)lastPathComponent);
    }
  }
,true).setComparator(new SpeedSearchComparator(false));
  TreeUIHelper.getInstance().installTreeSpeedSearch(myTree);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      updateOkButton();
    }
  }
);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    @Override public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
      append(getText(treeNode));
      Object object=treeNode.getUserObject();
      if (object instanceof Module) {
        setIcon(ModuleType.get((Module)object).getNodeIcon(expanded));
      }
 else {
        setIcon(((FlexIdeBCConfigurable)object).getIcon());
      }
    }
  }
);
  JPanel p=new JPanel(new BorderLayout());
  p.setPreferredSize(new Dimension(400,430));
  p.add(ScrollPaneFactory.createScrollPane(myTree),BorderLayout.CENTER);
  TreeUtil.expandAll(myTree);
  myTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2 && mySelection != null) {
        doOKAction();
      }
    }
  }
);
  myTree.addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == KeyEvent.VK_ENTER) {
        doOKAction();
      }
    }
  }
);
  updateOkButton();
  return p;
}
