{
  if (virtualFile == null) {
    return false;
  }
  if (processedFiles.contains(virtualFile)) {
    return true;
  }
  processedFiles.add(virtualFile);
  boolean contains=fileNames == null || fileNames.contains(virtualFile.getName());
  if (contains) {
    final PsiFile psiFile=context.getManager().findFile(virtualFile);
    for (    PsiElement root : findDartRoots(psiFile)) {
      if (!DartPsiCompositeElementImpl.processDeclarationsImpl(root,processor,ResolveState.initial(),null)) {
        return false;
      }
    }
  }
  for (  String relativePathOrUrl : DartPathIndex.getPaths(context.getProject(),virtualFile)) {
    if (fileNames != null && !fileNames.contains(PathUtil.getFileName(relativePathOrUrl))) {
      continue;
    }
    VirtualFile childFile=findRelativeFile(virtualFile,relativePathOrUrl);
    childFile=childFile != null ? childFile : VirtualFileManager.getInstance().findFileByUrl(relativePathOrUrl);
    if (childFile == null || processedFiles.contains(childFile)) {
      continue;
    }
    final PsiFile childPsiFile=context.getManager().findFile(childFile);
    if (childPsiFile != null) {
      if (!processTopLevelDeclarationsImpl(childPsiFile,processor,childFile,fileNames,processedFiles)) {
        return false;
      }
    }
  }
  if (isLookingForPrivate) {
    return true;
  }
  for (  DartPathInfo libraryPathInfo : DartImportIndex.getLibraryNames(context.getProject(),virtualFile)) {
    if (libraryPathInfo.getPrefix() != null) {
      continue;
    }
    final PsiScopeProcessor importShowHideAwareProcessor=libraryPathInfo.wrapElementProcessor(processor);
    final String libraryNameOrPath=libraryPathInfo.getPath();
    List<VirtualFile> libraryRoots=DartLibraryIndex.findLibraryClass(context,libraryNameOrPath);
    for (    VirtualFile libraryRoot : libraryRoots) {
      if (!processTopLevelDeclarationsImpl(context,importShowHideAwareProcessor,libraryRoot,fileNames,processedFiles)) {
        return false;
      }
    }
    VirtualFile sourceFile=findFileByPath(context.getProject(),virtualFile,libraryNameOrPath);
    if (sourceFile != null) {
      if (!processTopLevelDeclarationsImpl(context,importShowHideAwareProcessor,sourceFile,fileNames,processedFiles)) {
        return false;
      }
    }
  }
  return true;
}
