{
  if (virtualFile == null)   return false;
  if (processedFiles.contains(virtualFile)) {
    processor.processFilteredOutElementsForImportedFile(virtualFile);
    return true;
  }
  processedFiles.add(virtualFile);
  boolean contains=fileNames == null || fileNames.contains(virtualFile.getName());
  if (contains) {
    final PsiFile psiFile=context.getManager().findFile(virtualFile);
    for (    PsiElement root : findDartRoots(psiFile)) {
      if (!DartPsiCompositeElementImpl.processDeclarationsImpl(root,processor,ResolveState.initial(),null)) {
        return false;
      }
    }
  }
  for (  String partUrl : DartPathIndex.getPaths(context.getProject(),virtualFile)) {
    if (fileNames != null && !fileNames.contains(PathUtil.getFileName(partUrl))) {
      continue;
    }
    final VirtualFile partFile=getImportedFile(context.getProject(),virtualFile,partUrl);
    if (partFile == null || processedFiles.contains(partFile)) {
      continue;
    }
    final PsiFile partPsiFile=context.getManager().findFile(partFile);
    if (partPsiFile != null) {
      if (!processTopLevelDeclarationsImpl(partPsiFile,processor,partFile,fileNames,processedFiles)) {
        return false;
      }
    }
  }
  if (isLookingForPrivate) {
    return true;
  }
  final List<VirtualFile> libraryFiles=findLibrary(context.getContainingFile());
  final boolean processingLibraryWhereContextElementLocated=libraryFiles.contains(virtualFile);
  for (  DartImportOrExportInfo importOrExportInfo : DartImportAndExportIndex.getImportAndExportInfos(context.getProject(),virtualFile)) {
    if (processingLibraryWhereContextElementLocated && importOrExportInfo.getKind() == Kind.Export)     continue;
    if (!processingLibraryWhereContextElementLocated && importOrExportInfo.getKind() == Kind.Import)     continue;
    if (importOrExportInfo.getKind() == Kind.Import && importOrExportInfo.getImportPrefix() != null)     continue;
    final VirtualFile importedFile=getImportedFile(context.getProject(),virtualFile,importOrExportInfo.getUri());
    if (importedFile != null) {
      processor.importedFileProcessingStarted(importedFile,importOrExportInfo);
      final boolean continueProcessing=processTopLevelDeclarationsImpl(context,processor,importedFile,fileNames,processedFiles);
      processor.importedFileProcessingFinished(importedFile);
      if (!continueProcessing)       return false;
    }
  }
  return true;
}
