{
  final GlobalSearchScope moduleWithDependenciesAndLibrariesScope=moduleInfo.getModule().getModuleWithDependenciesAndLibrariesScope(false);
  final List<JSClass> holders=new ArrayList<JSClass>(2);
  if (flexSdkVersion.charAt(0) > '3') {
    JSClass clazz=((JSClass)JSResolveUtil.findClassByQName(FlexCommonTypeNames.SPARK_APPLICATION,moduleWithDependenciesAndLibrariesScope));
    if (clazz != null) {
      holders.add(clazz);
    }
  }
  JSClass mxApplicationClass=((JSClass)JSResolveUtil.findClassByQName(FlexCommonTypeNames.MX_APPLICATION,moduleWithDependenciesAndLibrariesScope));
  if (mxApplicationClass != null) {
    holders.add(mxApplicationClass);
  }
  final LocalCssWriter localCssWriter=new LocalCssWriter(stringWriter,problemsHolder,projectDocumentReferenceCounter,assetCounter);
  sparkTheme(moduleInfo,localCssWriter);
  if (holders.isEmpty()) {
    return;
  }
  final StyleTagWriter styleTagWriter=new StyleTagWriter(localCssWriter);
  final Processor<JSClass> processor=new Processor<JSClass>(){
    @Override public boolean process(    JSClass jsClass){
      PsiFile containingFile=jsClass.getNavigationElement().getContainingFile();
      if (containingFile instanceof XmlFile) {
        XmlTag rootTag=((XmlFile)containingFile).getRootTag();
        if (rootTag != null) {
          final VirtualFile virtualFile=containingFile.getVirtualFile();
          problemsHolder.setCurrentFile(virtualFile);
          try {
            for (            final XmlTag subTag : rootTag.getSubTags()) {
              if (subTag.getNamespace().equals(JavaScriptSupportLoader.MXML_URI3) && subTag.getLocalName().equals(FlexPredefinedTagNames.STYLE)) {
                try {
                  LocalStyleHolder localStyleHolder=styleTagWriter.write(subTag,moduleInfo.getModule(),virtualFile);
                  if (localStyleHolder != null) {
                    moduleInfo.addLocalStyleHolder(localStyleHolder);
                  }
                }
 catch (                InvalidPropertyException e) {
                  problemsHolder.add(e);
                }
              }
            }
          }
  finally {
            problemsHolder.setCurrentFile(null);
          }
        }
      }
      return true;
    }
  }
;
  final GlobalSearchScope moduleScope=moduleInfo.getModule().getModuleScope(false);
  for (  JSClass holder : holders) {
    JSClassSearch.searchClassInheritors(new JSClassSearch.SearchParameters(holder,true,moduleScope)).forEach(processor);
  }
}
