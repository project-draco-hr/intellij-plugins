{
  final JComponent jComponent=super.createComponent();
  final AbstractFileTreeTable<CssDialect> treeView=getTreeView();
  treeView.setRootVisible(false);
  ((DefaultTreeModel)treeView.getTableModel()).setRoot(new AbstractFileTreeTable.ProjectRootNode(myProject){
    @Override protected void appendChildrenTo(    final Collection<AbstractFileTreeTable.ConvenientNode> children){
      final Module[] modules=ModuleManager.getInstance(myProject).getModules();
      for (      Module module : modules) {
        if (FlexUtils.isFlexModuleOrContainsFlexFacet(module)) {
          final VirtualFile[] contentRoots=ModuleRootManager.getInstance(module).getContentRoots();
          for (          VirtualFile contentRoot : contentRoots) {
            children.add(new AbstractFileTreeTable.FileNode(contentRoot,myProject,new VirtualFileFilter(){
              @Override public boolean accept(              VirtualFile file){
                return file.isDirectory() || canBeConfigured(file);
              }
            }
));
          }
        }
      }
    }
  }
);
  treeView.getEmptyText().setText(FlexBundle.message("css.dialects.flex.modules.not.found"));
  return jComponent;
}
