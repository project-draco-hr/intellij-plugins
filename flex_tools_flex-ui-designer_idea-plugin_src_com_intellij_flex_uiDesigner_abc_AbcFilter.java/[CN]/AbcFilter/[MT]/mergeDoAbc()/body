{
  final Decoder[] decoders=this.decoders.toArray(new Decoder[this.decoders.size()]);
  final int abcSize=decoders.length;
  final ConstantPool[] pools=new ConstantPool[abcSize];
  for (int i=0; i < abcSize; i++) {
    pools[i]=decoders[i].constantPool;
  }
  final Encoder encoder=new Encoder(46,16);
  encoder.enablePeepHole();
  encoder.configure(decoders);
  encoder.addConstantPools(pools);
  Decoder decoder;
  for (int i=0; i < abcSize; i++) {
    decoder=decoders[i];
    encoder.useConstantPool(i);
    Decoder.MethodInfo methodInfo=decoder.methodInfo;
    for (int j=0, infoSize=methodInfo.size(); j < infoSize; j++) {
      methodInfo.decode(j,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.MetaDataInfo metadataInfo=decoder.metadataInfo;
    for (int k=0, infoSize=metadataInfo.size(); k < infoSize; k++) {
      metadataInfo.decode(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.ClassInfo classInfo=decoder.classInfo;
    for (int k=0, infoSize=classInfo.size(); k < infoSize; k++) {
      classInfo.decodeInstance(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.ClassInfo classInfo=decoder.classInfo;
    for (int k=0, infoSize=classInfo.size(); k < infoSize; k++) {
      classInfo.decodeClass(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.ScriptInfo scriptInfo=decoder.scriptInfo;
    for (int k=0, scriptSize=scriptInfo.size(); k < scriptSize; k++) {
      scriptInfo.decode(k,encoder);
    }
  }
  for (int j=0; j < abcSize; j++) {
    decoder=decoders[j];
    encoder.useConstantPool(j);
    Decoder.MethodBodies methodBodies=decoder.methodBodies;
    for (int k=0, bodySize=methodBodies.size(); k < bodySize; k++) {
      methodBodies.decode(k,2,encoder);
    }
  }
  ByteBuffer b=ByteBuffer.allocate(2 * 1024 * 1024);
  b.order(ByteOrder.LITTLE_ENDIAN);
  encoder.toABC(b);
  b.flip();
  channel.write(b);
}
