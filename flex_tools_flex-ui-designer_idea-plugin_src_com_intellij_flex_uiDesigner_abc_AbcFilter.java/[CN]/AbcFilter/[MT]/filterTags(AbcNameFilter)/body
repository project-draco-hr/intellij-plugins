{
  lastWrittenPosition=0;
  while (buffer.position() < buffer.limit()) {
    int tagCodeAndLength=buffer.getShort();
    int type=tagCodeAndLength >> 6;
    int length=tagCodeAndLength & 0x3F;
    if (length == 63) {
      length=buffer.getInt();
    }
switch (type) {
case TagTypes.End:
      buffer.position(lastWrittenPosition);
    channel.write(buffer);
  return;
case TagTypes.SymbolClass:
{
  final int tagStartPosition=buffer.position();
  writeDataBeforeTag(length);
  mergeDoAbc();
  lastWrittenPosition=tagStartPosition - (length < 63 ? 2 : 6);
  buffer.position(tagStartPosition);
  if (replaceMainClass) {
    lastWrittenPosition=parseSymbolClassTagAndRenameClassAssociatedWithMainTimeline(lastWrittenPosition,length);
  }
  buffer.position(tagStartPosition + length);
}
continue;
case TagTypes.EnableDebugger:
case TagTypes.EnableDebugger2:
case TagTypes.SetBackgroundColor:
case TagTypes.ProductInfo:
case TagTypes.DebugID:
skipTag(length);
continue;
case TagTypes.DoABC2:
String name=readAbcName(buffer.position() + 4);
if (!abcNameFilter.accept(name)) {
skipTag(length);
continue;
}
 else {
int oldPosition=buffer.position();
writeDataBeforeTag(length);
buffer.position(oldPosition);
if (doAbc2(length,name)) {
}
 else {
final int off=4 + name.length() + 1;
buffer.position(buffer.position() + off);
decoders.add(new Decoder(new BufferWrapper(buffer,length - off)));
}
buffer.position(lastWrittenPosition);
continue;
}
default :
buffer.position(buffer.position() + length);
break;
}
}
}
