{
  return new DartVisitor(){
    public void visitReferenceExpression(    @NotNull final DartReferenceExpression referenceExpression){
      if (PsiTreeUtil.getChildOfType(referenceExpression,DartReferenceExpression.class) != null)       return;
      final PsiElement referenceParent=referenceExpression.getParent();
      if (referenceParent instanceof DartFactoryConstructorDeclaration || referenceParent instanceof DartNamedConstructorDeclaration) {
        return;
      }
      final PsiElement resolve=referenceExpression.resolve();
      final PsiElement parent=resolve == null ? null : resolve.getParent();
      if (resolve instanceof DartComponentName && (parent instanceof DartComponent)) {
        if (((DartComponent)parent).getMetadataByName(DEPRECATED_METADATA) != null) {
          holder.registerProblem(referenceExpression,DartBundle.message("ref.is.deprecated"),ProblemHighlightType.LIKE_DEPRECATED,LocalQuickFix.EMPTY_ARRAY);
        }
 else         if (parent instanceof DartMethodDeclaration && ((DartComponent)parent).isConstructor()) {
          final DartClass dartClass=PsiTreeUtil.getParentOfType(parent,DartClass.class);
          if (dartClass != null && dartClass.getMetadataByName(DEPRECATED_METADATA) != null) {
            holder.registerProblem(referenceExpression,DartBundle.message("ref.is.deprecated"),ProblemHighlightType.LIKE_DEPRECATED,LocalQuickFix.EMPTY_ARRAY);
          }
        }
      }
    }
  }
;
}
