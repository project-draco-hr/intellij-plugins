{
  if (element instanceof CfmlStringLiteralExpression) {
    return new Tokenizer(){
      @Override public void tokenize(      @NotNull final PsiElement element,      TokenConsumer consumer){
        consumer.consumeToken(element,new TextSplitter(){
          @Override public void split(          @Nullable String text,          @NotNull TextRange range,          Consumer<TextRange> consumer){
            int elementOffset=element.getTextRange().getStartOffset();
            for (PsiElement e=element.getFirstChild(); e != null; e=e.getNextSibling()) {
              ASTNode astNode=e.getNode();
              if (astNode == null)               continue;
              IElementType type=astNode.getElementType();
              if (type == CfmlTokenTypes.STRING_TEXT) {
                doSplit(text,astNode.getTextRange().shiftRight(-elementOffset),consumer);
              }
            }
          }
        }
);
      }
    }
;
  }
 else   if (element instanceof CfmlReferenceExpression) {
    final PsiElement parent=element.getParent();
    if (parent instanceof CfmlAssignmentExpression) {
      CfmlAssignmentExpression assignment=(CfmlAssignmentExpression)parent;
      CfmlVariable var=assignment.getAssignedVariable();
      if (var != null && assignment.getAssignedVariableElement() == element) {
        return TEXT_TOKENIZER;
      }
    }
  }
 else   if (element instanceof CfmlTagComponentImpl) {
    return EMPTY_TOKENIZER;
  }
 else   if (element instanceof LeafPsiElement && ((LeafPsiElement)element).getElementType() == CfmlTokenTypes.COMMENT) {
    return myCfmlCommentTokenizer;
  }
  return super.getTokenizer(element);
}
