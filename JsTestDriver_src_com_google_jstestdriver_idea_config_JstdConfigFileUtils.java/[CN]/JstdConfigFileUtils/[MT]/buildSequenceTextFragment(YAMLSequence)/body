{
  final Ref<Integer> startOffsetRef=Ref.create(null);
  final Ref<Integer> endOffsetRef=Ref.create(null);
  sequence.acceptChildren(new PsiElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (JsPsiUtils.isElementOfType(element,YAMLTokenTypes.TEXT,YAMLTokenTypes.SCALAR_DSTRING,YAMLTokenTypes.SCALAR_STRING)) {
        QuotedText quotedText=new QuotedText(element);
        TextRange usefulTextRange=quotedText.getUsefulDocumentTextRange();
        if (startOffsetRef.isNull()) {
          startOffsetRef.set(usefulTextRange.getStartOffset());
        }
        endOffsetRef.set(usefulTextRange.getEndOffset());
      }
    }
  }
);
  Integer startOffset=startOffsetRef.get();
  Integer endOffset=endOffsetRef.get();
  if (startOffset == null || endOffset == null) {
    return null;
  }
  int sequenceStartOffset=sequence.getTextRange().getStartOffset();
  TextRange textRangeInSequence=TextRange.create(startOffset - sequenceStartOffset,endOffset - sequenceStartOffset);
  return PsiElementFragment.create(sequence,textRangeInSequence);
}
