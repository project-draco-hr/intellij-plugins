{
  boolean failureDetected=false;
  final StringTokenizer tokenizer=new StringTokenizer(output,"\r\n");
  while (tokenizer.hasMoreElements()) {
    final String text=tokenizer.nextElement();
    if (!StringUtil.isEmptyOrSpaces(text)) {
      final Matcher matcher=FlexCompilerHandler.errorPattern.matcher(text);
      if (matcher.matches()) {
        final String file=matcher.group(1);
        final String additionalInfo=matcher.group(2);
        final String line=matcher.group(3);
        final String column=matcher.group(4);
        final String type=matcher.group(5);
        final String message=matcher.group(6);
        final CompilerMessageCategory messageCategory="Warning".equals(type) ? CompilerMessageCategory.WARNING : CompilerMessageCategory.ERROR;
        final VirtualFile relativeFile=VfsUtil.findRelativeFile(file,null);
        final String fullMessage=additionalInfo == null ? message : additionalInfo + " " + message;
        compilationManager.addMessage(task,messageCategory,fullMessage,relativeFile != null ? relativeFile.getUrl() : null,line != null ? Integer.parseInt(line) : 0,column != null ? Integer.parseInt(column) : 0);
        failureDetected|=messageCategory == CompilerMessageCategory.ERROR;
      }
 else       if (text.startsWith("Error: ") || text.startsWith("Exception in thread \"main\" ")) {
        final String updatedText=text.startsWith("Error: ") ? text.substring("Error: ".length()) : text;
        compilationManager.addMessage(task,CompilerMessageCategory.ERROR,updatedText,null,-1,-1);
        failureDetected=true;
      }
 else {
        compilationManager.addMessage(task,CompilerMessageCategory.INFORMATION,text,null,-1,-1);
      }
    }
  }
  return !failureDetected;
}
