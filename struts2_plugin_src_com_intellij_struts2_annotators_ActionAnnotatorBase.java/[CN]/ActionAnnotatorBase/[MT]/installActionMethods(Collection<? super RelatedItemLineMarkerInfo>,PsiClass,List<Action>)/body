{
  final Map<PsiMethod,Set<PathReference>> pathReferenceMap=new HashMap<PsiMethod,Set<PathReference>>();
  for (  final Action action : actions) {
    final PsiMethod method=action.searchActionMethod();
    if (method == null || !clazz.equals(method.getContainingClass())) {
      continue;
    }
    final Set<PathReference> pathReferences=new HashSet<PathReference>();
    final List<Result> results=action.getResults();
    for (    final Result result : results) {
      final PathReference pathReference=result.getValue();
      ContainerUtil.addIfNotNull(pathReferences,pathReference);
    }
    final Set<PathReference> toStore=ContainerUtil.getOrCreate(pathReferenceMap,method,new HashSet<PathReference>());
    toStore.addAll(pathReferences);
    pathReferenceMap.put(method,toStore);
  }
  for (  final Map.Entry<PsiMethod,Set<PathReference>> entries : pathReferenceMap.entrySet()) {
    final NavigationGutterIconBuilder<PathReference> gutterIconBuilder=NavigationGutterIconBuilder.create(StrutsIcons.RESULT,PATH_REFERENCE_CONVERTER,PATH_REFERENCE_GOTO_RELATED_ITEM_PROVIDER).setAlignment(GutterIconRenderer.Alignment.LEFT).setPopupTitle(StrutsBundle.message("annotators.action.goto.result")).setTargets(entries.getValue()).setTooltipTitle(StrutsBundle.message("annotators.action.goto.result.tooltip"));
    lineMarkerInfos.add(gutterIconBuilder.createLineMarkerInfo(entries.getKey()));
  }
}
