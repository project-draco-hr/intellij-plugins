{
  if (!(element instanceof PsiIdentifier))   return;
  final PsiClass clazz=getActionPsiClass(element.getParent());
  if (clazz == null || clazz.getNameIdentifier() != element) {
    return;
  }
  if (clazz.isInterface() || clazz.isAnnotationType() || !clazz.hasModifierProperty(PsiModifier.PUBLIC)|| clazz.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  final Module module=ModuleUtil.findModuleForPsiElement(clazz);
  if (module == null || StrutsFacet.getInstance(module) == null) {
    return;
  }
  final StrutsManager strutsManager=StrutsManager.getInstance(element.getProject());
  final StrutsModel strutsModel=strutsManager.getCombinedModel(module);
  if (strutsModel == null) {
    return;
  }
  final List<Action> actions=strutsModel.findActionsByClass(clazz);
  if (!actions.isEmpty()) {
    final NavigationGutterIconBuilder<DomElement> gutterIconBuilder=NavigationGutterIconBuilder.create(StrutsIcons.ACTION,NavigationGutterIconBuilder.DEFAULT_DOM_CONVERTOR).setPopupTitle(StrutsBundle.message("annotators.action.goto.declaration")).setTargets(actions).setTooltipTitle(StrutsBundle.message("annotators.action.goto.tooltip")).setCellRenderer(getActionRenderer());
    lineMarkerInfos.add(gutterIconBuilder.createLineMarkerInfo(element));
  }
}
