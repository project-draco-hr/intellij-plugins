{
  if (!(element instanceof PsiIdentifier))   return;
  final PsiClass clazz=getActionPsiClass(element.getParent());
  if (clazz == null || clazz.getNameIdentifier() != element) {
    return;
  }
  if (clazz.isInterface() || clazz.isAnnotationType() || !clazz.hasModifierProperty(PsiModifier.PUBLIC)|| clazz.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  final Module module=ModuleUtil.findModuleForPsiElement(clazz);
  if (module == null || StrutsFacet.getInstance(module) == null) {
    return;
  }
  final StrutsManager strutsManager=StrutsManager.getInstance(element.getProject());
  final StrutsModel strutsModel=strutsManager.getCombinedModel(module);
  if (strutsModel == null) {
    return;
  }
  final List<Action> actions=strutsModel.findActionsByClass(clazz);
  if (!actions.isEmpty()) {
    final NavigationGutterIconBuilder<DomElement> gutterIconBuilder=NavigationGutterIconBuilder.create(StrutsIcons.ACTION,NavigationGutterIconBuilder.DEFAULT_DOM_CONVERTOR,NavigationGutterIconBuilder.DOM_GOTO_RELATED_ITEM_PROVIDER).setPopupTitle(StrutsBundle.message("annotators.action.goto.declaration")).setTargets(actions).setTooltipTitle(StrutsBundle.message("annotators.action.goto.tooltip")).setCellRenderer(getActionRenderer());
    lineMarkerInfos.add(gutterIconBuilder.createLineMarkerInfo(element));
  }
  final Map<PsiMethod,Set<PathReference>> pathReferenceMap=new HashMap<PsiMethod,Set<PathReference>>();
  for (  final Action action : actions) {
    final PsiMethod method=action.searchActionMethod();
    if (method == null) {
      continue;
    }
    final Set<PathReference> pathReferences=new HashSet<PathReference>();
    final List<Result> results=action.getResults();
    for (    final Result result : results) {
      final PathReference pathReference=result.getValue();
      ContainerUtil.addIfNotNull(pathReferences,pathReference);
    }
    final Set<PathReference> toStore=ContainerUtil.getOrCreate(pathReferenceMap,method,new HashSet<PathReference>());
    toStore.addAll(pathReferences);
    pathReferenceMap.put(method,toStore);
  }
  for (  final Map.Entry<PsiMethod,Set<PathReference>> entries : pathReferenceMap.entrySet()) {
    final NavigationGutterIconBuilder<PathReference> gutterIconBuilder=NavigationGutterIconBuilder.create(StrutsIcons.RESULT,PATH_REFERENCE_CONVERTER,PATH_REFERENCE_GOTO_RELATED_ITEM_PROVIDER).setPopupTitle(StrutsBundle.message("annotators.action.goto.result")).setTargets(entries.getValue()).setTooltipTitle(StrutsBundle.message("annotators.action.goto.result.tooltip"));
    lineMarkerInfos.add(gutterIconBuilder.createLineMarkerInfo(entries.getKey()));
  }
}
