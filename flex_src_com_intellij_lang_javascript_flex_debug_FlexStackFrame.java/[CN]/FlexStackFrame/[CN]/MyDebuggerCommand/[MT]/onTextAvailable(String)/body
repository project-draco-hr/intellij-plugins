{
  final int offsetIndex=hasFrame ? 1 : 0;
  if (current >= offsetIndex) {
    final StringTokenizer tokenizer=new StringTokenizer(s,"\r\n",true);
    Pair<String,StringBuilder> previousNameAndValue=null;
    while (tokenizer.hasMoreElements()) {
      final String token=tokenizer.nextToken();
      if (token.length() == 0)       continue;
      if (token.charAt(0) == '\r' || token.charAt(0) == '\n') {
        if (previousNameAndValue != null) {
          previousNameAndValue.second.append(token);
        }
 else {
          FlexDebugProcess.log("Unexpected token: [" + token + "], full string: ["+ s+ "]");
        }
        continue;
      }
      final int i=token.indexOf(DELIM);
      if (i == -1) {
        if (previousNameAndValue != null) {
          previousNameAndValue.second.append(token);
        }
 else {
          FlexDebugProcess.log("Unexpected token: [" + token + "], full string: ["+ s+ "]");
        }
        continue;
      }
      @NonNls String name=token.substring(0,i);
      if (name.startsWith("$")) {
        boolean completeDigits=name.length() > 1;
        for (int j=1; j < name.length(); ++j) {
          completeDigits&=Character.isDigit(name.charAt(j));
          if (!completeDigits)           break;
        }
        if (completeDigits)         name="this";
      }
      if (previousNameAndValue != null) {
        String prevName=previousNameAndValue.first;
        resultChildren.add(prevName,new FlexValue(FlexStackFrame.this,myDebugProcess,mySourcePosition,prevName,prevName,removeTrailingNewLines(previousNameAndValue.second),null,myValueType));
      }
      previousNameAndValue=Pair.create(name,new StringBuilder(token.substring(i + DELIM.length())));
    }
    if (previousNameAndValue != null) {
      String prevName=previousNameAndValue.first;
      resultChildren.add(prevName,new FlexValue(FlexStackFrame.this,myDebugProcess,mySourcePosition,prevName,prevName,removeTrailingNewLines(previousNameAndValue.second),null,myValueType));
    }
  }
  ++current;
  if (current == offsetIndex + 1) {
    myNode.addChildren(resultChildren,false);
    return CommandOutputProcessingMode.DONE;
  }
 else {
    return CommandOutputProcessingMode.PROCEEDING;
  }
}
