{
  try {
    List<ObrMavenResult> result=new ArrayList<ObrMavenResult>();
    indicator.setText("Connecting to " + getDisplayName() + "...");
    String url="http://www.springsource.com/repository/app/search?query=" + URLEncoder.encode(queryString,"utf-8");
    String contents=HttpRequests.request(url).readString(indicator);
    indicator.setText("Search completed. Getting results.");
    indicator.checkCanceled();
    int start=contents.indexOf("<div id=\"results-fragment\">");
    int end=contents.indexOf("</div>",start);
    contents=contents.substring(start,end);
    Matcher m=RESULT_PARSING_PATTERN.matcher(contents);
    while (m.find()) {
      String detailUrl=m.group(1);
      detailUrl=detailUrl.replaceAll(";jsessionid.*?\\?","?");
      detailUrl=detailUrl.replace("&amp;","&");
      String packageName=m.group(2);
      indicator.setText("Loading details for result " + packageName + "...");
      String detail=HttpRequests.request("http://www.springsource.com" + detailUrl).readString(indicator);
      indicator.checkCanceled();
      indicator.setText("Details retrieved. Getting detail information...");
      String groupId;
      String artifactId;
      String version;
      String classifier=null;
      Matcher groupMatcher=GROUP_ID_PATTERN.matcher(detail);
      if (groupMatcher.find()) {
        groupId=groupMatcher.group(1);
      }
 else {
        continue;
      }
      Matcher artifactMatcher=ARTIFACT_ID_PATTERN.matcher(detail);
      if (artifactMatcher.find()) {
        artifactId=artifactMatcher.group(1);
      }
 else {
        continue;
      }
      Matcher versionMatcher=VERSION_PATTERN.matcher(detail);
      if (versionMatcher.find()) {
        version=versionMatcher.group(1);
      }
 else {
        continue;
      }
      Matcher classifierMatcher=CLASSIFIER_PATTERN.matcher(detail);
      if (classifierMatcher.find()) {
        classifier=classifierMatcher.group(1);
      }
      result.add(new ObrMavenResult(groupId,artifactId,version,classifier,this));
    }
    indicator.setText("Done. " + result.size() + " artifacts found.");
    return result.toArray(new ObrMavenResult[result.size()]);
  }
 catch (  ProcessCanceledException ignored) {
    indicator.setText("Canceled.");
    return new ObrMavenResult[0];
  }
 finally {
    indicator.setIndeterminate(false);
  }
}
