{
  if (inMxmlEventAttributeValue) {
    final XmlAttribute xmlAttribute=getXmlAttribute(psiFile,editor);
    if (xmlAttribute != null) {
      final String attributeValue=eventHandlerName + "(event)";
      xmlAttribute.setValue(attributeValue);
      final PsiLanguageInjectionHost valueElement=(PsiLanguageInjectionHost)xmlAttribute.getValueElement();
      if (valueElement != null) {
        final Ref<PsiElement> ref=new Ref<PsiElement>();
        InjectedLanguageUtil.enumerate(valueElement,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
          public void visit(          @NotNull final PsiFile injectedPsi,          @NotNull final List<PsiLanguageInjectionHost.Shred> places){
            int i=injectedPsi.getText().indexOf(attributeValue);
            if (i != -1) {
              ref.set(PsiTreeUtil.findElementOfClassAtOffset(injectedPsi,i,JSReferenceExpression.class,false));
            }
          }
        }
);
        return ref.get();
      }
    }
  }
 else   if (inEventListenerCall) {
    if (handlerCallerAnchorInArgumentList != null) {
      PsiElement element=JSChangeUtil.createJSTreeFromText(psiFile.getProject(),eventHandlerName,JavaScriptSupportLoader.ECMA_SCRIPT_L4).getPsi();
      PsiElement created=null;
      if (element != null) {
        created=handlerCallerAnchorInArgumentList.getParent().addAfter(element,handlerCallerAnchorInArgumentList);
      }
      if (handlerCallerAnchorInArgumentList.getNode().getElementType() != JSTokenTypes.COMMA) {
        final PsiElement psi=JSChangeUtil.createJSTreeFromText(psiFile.getProject(),"a,b").getPsi();
        final JSCommaExpression commaExpression=PsiTreeUtil.getChildOfType(psi,JSCommaExpression.class);
        final LeafPsiElement comma=PsiTreeUtil.getChildOfType(commaExpression,LeafPsiElement.class);
        if (comma != null && comma.getNode().getElementType() == JSTokenTypes.COMMA) {
          handlerCallerAnchorInArgumentList.getParent().addAfter(comma,handlerCallerAnchorInArgumentList);
        }
      }
      ensureTrailingSemicolonPresent(psiFile,created);
      return created;
    }
 else     if (myExistingUnresolvedReverence != null) {
      ensureTrailingSemicolonPresent(psiFile,myExistingUnresolvedReverence);
      return myExistingUnresolvedReverence;
    }
  }
 else   if (inEventConstantExpression) {
    final String text="addEventListener(" + eventConstantExpression.getExpression().getText() + ", "+ eventHandlerName+ ");";
    final PsiElement element=JSChangeUtil.createJSTreeFromText(psiFile.getProject(),text,JavaScriptSupportLoader.ECMA_SCRIPT_L4).getPsi();
    if (element != null) {
      final PsiElement addedElement=eventConstantExpression.replace(element);
      final JSExpression expression=((JSExpressionStatement)addedElement).getExpression();
      final JSArgumentList argumentList=PsiTreeUtil.findChildOfType(expression,JSArgumentList.class);
      final JSExpression[] arguments=argumentList == null ? JSExpression.EMPTY_ARRAY : argumentList.getArguments();
      if (arguments.length == 2) {
        return arguments[1];
      }
    }
  }
  return null;
}
