{
  if (inMxmlEventAttributeValue) {
    final XmlAttribute xmlAttribute=getXmlAttribute(psiFile,editor);
    if (xmlAttribute != null) {
      xmlAttribute.setValue(eventHandlerName + "(event)");
    }
  }
 else   if (inEventListenerCall && handlerCallerAnchorInArgumentList != null) {
    PsiElement element=JSChangeUtil.createJSTreeFromText(psiFile.getProject(),eventHandlerName,JavaScriptSupportLoader.ECMA_SCRIPT_L4).getPsi();
    if (element != null) {
      handlerCallerAnchorInArgumentList.getParent().addAfter(element,handlerCallerAnchorInArgumentList);
    }
    if (handlerCallerAnchorInArgumentList.getNode().getElementType() != JSTokenTypes.COMMA) {
      final PsiElement psi=JSChangeUtil.createJSTreeFromText(psiFile.getProject(),"a,b").getPsi();
      final JSCommaExpression commaExpression=PsiTreeUtil.getChildOfType(psi,JSCommaExpression.class);
      final LeafPsiElement comma=PsiTreeUtil.getChildOfType(commaExpression,LeafPsiElement.class);
      if (comma != null && comma.getNode().getElementType() == JSTokenTypes.COMMA) {
        handlerCallerAnchorInArgumentList.getParent().addAfter(comma,handlerCallerAnchorInArgumentList);
      }
    }
  }
 else   if (inEventConstantExpression) {
    final String text="addEventListener(" + eventConstantExpression.getExpression().getText() + ", "+ eventHandlerName+ ");";
    final PsiElement element=JSChangeUtil.createJSTreeFromText(psiFile.getProject(),text,JavaScriptSupportLoader.ECMA_SCRIPT_L4).getPsi();
    if (element != null) {
      final PsiElement addedElement=eventConstantExpression.getParent().addBefore(element,eventConstantExpression);
      PsiElement sibling;
      while ((sibling=addedElement.getNextSibling()) != null && sibling != eventConstantExpression) {
        sibling.delete();
      }
      eventConstantExpression.delete();
    }
  }
}
