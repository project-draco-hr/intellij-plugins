{
  if (!recursion_guard_(b,l,"projectionExpression"))   return false;
  if (!nextTokenIs(b,LBRACE))   return false;
  boolean r;
  Marker m=enter_section_(b);
  r=consumeToken(b,LBRACE);
  r=r && expression(b,l + 1,-1);
  r=r && consumeToken(b,RBRACE);
  exit_section_(b,m,PROJECTION_EXPRESSION,r);
  return r;
}
