{
  if (!recursion_guard_(builder_,level_,"lambdaExpression"))   return false;
  if (!nextTokenIsFast(builder_,COLON))   return false;
  boolean result_;
  boolean pinned_;
  Marker marker_=enter_section_(builder_,level_,_NONE_,null);
  result_=consumeTokenSmart(builder_,COLON);
  pinned_=result_;
  result_=result_ && report_error_(builder_,consumeToken(builder_,LBRACKET));
  result_=pinned_ && report_error_(builder_,expression(builder_,level_ + 1,-1)) && result_;
  result_=pinned_ && consumeToken(builder_,RBRACKET) && result_;
  exit_section_(builder_,level_,marker_,LAMBDA_EXPRESSION,result_,pinned_,null);
  return result_ || pinned_;
}
