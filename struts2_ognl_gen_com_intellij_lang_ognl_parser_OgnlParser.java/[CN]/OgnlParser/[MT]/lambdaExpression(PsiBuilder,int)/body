{
  if (!recursion_guard_(b,l,"lambdaExpression"))   return false;
  if (!nextTokenIsSmart(b,COLON))   return false;
  boolean r, p;
  Marker m=enter_section_(b,l,_NONE_,LAMBDA_EXPRESSION,null);
  r=consumeTokenSmart(b,COLON);
  p=r;
  r=r && report_error_(b,consumeToken(b,LBRACKET));
  r=p && report_error_(b,expression(b,l + 1,-1)) && r;
  r=p && consumeToken(b,RBRACKET) && r;
  exit_section_(b,l,m,r,p,null);
  return r || p;
}
