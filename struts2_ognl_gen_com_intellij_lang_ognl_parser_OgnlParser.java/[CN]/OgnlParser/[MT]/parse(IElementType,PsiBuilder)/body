{
  int level_=0;
  boolean result_;
  builder_=adapt_builder_(root_,builder_,this);
  if (root_ == BINARY_EXPRESSION) {
    result_=expression(builder_,level_ + 1,4);
  }
 else   if (root_ == CONDITIONAL_EXPRESSION) {
    result_=expression(builder_,level_ + 1,3);
  }
 else   if (root_ == EXPRESSION) {
    result_=expression(builder_,level_ + 1,-1);
  }
 else   if (root_ == INDEXED_EXPRESSION) {
    result_=indexedExpression(builder_,level_ + 1);
  }
 else   if (root_ == LITERAL_EXPRESSION) {
    result_=literalExpression(builder_,level_ + 1);
  }
 else   if (root_ == METHOD_CALL_EXPRESSION) {
    result_=methodCallExpression(builder_,level_ + 1);
  }
 else   if (root_ == NEW_EXPRESSION) {
    result_=newExpression(builder_,level_ + 1);
  }
 else   if (root_ == PARENTHESIZED_EXPRESSION) {
    result_=parenthesizedExpression(builder_,level_ + 1);
  }
 else   if (root_ == REFERENCE_EXPRESSION) {
    result_=referenceExpression(builder_,level_ + 1);
  }
 else   if (root_ == SEQUENCE_EXPRESSION) {
    result_=sequenceExpression(builder_,level_ + 1);
  }
 else   if (root_ == UNARY_EXPRESSION) {
    result_=unaryExpression(builder_,level_ + 1);
  }
 else   if (root_ == VARIABLE_ASSIGNMENT_EXPRESSION) {
    result_=variableAssignmentExpression(builder_,level_ + 1);
  }
 else   if (root_ == VARIABLE_EXPRESSION) {
    result_=variableExpression(builder_,level_ + 1);
  }
 else {
    Marker marker_=builder_.mark();
    result_=parse_root_(root_,builder_,level_);
    while (builder_.getTokenType() != null) {
      builder_.advanceLexer();
    }
    marker_.done(root_);
  }
  return builder_.getTreeBuilt();
}
