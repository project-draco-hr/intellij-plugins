{
  myModifiableModel=modifiableModel;
  myEventDispatcher=EventDispatcher.create(ChangeListener.class);
  mySdkLabel.setLabelFor(myCombo.getComboBox());
  myInfoLabel.setIcon(UIUtil.getBalloonWarningIcon());
  myModifiableModel.addSdkListListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      rebuildComboModel();
    }
  }
,this);
  myCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      SdkConfigurationUtil.selectSdkHome(FlexIdeUtils.getSdkType(),new Consumer<String>(){
        @Override public void consume(        String homePath){
          myModifiableModel.findOrCreateSdk(homePath);
          setCurrentHomePath(homePath);
          myEventDispatcher.getMulticaster().stateChanged(new ChangeEvent(FlexSdkPanel.this));
        }
      }
);
    }
  }
);
  myCombo.getChildComponent().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      myModifiableModel.setUsed(FlexSdkPanel.this,(String)myCombo.getComboBox().getSelectedItem());
      if (myMute) {
        return;
      }
      comboItemChanged();
    }
  }
);
  myCombo.getChildComponent().setRenderer(new ListCellRendererWrapper(myCombo.getChildComponent().getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        String homePath=(String)value;
        setText(FileUtil.toSystemDependentName(homePath));
      }
 else {
        setText("(none)");
      }
    }
  }
);
  myEditButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      editSdk();
    }
  }
);
}
