{
  selectedRule=new SelectionInList<LibraryBundlificationRule>();
  libraries=BasicComponentFactory.createList(selectedRule);
  myLibrariesPanel=ToolbarDecorator.createDecorator(libraries).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      LibraryBundlificationRule newRule=new LibraryBundlificationRule();
      rules.add(newRule);
      selectedRule.fireIntervalAdded(rules.size() - 1,rules.size() - 1);
      selectedRule.setSelection(newRule);
      notifyChanged();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      if (rules.size() == 1) {
        LibraryBundlificationRule newRule=new LibraryBundlificationRule();
        rules.set(0,newRule);
        selectedRule.fireContentsChanged(0,1);
        selectedRule.setSelection(newRule);
      }
 else {
        int oldSelectionIndex=selectedRule.getSelectionIndex();
        rules.remove(selectedRule.getValue());
        selectedRule.fireIntervalRemoved(rules.size(),rules.size());
        final int newSelectionIndex=oldSelectionIndex > 0 ? oldSelectionIndex - 1 : oldSelectionIndex;
        if (newSelectionIndex == oldSelectionIndex) {
          selectedRule.clearSelection();
        }
        selectedRule.setSelectionIndex(newSelectionIndex);
      }
      notifyChanged();
    }
  }
).setMoveUpAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      int selectionIndex=selectedRule.getSelectionIndex();
      if (selectionIndex > 0) {
        LibraryBundlificationRule ruleToMove=rules.get(selectionIndex);
        rules.set(selectionIndex,rules.get(selectionIndex - 1));
        rules.set(selectionIndex - 1,ruleToMove);
        selectedRule.fireContentsChanged(selectionIndex - 1,selectionIndex);
        selectedRule.setSelectionIndex(selectionIndex - 1);
        notifyChanged();
      }
    }
  }
).setMoveDownAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      int selectionIndex=selectedRule.getSelectionIndex();
      if (selectionIndex < rules.size() - 1) {
        LibraryBundlificationRule ruleToMove=rules.get(selectionIndex);
        rules.set(selectionIndex,rules.get(selectionIndex + 1));
        rules.set(selectionIndex + 1,ruleToMove);
        selectedRule.fireContentsChanged(selectionIndex,selectionIndex + 1);
        selectedRule.setSelectionIndex(selectionIndex + 1);
        notifyChanged();
      }
    }
  }
).addExtraAction(new AnActionButton("Copy",PlatformIcons.COPY_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      LibraryBundlificationRule rule=selectedRule.getSelection();
      if (rule != null) {
        LibraryBundlificationRule newRule=rule.copy();
        int selectedIndex=selectedRule.getSelectionIndex();
        rules.add(selectedIndex,newRule);
        selectedRule.fireIntervalAdded(selectedIndex,selectedIndex);
        notifyChanged();
      }
    }
  }
).createPanel();
  beanAdapter=new BeanAdapter<LibraryBundlificationRule>(new LibraryBundlificationRule());
  libraryRegex=BasicComponentFactory.createTextField(beanAdapter.getValueModel("ruleRegex"),false);
  neverBundle=BasicComponentFactory.createCheckBox(beanAdapter.getValueModel("doNotBundle"),"");
  stopAfterThisRule=BasicComponentFactory.createCheckBox(beanAdapter.getValueModel("stopAfterThisRule"),"");
  selectedRule.addValueChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      beanAdapter.setBean(selectedRule.getSelection());
    }
  }
);
  beanPropertyChangeListener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      selectedRule.fireContentsChanged(selectedRule.getSelectionIndex(),1);
      notifyChanged();
    }
  }
;
}
