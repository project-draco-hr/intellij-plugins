{
  extend(CompletionType.BASIC,psiElement().withSuperParent(2,DartPathOrLibraryReference.class).withParent(DartStringLiteralExpression.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final Project project=parameters.getPosition().getProject();
      final Set<String> names=DartLibraryIndex.getAllLibraryNames(project);
      names.addAll(ContainerUtil.map(DartLibraryIndex.getAllStandardLibrariesFromSdk(project),new Function<String,String>(){
        @Override public String fun(        String coreLib){
          return "dart:" + coreLib;
        }
      }
));
      names.add("package:");
      for (      String libraryName : names) {
        if (libraryName.endsWith(".dart")) {
          continue;
        }
        result.addElement(new QuotedStringLookupElement(libraryName));
      }
    }
  }
);
  extend(CompletionType.BASIC,psiElement().withSuperParent(1,DartId.class).withSuperParent(2,DartLibraryId.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      for (      String libraryName : DartLibraryIndex.getAllLibraryNames(parameters.getPosition().getProject())) {
        result.addElement(LookupElementBuilder.create(libraryName));
      }
    }
  }
);
}
