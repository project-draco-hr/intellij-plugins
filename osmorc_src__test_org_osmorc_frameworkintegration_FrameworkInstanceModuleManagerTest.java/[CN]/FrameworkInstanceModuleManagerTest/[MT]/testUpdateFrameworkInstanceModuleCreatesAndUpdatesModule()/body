{
  expect(osmorcFacetUtil.hasOsmorcFacet(EasyMock.not(same(module)))).andReturn(false).anyTimes();
  expect(osmorcFacetUtil.hasOsmorcFacet(same(module))).andReturn(true).times(2);
  replay(osmorcFacetUtil);
  projectSettings.setCreateFrameworkInstanceModule(true);
  projectSettings.setFrameworkInstanceName("an Instance");
  testObject.updateFrameworkInstanceModule();
  Module module=ModuleManager.getInstance(project).findModuleByName(FrameworkInstanceModuleManager.FRAMEWORK_INSTANCE_MODULE_NAME);
  ModifiableRootModel model=ModuleRootManager.getInstance(module).getModifiableModel();
  OrderEntry[] orderEntries=model.getOrderEntries();
  model.dispose();
  assertContainsOnlyGivenLibraries(orderEntries,libraryA1,libraryA2);
  projectSettings.setFrameworkInstanceName("another Instance");
  testObject.updateFrameworkInstanceModule();
  ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
  orderEntries=rootModel.getOrderEntries();
  rootModel.dispose();
  assertContainsOnlyGivenLibraries(orderEntries,libraryB1,libraryB2,libraryB3);
  projectSettings.setCreateFrameworkInstanceModule(false);
  projectSettings.setFrameworkInstanceName("an Instance");
  testObject.updateFrameworkInstanceModule();
  module=ModuleManager.getInstance(project).findModuleByName(FrameworkInstanceModuleManager.FRAMEWORK_INSTANCE_MODULE_NAME);
  assertThat(module,nullValue());
  verify(osmorcFacetUtil);
}
