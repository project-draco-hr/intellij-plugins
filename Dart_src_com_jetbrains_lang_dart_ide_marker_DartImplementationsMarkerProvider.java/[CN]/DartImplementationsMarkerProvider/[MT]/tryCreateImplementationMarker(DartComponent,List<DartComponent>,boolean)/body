{
  final PsiElement componentName=componentWithDeclarationList.getComponentName();
  final String methodName=componentWithDeclarationList.getName();
  if (methodName == null || !componentWithDeclarationList.isPublic()) {
    return null;
  }
  final List<DartComponent> filteredSubItems=ContainerUtil.filter(subItems,new Condition<DartComponent>(){
    @Override public boolean value(    DartComponent component){
      return methodName.equals(component.getName());
    }
  }
);
  if (filteredSubItems.isEmpty() || componentName == null) {
    return null;
  }
  return new LineMarkerInfo<PsiElement>(componentName,componentName.getTextRange(),isInterface ? AllIcons.Gutter.ImplementedMethod : AllIcons.Gutter.OverridenMethod,Pass.UPDATE_OVERRIDEN_MARKERS,new Function<PsiElement,String>(){
    @Override public String fun(    PsiElement element){
      return isInterface ? DaemonBundle.message("method.is.implemented.too.many") : DaemonBundle.message("method.is.overridden.too.many");
    }
  }
,new GutterIconNavigationHandler<PsiElement>(){
    @Override public void navigate(    MouseEvent e,    PsiElement elt){
      PsiElementListNavigator.openTargets(e,DartResolveUtil.getComponentNames(filteredSubItems).toArray(new NavigatablePsiElement[filteredSubItems.size()]),isInterface ? DaemonBundle.message("navigation.title.implementation.method",componentWithDeclarationList.getName(),filteredSubItems.size()) : DaemonBundle.message("navigation.title.overrider.method",componentWithDeclarationList.getName(),filteredSubItems.size()),"Implementations of " + componentWithDeclarationList.getName(),new DefaultPsiElementCellRenderer());
    }
  }
,GutterIconRenderer.Alignment.RIGHT);
}
