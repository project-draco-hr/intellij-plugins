{
  TemplateStringLiteral literal=(TemplateStringLiteral)element;
  TemplateFunctionCall call=PsiTreeUtil.getParentOfType(literal,TemplateFunctionCall.class);
  if (call != null) {
    PsiElement callee=call.getCallee();
    if (callee != null && callee.getText().equals(FlaskNames.URL_FOR)) {
      FlaskViewMethodReference viewMethodReference=new FlaskViewMethodReference(literal){
        @Override protected PsiFile getViewFunctionsFile(){
          PsiFile templateFile=getElement().getContainingFile().getOriginalFile();
          List<PyStringLiteralExpression> references=FlaskTemplateManager.findTemplateReferences(templateFile);
          if (references.size() > 0) {
            return references.get(0).getContainingFile();
          }
          VirtualFile vFile=templateFile.getVirtualFile();
          if (vFile != null) {
            VirtualFile root=ProjectFileIndex.SERVICE.getInstance(getElement().getProject()).getContentRootForFile(vFile);
            if (root != null) {
              VirtualFile appFile=FlaskProjectConfigurator.findFlaskAppFile(root);
              if (appFile != null) {
                PsiFile appPsiFile=getElement().getManager().findFile(appFile);
                if (appPsiFile instanceof PyFile) {
                  return appPsiFile;
                }
              }
            }
          }
          return super.getViewFunctionsFile();
        }
      }
;
      return new PsiReference[]{viewMethodReference};
    }
  }
  return PsiReference.EMPTY_ARRAY;
}
