{
  final String testFile=System.getProperty("testFile");
  final Pair<VirtualFile[],VirtualFile[]> pair=getTestFiles();
  final VirtualFile[] files;
  VirtualFile[] auxiliaryFiles=pair.getSecond();
  if (testFile == null) {
    files=pair.getFirst();
  }
 else {
    String[] strings=testFile.split(",");
    files=new VirtualFile[]{getSource(strings[0] + ".mxml")};
    if (strings.length > 1) {
      auxiliaryFiles=new VirtualFile[auxiliaryFiles.length + strings.length - 1];
      System.arraycopy(pair.getSecond(),0,auxiliaryFiles,0,pair.getSecond().length);
      for (int i=1, j=pair.getSecond().length, n=strings.length; i < n; i++) {
        auxiliaryFiles[j++]=getSource(strings[i] + ".mxml");
      }
    }
  }
  testFiles(files,auxiliaryFiles);
  String[] problems=getLastProblems();
  if (testFile != null) {
    assertThat(problems,emptyArray());
  }
 else {
    assertThat(problems,m("spark.components.supportClasses.TrackBase is abstract class (line: 3)"),m("Default property not found for Rect (line: 2)"),m("Invalid class value (line: 6)","Invalid class value (line: 11)"),m("Unsupported embed asset type \"@Embed(source='/jazz.mp3')\" (line: 3)"),m("Invalid color name invalidcolorname (line: 2)","Invalid integer value (line: 3)","Invalid number value (line: 4)"),m("<a href=\"http://youtrack.jetbrains.net/issue/IDEA-72175\">Inline components are not supported</a> (line: 9)"),m("Support only MXML-based component AuxActionScriptProjectComponent"),m("Unresolved variable or type unresolvedData (line: 10)"),m("Initializer for Group cannot be represented in text (line: 2)","Initializer for Container cannot be represented in text (line: 5)","Children of Accordion must be mx.core.INavigatorContent (line: 8)"));
  }
}
