{
  final Project project=elements[0].getProject();
  final PsiFile file=elements[0].getContainingFile();
  final PsiElement anchorToAdd=scope.findAnchor(elements);
  final StringBuilder functionBody=new StringBuilder();
  final Set<String> usedNames=DartRefactoringUtil.collectUsedNames(anchorToAdd);
  String functionName="extracted";
  while (usedNames.contains(functionName)) {
    functionName+="0";
  }
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    DartExtractDialog extractDialog=new DartExtractDialog(project,functionName,controlFlow);
    if (!extractDialog.showAndGet()) {
      return;
    }
    functionName=extractDialog.getFunctionName();
  }
  functionBody.append(controlFlow.getSignature(functionName));
  functionBody.append("{\n");
  final int startOffset=elements[0].getTextRange().getStartOffset();
  final int endOffset=elements[elements.length - 1].getTextRange().getEndOffset();
  functionBody.append(new TextRange(startOffset,endOffset).substring(elements[0].getContainingFile().getText()));
  if (!controlFlow.getReturnValues().isEmpty()) {
    functionBody.append("\nreturn ");
    final DartComponentName componentName=controlFlow.getReturnValues().iterator().next();
    functionBody.append(componentName.getName());
    functionBody.append(";");
  }
  functionBody.append("\n}");
  final String replaceStatementText=controlFlow.getReplaceStatementText(functionName);
  PsiElement replaceStatement=DartElementGenerator.createStatementFromText(project,replaceStatementText);
  final List<DartComponent> dartComponents=DartElementGenerator.createFunctionsFromText(project,functionBody.toString());
  if (replaceStatement == null || dartComponents.isEmpty()) {
    return;
  }
  PsiElement function=dartComponents.iterator().next();
  function=anchorToAdd.getParent().addBefore(function,anchorToAdd);
  final PsiElement newLineNode=PsiParserFacade.SERVICE.getInstance(function.getProject()).createWhiteSpaceFromText("\n");
  replaceStatement=elements[0].getParent().addBefore(replaceStatement,elements[0]);
  replaceStatement.getParent().addBefore(newLineNode,replaceStatement);
  function.getParent().addAfter(newLineNode,function);
  final ASTNode nextChild=replaceStatement.getNode().getTreeNext();
  replaceStatement.getParent().getNode().addLeaf(DartTokenTypes.SEMICOLON,";",nextChild);
  elements[0].getParent().deleteChildRange(elements[0],elements[elements.length - 1]);
  PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(editor.getDocument());
  CodeStyleManager.getInstance(project).reformatText(file,function.getTextRange().getStartOffset(),function.getTextRange().getEndOffset());
  editor.getCaretModel().moveToOffset(replaceStatement.getTextOffset());
}
