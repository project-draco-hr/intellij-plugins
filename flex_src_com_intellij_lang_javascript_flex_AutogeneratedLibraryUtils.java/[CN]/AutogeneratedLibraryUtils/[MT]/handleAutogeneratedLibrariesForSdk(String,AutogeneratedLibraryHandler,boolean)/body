{
  for (  final Project project : ProjectManager.getInstance().getOpenProjects()) {
    if (project.isInitialized() && !project.isDefault() && !project.isDisposed()) {
      for (      final Module module : ModuleManager.getInstance(project).getModules()) {
        if (module.isLoaded() && !module.isDisposed() && FacetManager.getInstance(module).getFacetByType(FlexFacet.ID) != null) {
          final Runnable runnable=new Runnable(){
            public void run(){
              final ModifiableRootModel modifiableRootModel=ModuleRootManager.getInstance(module).getModifiableModel();
              final Collection<LibraryOrderEntry> autogeneratedLibraryOrderEntries=getAutogeneratedLibraryOrderEntries(modifiableRootModel);
              for (              final LibraryOrderEntry libraryOrderEntry : autogeneratedLibraryOrderEntries) {
                if (isAutogeneratedLibraryForThisSdk(libraryOrderEntry,sdkName)) {
                  handler.handleLibrary(modifiableRootModel,libraryOrderEntry);
                }
              }
              handler.handleModuleWithFlexFacets(modifiableRootModel,module);
              if (modifiableRootModel.isChanged()) {
                ApplicationManager.getApplication().runWriteAction(new Runnable(){
                  public void run(){
                    modifiableRootModel.commit();
                  }
                }
);
              }
 else {
                modifiableRootModel.dispose();
              }
            }
          }
;
          if (invokeLater) {
            ApplicationManager.getApplication().invokeLater(runnable,ModalityState.NON_MODAL,new Condition(){
              public boolean value(              Object o){
                return module.isDisposed();
              }
            }
);
          }
 else {
            runnable.run();
          }
        }
      }
    }
  }
}
