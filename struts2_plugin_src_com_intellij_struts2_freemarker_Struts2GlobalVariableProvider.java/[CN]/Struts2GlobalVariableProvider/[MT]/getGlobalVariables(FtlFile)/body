{
  final Module module=ModuleUtil.findModuleForPsiElement(file);
  if (module == null)   return Collections.emptyList();
  if (StrutsFacet.getInstance(module) == null)   return Collections.emptyList();
  List<FtlVariable> result=new ArrayList<FtlVariable>();
  result.add(new FtlLightVariable("stack",file,(FtlType)null));
  result.add(new FtlLightVariable("action",file,(FtlType)null));
  result.add(new FtlLightVariable("response",file,"javax.servlet.http.HttpServletResponse"));
  result.add(new FtlLightVariable("res",file,"javax.servlet.http.HttpServletResponse"));
  result.add(new FtlLightVariable("request",file,"javax.servlet.http.HttpServletRequest"));
  result.add(new FtlLightVariable("req",file,"javax.servlet.http.HttpServletRequest"));
  result.add(new FtlLightVariable("session",file,"javax.servlet.http.HttpSession"));
  result.add(new FtlLightVariable("application",file,"javax.servlet.ServletContext"));
  result.add(new FtlLightVariable("base",file,CommonClassNames.JAVA_LANG_STRING));
  installTaglibSupport(result,module,StrutsConstants.TAGLIB_STRUTS_UI_URI,StrutsConstants.TAGLIB_STRUTS_UI_PREFIX);
  installTaglibSupport(result,module,StrutsConstants.TAGLIB_JQUERY_PLUGIN_URI,StrutsConstants.TAGLIB_JQUERY_PLUGIN_PREFIX);
  installTaglibSupport(result,module,StrutsConstants.TAGLIB_JQUERY_RICHTEXT_PLUGIN_URI,StrutsConstants.TAGLIB_JQUERY_RICHTEXT_PLUGIN_PREFIX);
  for (  final StrutsModel model : StrutsManager.getInstance(file.getProject()).getAllModels(module)) {
    for (    final StrutsPackage strutsPackage : model.getStrutsPackages()) {
      for (      final Action action : strutsPackage.getActions()) {
        final PsiClass actionClass=action.getActionClass().getValue();
        if (actionClass != null) {
          final PsiClassType actionType=JavaPsiFacade.getInstance(actionClass.getProject()).getElementFactory().createType(actionClass);
          for (          final Result result1 : action.getResults()) {
            if ("freemarker".equals(result1.getType().getStringValue())) {
              final PathReference reference=result1.getValue();
              final PsiElement target=reference == null ? null : reference.resolve();
              if (target != null && (file.getManager().areElementsEquivalent(file,target) || file.getManager().areElementsEquivalent(file.getOriginalFile(),target))) {
                result.add(new FtlLightVariable("",action.getXmlTag(),FtlPsiType.wrap(actionType)));
                break;
              }
            }
          }
        }
      }
    }
  }
  return result;
}
