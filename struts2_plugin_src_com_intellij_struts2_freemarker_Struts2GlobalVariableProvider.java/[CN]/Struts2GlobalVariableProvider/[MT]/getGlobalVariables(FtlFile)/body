{
  final Module module=ModuleUtil.findModuleForPsiElement(file);
  if (module == null) {
    return Collections.emptyList();
  }
  if (StrutsFacet.getInstance(module) == null) {
    return Collections.emptyList();
  }
  final List<FtlVariable> result=new ArrayList<FtlVariable>();
  result.add(new MyFtlLightVariable("stack",file,(FtlType)null));
  result.add(new MyFtlLightVariable("response",file,"javax.servlet.http.HttpServletResponse"));
  result.add(new MyFtlLightVariable("res",file,"javax.servlet.http.HttpServletResponse"));
  result.add(new MyFtlLightVariable("request",file,"javax.servlet.http.HttpServletRequest"));
  result.add(new MyFtlLightVariable("req",file,"javax.servlet.http.HttpServletRequest"));
  result.add(new MyFtlLightVariable("session",file,"javax.servlet.http.HttpSession"));
  result.add(new MyFtlLightVariable("application",file,"javax.servlet.ServletContext"));
  result.add(new MyFtlLightVariable("base",file,CommonClassNames.JAVA_LANG_STRING));
  installTaglibSupport(result,module,StrutsConstants.TAGLIB_STRUTS_UI_URI,StrutsConstants.TAGLIB_STRUTS_UI_PREFIX);
  installTaglibSupport(result,module,StrutsConstants.TAGLIB_JQUERY_PLUGIN_URI,StrutsConstants.TAGLIB_JQUERY_PLUGIN_PREFIX);
  installTaglibSupport(result,module,StrutsConstants.TAGLIB_JQUERY_RICHTEXT_PLUGIN_URI,StrutsConstants.TAGLIB_JQUERY_RICHTEXT_PLUGIN_PREFIX);
  final Processor<Action> processor=new Processor<Action>(){
    @Override public boolean process(    final Action action){
      final PsiClass actionClass=action.getActionClass().getValue();
      if (actionClass != null) {
        for (        final Result result1 : action.getResults()) {
          final ResultType resultType=result1.getEffectiveResultType();
          if (resultType != null && FreeMarkerStrutsResultContributor.FREEMARKER.equals(resultType.getName().getStringValue())) {
            final PathReference reference=result1.getValue();
            final PsiElement target=reference == null ? null : reference.resolve();
            if (target != null && (file.getManager().areElementsEquivalent(file,target) || file.getManager().areElementsEquivalent(file.getOriginalFile(),target))) {
              final PsiClassType actionType=JavaPsiFacade.getInstance(actionClass.getProject()).getElementFactory().createType(actionClass);
              final FtlPsiType ftlPsiType=FtlPsiType.wrap(actionType);
              result.add(new MyFtlLightVariable("",action.getXmlTag(),ftlPsiType));
              result.add(new MyFtlLightVariable("action",action.getXmlTag(),ftlPsiType));
              return false;
            }
          }
        }
      }
      return true;
    }
  }
;
  for (  final StrutsModel model : StrutsManager.getInstance(file.getProject()).getAllModels(module)) {
    model.processActions(processor);
  }
  return result;
}
