{
  final Project project=parentInOriginalTree.getProject();
  final GlobalSearchScope resolveScope=JSResolveUtil.getResolveScope(parentInOriginalTree);
  final LinkedHashSet<String> qualifiedNames=new LinkedHashSet<>();
  JSPackageIndex.processElementsInScopeRecursive("",new JSPackageIndex.PackageQualifiedElementsProcessor(){
    @Override public boolean process(    String qualifiedName,    JSPackageIndexInfo.Kind kind,    boolean isPublic){
      if (kind != JSPackageIndexInfo.Kind.FUNCTION && kind != JSPackageIndexInfo.Kind.VARIABLE)       return true;
      qualifiedNames.add(qualifiedName);
      return true;
    }
  }
,resolveScope,project);
  for (  String qualifiedName : qualifiedNames) {
    PsiElement element=JSDialectSpecificHandlersFactory.forLanguage(JavaScriptSupportLoader.ECMA_SCRIPT_L4).getClassResolver().findClassByQName(qualifiedName,resolveScope);
    if (element != null && !processor.execute(element,ResolveState.initial())) {
      return;
    }
  }
}
