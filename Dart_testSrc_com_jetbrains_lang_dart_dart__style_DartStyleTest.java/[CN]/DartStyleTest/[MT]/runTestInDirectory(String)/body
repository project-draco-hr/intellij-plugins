{
  Pattern indentPattern=Pattern.compile("^\\(indent (\\d+)\\)\\s*");
  String testName=getTestName(true);
  if (Character.isLetter(testName.charAt(0)) && Character.isDigit(testName.charAt(testName.length() - 1))) {
    testName=testName.substring(0,testName.length() - 1);
  }
  File dir=new File(new File(getTestDataPath(),getBasePath()),dirName);
  boolean found=false;
  int rightMargin=0, count=0;
  List<Error> errors=new ArrayList<Error>();
  List<String> descriptions=new ArrayList<String>();
  for (  String ext : new String[]{".stmt",".unit"}) {
    File entry=new File(dir,testName + ext);
    if (!entry.exists()) {
      continue;
    }
    found=true;
    String[] lines=ArrayUtil.toStringArray(FileUtil.loadLines(entry));
    boolean isCompilationUnit=entry.getName().endsWith(".unit");
    int pageWidth=80;
    int i=0;
    if (lines[0].endsWith("|")) {
      pageWidth=lines[0].indexOf("|");
      i=1;
    }
    rightMargin=pageWidth;
    while (i < lines.length) {
      String description=lines[i++].replaceAll(">>>","").trim();
      int leadingIndent=0;
      Matcher matcher=indentPattern.matcher(description);
      if (matcher.matches()) {
        leadingIndent=Integer.parseInt(matcher.group(1));
        description=description.substring(matcher.end());
      }
      String input="";
      if (!isCompilationUnit)       input+="m() {\n";
      while (!lines[i].startsWith("<<<")) {
        String line=lines[i++];
        if (leadingIndent > 0)         line=line.substring(leadingIndent);
        if (!isCompilationUnit)         line="  " + line;
        input+=line + "\n";
      }
      if (!isCompilationUnit)       input+="}\n";
      String expectedOutput="";
      if (!isCompilationUnit)       expectedOutput+="m() {\n";
      i++;
      while (i < lines.length && !lines[i].startsWith(">>>")) {
        String line=lines[i++];
        if (leadingIndent > 0)         line=line.substring(leadingIndent);
        if (!isCompilationUnit)         line="  " + line;
        expectedOutput+=line + "\n";
      }
      if (!isCompilationUnit)       expectedOutput+="}\n";
      SourceCode inputCode=extractSelection(input,isCompilationUnit);
      SourceCode expected=extractSelection(expectedOutput,isCompilationUnit);
      final CommonCodeStyleSettings settings=getSettings(DartLanguage.INSTANCE);
      settings.RIGHT_MARGIN=pageWidth;
      myTextRange=new TextRange(inputCode.selectionStart,inputCode.selectionEnd());
      try {
        count++;
        doTextTest(inputCode.text,expected.text);
      }
 catch (      AssertionFailedError failure) {
        errors.add(failure);
        descriptions.add(description);
      }
    }
  }
  if (!found) {
    fail("No test data for " + testName);
  }
  if (!errors.isEmpty()) {
    StringBuilder buf=new StringBuilder();
    String test=dirName + "/" + testName;
    buf.append("Found ").append(errors.size()).append(" failures of ").append(count).append(" tests in ").append(test).append(". Right margin is ").append(rightMargin).append(".\n");
    int n=0;
    for (    Error ex : errors) {
      String msg=ex.getMessage();
      buf.append("\nTEST: ");
      buf.append(descriptions.get(n++)).append('\n');
      buf.append(msg).append('\n');
    }
    System.out.println(buf.toString());
    throw errors.get(0);
  }
}
