{
  return Arrays.asList(new ConfigTypeItem(JstdConfigType.GENERATED,"Generated",'G'){
    @Override public RunSettingsSection provideRunSettingsSection(){
      return new AbstractRunSettingsSection(){
        @NotNull @Override protected JComponent createComponent(        final @NotNull CreationContext creationContext){
          return GeneratedConfigTypeComponent.INSTANCE.createComponent(creationContext.getProject(),myJsFileRunSettingsSection);
        }
        @Override public void resetFrom(        @NotNull JstdRunSettings runSettings){
        }
        @Override public void applyTo(        @NotNull JstdRunSettings.Builder runSettingsBuilder){
        }
      }
;
    }
  }
,new ConfigTypeItem(JstdConfigType.FILE_PATH,"Custom",'u'){
    @Override public RunSettingsSection provideRunSettingsSection(){
      return new AbstractRunSettingsSection(){
        private TextFieldWithBrowseButton myConfigFilePath;
        @NotNull @Override protected JComponent createComponent(        @NotNull CreationContext creationContext){
          myConfigFilePath=new TextFieldWithBrowseButton();
          myConfigFilePath.addBrowseFolderListener("Select JsTestDriver configuration file","",creationContext.getProject(),FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor());
          JPanel panel=new JPanel(new GridBagLayout());
{
            GridBagConstraints c=new GridBagConstraints(0,0,1,1,1.0,0.0,GridBagConstraints.FIRST_LINE_START,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0);
            panel.add(myConfigFilePath,c);
          }
          return panel;
        }
        @Override public void resetFrom(        @NotNull JstdRunSettings runSettings){
          myConfigFilePath.setText(runSettings.getConfigFile());
        }
        @Override public void applyTo(        @NotNull JstdRunSettings.Builder runSettingsBuilder){
          runSettingsBuilder.setConfigFile(ObjectUtils.notNull(myConfigFilePath.getText(),""));
        }
      }
;
    }
  }
);
}
