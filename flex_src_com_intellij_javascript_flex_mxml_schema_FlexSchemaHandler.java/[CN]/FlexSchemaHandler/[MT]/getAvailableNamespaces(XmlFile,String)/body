{
  PsiFile originalFile=_file.getOriginalFile();
  if (originalFile instanceof XmlFile)   _file=(XmlFile)originalFile;
  final XmlFile file=_file;
  final Project project=file.getProject();
  final Module module=ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(file.getVirtualFile());
  final Collection<String> illegalNamespaces=getIllegalNamespaces(file);
  final Set<String> result=new THashSet<String>();
  final Set<String> componentsThatHaveNotPackageBackedNamespace=new THashSet<String>();
  for (  final String namespace : CodeContextHolder.getInstance(project).getNamespaces(module)) {
    if (tagName == null) {
      if (CodeContext.isPackageBackedNamespace(namespace) || !illegalNamespaces.contains(namespace)) {
        result.add(namespace);
      }
    }
 else {
      if (!CodeContext.isPackageBackedNamespace(namespace) && !illegalNamespaces.contains(namespace)) {
        final XmlElementDescriptor descriptor=CodeContext.getContext(namespace,module).getElementDescriptor(tagName,(XmlTag)null);
        if (descriptor != null) {
          result.add(namespace);
          componentsThatHaveNotPackageBackedNamespace.add(descriptor.getQualifiedName());
        }
      }
    }
  }
  if (tagName == null && !illegalNamespaces.contains(JavaScriptSupportLoader.MXML_URI)) {
    result.add(JavaScriptSupportLoader.MXML_URI);
  }
  if (XmlBackedJSClassImpl.SCRIPT_TAG_NAME.equals(tagName) || "Style".equals(tagName))   return result;
  if (DumbService.isDumb(project))   return result;
  final JavaScriptIndex index=JavaScriptIndex.getInstance(project);
  index.processAllSymbols(new JavaScriptSymbolProcessor.DefaultSymbolProcessor(){
    protected boolean process(    final PsiElement namedElement,    final JSNamespace namespace){
      if (namedElement instanceof JSNamedElementProxy) {
        final JSNamedElementIndexItem proxy=((JSNamedElementProxy)namedElement).getIndexItem();
        if (proxy.getType() == JSNamedElementProxy.NamedItemType.Clazz && proxy.getAccessType() == JSAttributeList.AccessType.PUBLIC) {
          final @NonNls String packageName=proxy.getNamespace().getQualifiedName();
          if (!componentsThatHaveNotPackageBackedNamespace.contains(StringUtil.getQualifiedName(packageName,tagName))) {
            result.add(StringUtil.isEmpty(packageName) ? "*" : packageName + ".*");
          }
        }
      }
      return true;
    }
    public PsiFile getBaseFile(){
      return file;
    }
    public int getRequiredNameId(){
      return index.getIndexOf(tagName);
    }
  }
);
  final GlobalSearchScope scope=module != null ? GlobalSearchScope.moduleWithDependenciesScope(module) : GlobalSearchScope.projectScope(project);
  FlexResolveHelper.processAllMxmlAndFxgFiles(scope,project,new FlexResolveHelper.MxmlAndFxgFilesProcessor(){
    public void addDependency(    final PsiDirectory directory){
    }
    public boolean processFile(    final VirtualFile file,    final VirtualFile root){
      final String packageName=VfsUtilCore.getRelativePath(file.getParent(),root,'.');
      if (packageName != null && !componentsThatHaveNotPackageBackedNamespace.contains(StringUtil.getQualifiedName(packageName,tagName))) {
        result.add(StringUtil.isEmpty(packageName) ? "*" : packageName + ".*");
      }
      return true;
    }
  }
,tagName);
  return result;
}
