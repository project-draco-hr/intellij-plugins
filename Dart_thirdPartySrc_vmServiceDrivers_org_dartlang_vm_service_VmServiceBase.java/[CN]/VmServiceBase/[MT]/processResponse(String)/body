{
  if (jsonText == null || jsonText.isEmpty()) {
    return;
  }
  JsonObject json;
  try {
    json=(JsonObject)new JsonParser().parse(jsonText);
  }
 catch (  Exception e) {
    Logging.getLogger().logError("Parse response failed: " + jsonText,e);
    return;
  }
  JsonElement idElem=json.get(ID);
  if (idElem == null) {
    String method;
    try {
      method=json.get(METHOD).getAsString();
    }
 catch (    Exception e) {
      Logging.getLogger().logError("Event missing " + METHOD,e);
      return;
    }
    if (!"streamNotify".equals(method)) {
      Logging.getLogger().logError("Unkown event " + METHOD + ": "+ method);
      return;
    }
    JsonObject params;
    try {
      params=json.get(PARAMS).getAsJsonObject();
    }
 catch (    Exception e) {
      Logging.getLogger().logError("Event missing " + PARAMS,e);
      return;
    }
    String streamId;
    try {
      streamId=params.get(STREAM_ID).getAsString();
    }
 catch (    Exception e) {
      Logging.getLogger().logError("Event missing " + STREAM_ID,e);
      return;
    }
    Event event;
    try {
      event=new Event(params.get(EVENT).getAsJsonObject());
    }
 catch (    Exception e) {
      Logging.getLogger().logError("Event missing " + EVENT,e);
      return;
    }
    forwardEvent(streamId,event);
    return;
  }
  String id;
  try {
    id=idElem.getAsString();
  }
 catch (  Exception e) {
    Logging.getLogger().logError("Response missing " + ID,e);
    return;
  }
  Consumer consumer=consumerMap.remove(id);
  if (consumer == null) {
    Logging.getLogger().logError("No consumer associated with " + ID + ": "+ id);
    return;
  }
  JsonElement resultElem=json.get(RESULT);
  if (resultElem != null) {
    JsonObject result;
    try {
      result=resultElem.getAsJsonObject();
    }
 catch (    Exception e) {
      Logging.getLogger().logError("Response has invalid " + RESULT,e);
      return;
    }
    String responseType;
    try {
      responseType=result.get(TYPE).getAsString();
    }
 catch (    Exception e) {
      Logging.getLogger().logError("Response missing " + TYPE,e);
      return;
    }
    forwardResponse(consumer,responseType,result);
    return;
  }
  resultElem=json.get(ERROR);
  if (resultElem != null) {
    JsonObject error;
    try {
      error=resultElem.getAsJsonObject();
    }
 catch (    Exception e) {
      Logging.getLogger().logError("Response has invalid " + RESULT,e);
      return;
    }
    consumer.onError(new RPCError(error));
    Logging.getLogger().logError("Error Response: " + error);
    return;
  }
  Logging.getLogger().logError("Response missing " + RESULT + " and "+ ERROR);
}
