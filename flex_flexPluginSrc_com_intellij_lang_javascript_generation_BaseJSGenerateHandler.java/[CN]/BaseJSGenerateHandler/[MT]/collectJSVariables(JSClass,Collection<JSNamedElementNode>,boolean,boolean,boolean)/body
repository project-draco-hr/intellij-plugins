{
  final LinkedHashMap<String,JSNamedElement> candidatesMap=new LinkedHashMap<String,JSNamedElement>();
  final JSCodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(clazz.getProject()).getCustomSettings(JSCodeStyleSettings.class);
  final ResolveProcessor processor=new ResolveProcessor(null){
{
      setToProcessMembers(true);
      setToProcessHierarchy(false);
      setLocalResolve(true);
    }
    public boolean execute(    final PsiElement element,    final ResolveState state){
      final JSNamedElement namedElement=(JSNamedElement)element;
      if (skipStatics && element instanceof JSAttributeListOwner) {
        JSAttributeList attributeList=((JSAttributeListOwner)element).getAttributeList();
        if (attributeList != null && attributeList.hasModifier(JSAttributeList.ModifierType.STATIC))         return true;
      }
      if (!(element instanceof JSVariable)) {
        if (element instanceof JSFunction) {
          final JSFunction function=(JSFunction)element;
          if (skipThatHaveGetters && function.isGetProperty() || skipThatHaveSetters && function.isSetProperty()) {
            candidatesMap.put(function.getName(),function);
          }
        }
        return true;
      }
 else       if (((JSVariable)element).isConst()) {
        return true;
      }
      final String name=namedElement.getName();
      final String accessorName=JSResolveUtil.transformVarNameToAccessorName(name,codeStyleSettings);
      if (!candidatesMap.containsKey(accessorName))       candidatesMap.put(accessorName,namedElement);
      return true;
    }
  }
;
  clazz.processDeclarations(processor,ResolveState.initial(),clazz,clazz);
  for (  JSNamedElement n : candidatesMap.values()) {
    if (n instanceof JSVariable) {
      candidates.add(new JSNamedElementNode(n));
    }
  }
}
