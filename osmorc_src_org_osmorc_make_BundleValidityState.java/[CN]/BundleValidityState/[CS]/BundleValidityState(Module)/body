{
  OsmorcFacet osmorcFacet=OsmorcFacet.getInstance(module);
  OsmorcFacetConfiguration configuration=osmorcFacet != null ? osmorcFacet.getConfiguration() : null;
  myAlwaysRebuildBundleJAR=configuration != null && configuration.isAlwaysRebuildBundleJAR();
  myModuleName=module.getName();
  myJarPath=ObjectUtils.notNull(BundleCompiler.getJarFileName(module),"");
  if (myAlwaysRebuildBundleJAR) {
    myFilePaths=ArrayUtil.EMPTY_STRING_ARRAY;
    myFileTimestamps=ArrayUtil.EMPTY_LONG_ARRAY;
    myJarLastModificationTime=0;
  }
 else {
    TObjectLongHashMap<String> paths2Timestamps=new TObjectLongHashMap<String>();
    File moduleOutputDir=BundleCompiler.getModuleOutputDir(module);
    if (moduleOutputDir != null) {
      registerTimestamps(moduleOutputDir,paths2Timestamps);
    }
    File manifestFile=BundleCompiler.getManifestFile(module);
    if (manifestFile != null) {
      registerTimestamps(manifestFile,paths2Timestamps);
    }
    if (osmorcFacet != null) {
      List<Pair<String,String>> jarContents=configuration.getAdditionalJARContents();
      for (      Pair<String,String> jarContent : jarContents) {
        registerTimestamps(new File(jarContent.getFirst()),paths2Timestamps);
      }
      if (configuration.isUseBndFile()) {
        String bndFileLocation=configuration.getBndFileLocation();
        File bndFile=BundleCompiler.findFileInModuleContentRoots(bndFileLocation,module);
        if (bndFile != null) {
          registerTimestamps(bndFile,paths2Timestamps);
          registerDependencies(bndFile,paths2Timestamps);
        }
      }
    }
    myFilePaths=new String[paths2Timestamps.size()];
    myFileTimestamps=new long[paths2Timestamps.size()];
    paths2Timestamps.forEachEntry(new TObjectLongProcedure<String>(){
      private int i=0;
      @Override public boolean execute(      String s,      long l){
        myFilePaths[i]=s;
        myFileTimestamps[i]=l;
        i++;
        return true;
      }
    }
);
    FileAttributes attributes=FileSystemUtil.getAttributes(myJarPath);
    myJarLastModificationTime=attributes != null ? attributes.lastModified : FileSystemInterface.DEFAULT_TIMESTAMP;
  }
  long lastModified=0;
  ApplicationSettings settings=ServiceManager.getService(ApplicationSettings.class);
  for (  LibraryBundlificationRule bundlificationRule : settings.getLibraryBundlificationRules()) {
    lastModified=Math.max(lastModified,bundlificationRule.getLastModified());
  }
  myRulesModifiedTimeStamp=lastModified;
}
