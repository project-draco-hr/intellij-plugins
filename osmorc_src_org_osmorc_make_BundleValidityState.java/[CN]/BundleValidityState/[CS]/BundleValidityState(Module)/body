{
  myModuleName=module.getName();
  myJarUrl=BundleCompiler.getJarFileName(module);
  OsmorcFacet osmorcFacet=OsmorcFacet.getInstance(module);
  OsmorcFacetConfiguration configuration=osmorcFacet != null ? osmorcFacet.getConfiguration() : null;
  myAlwaysRebuildBundleJAR=configuration != null && configuration.isAlwaysRebuildBundleJAR();
  if (myAlwaysRebuildBundleJAR) {
    myJarLastModificationTime=0;
    myFileTimestamps=new long[0];
    myFileUrls=ArrayUtil.EMPTY_STRING_ARRAY;
  }
 else {
    myJarLastModificationTime=(new File(VfsUtilCore.urlToPath(myJarUrl))).lastModified();
    final TObjectLongHashMap<String> url2Timestamps=new TObjectLongHashMap<String>();
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        VirtualFile moduleOutputDir=BundleCompiler.getModuleOutputUrl(module);
        if (moduleOutputDir != null) {
          registerTimestamps(moduleOutputDir,url2Timestamps);
        }
      }
    }
);
    VirtualFile manifestFile=BundleCompiler.getManifestFile(module);
    if (manifestFile != null) {
      registerTimestamps(manifestFile,url2Timestamps);
    }
    if (osmorcFacet != null) {
      List<Pair<String,String>> jarContents=configuration.getAdditionalJARContents();
      for (      Pair<String,String> jarContent : jarContents) {
        VirtualFile file=LocalFileSystem.getInstance().findFileByPath(jarContent.getFirst());
        if (file != null) {
          registerTimestamps(file,url2Timestamps);
        }
      }
      if (configuration.isUseBndFile()) {
        String bndFileLocation=configuration.getBndFileLocation();
        File bndFileIo=BundleCompiler.findFileInModuleContentRoots(bndFileLocation,module);
        if (bndFileIo != null) {
          VirtualFile bndFile=LocalFileSystem.getInstance().findFileByIoFile(bndFileIo);
          if (bndFile != null && bndFile.exists()) {
            registerTimestamps(bndFile,url2Timestamps);
            registerDependencies(bndFile,url2Timestamps);
          }
        }
      }
    }
    myFileUrls=new String[url2Timestamps.size()];
    myFileTimestamps=new long[url2Timestamps.size()];
    url2Timestamps.forEachEntry(new TObjectLongProcedure<String>(){
      public boolean execute(      String s,      long l){
        myFileUrls[i]=s;
        myFileTimestamps[i]=l;
        i++;
        return true;
      }
      int i;
    }
);
  }
  long lastModified=0;
  ApplicationSettings settings=ServiceManager.getService(ApplicationSettings.class);
  for (  LibraryBundlificationRule bundlificationRule : settings.getLibraryBundlificationRules()) {
    lastModified=Math.max(lastModified,bundlificationRule.getLastModified());
  }
  myRulesModifiedTimeStamp=lastModified;
}
