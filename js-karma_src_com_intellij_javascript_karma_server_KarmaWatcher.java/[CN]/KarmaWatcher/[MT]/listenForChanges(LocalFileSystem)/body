{
  fileSystem.addVirtualFileListener(new VirtualFileListener(){
    @Override public void propertyChanged(    VirtualFilePropertyEvent event){
      if ("name".equals(event.getPropertyName())) {
        VirtualFile parent=event.getParent();
        if (parent != null) {
          String oldPath=FileUtil.join(parent.getPath(),event.getOldValue().toString());
          String newPath=FileUtil.join(parent.getPath(),event.getNewValue().toString());
          if (insideRoots(parent)) {
            myChangedFilesManager.onFileRemoved(oldPath);
            myChangedFilesManager.onFileAdded(newPath);
          }
        }
      }
    }
    @Override public void contentsChanged(    VirtualFileEvent event){
      VirtualFile file=event.getFile();
      if (insideRoots(file)) {
        myChangedFilesManager.onFileChanged(file);
      }
    }
    @Override public void fileCreated(    VirtualFileEvent event){
      VirtualFile file=event.getFile();
      if (insideRoots(file)) {
        myChangedFilesManager.onFileAdded(file.getPath());
      }
    }
    @Override public void fileDeleted(    VirtualFileEvent event){
      VirtualFile file=event.getFile();
      if (insideRoots(file)) {
        myChangedFilesManager.onFileRemoved(file.getPath());
      }
    }
    @Override public void fileMoved(    VirtualFileMoveEvent event){
      System.out.println("move " + event);
    }
    @Override public void fileCopied(    VirtualFileCopyEvent event){
      System.out.println("copy " + event);
    }
    @Override public void beforePropertyChange(    VirtualFilePropertyEvent event){
    }
    @Override public void beforeContentsChange(    VirtualFileEvent event){
    }
    @Override public void beforeFileDeletion(    VirtualFileEvent event){
    }
    @Override public void beforeFileMovement(    VirtualFileMoveEvent event){
    }
  }
);
}
