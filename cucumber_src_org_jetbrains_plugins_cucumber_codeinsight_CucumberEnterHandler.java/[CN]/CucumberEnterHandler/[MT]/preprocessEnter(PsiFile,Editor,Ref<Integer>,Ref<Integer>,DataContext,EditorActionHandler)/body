{
  if (!(file instanceof GherkinFile)) {
    return Result.Continue;
  }
  int caretOffsetValue=caretOffset.get().intValue();
  if (caretOffsetValue < 3) {
    return Result.Continue;
  }
  final Document document=editor.getDocument();
  final String docText=document.getText();
  PsiDocumentManager.getInstance(file.getProject()).commitDocument(editor.getDocument());
  final PsiElement probableQuotes=file.findElementAt(caretOffsetValue - 1);
  if (probableQuotes != null && probableQuotes.getNode().getElementType() == GherkinTokenTypes.PYSTRING) {
    final PsiElement probablePyStringText=document.getTextLength() == PYSTRING_QUOTES.length() ? null : file.findElementAt(caretOffsetValue - 1 - PYSTRING_QUOTES.length());
    if (probablePyStringText == null || probablePyStringText.getNode().getElementType() != GherkinTokenTypes.PYSTRING_TEXT) {
      int line=document.getLineNumber(caretOffsetValue);
      int lineStart=document.getLineStartOffset(line);
      int textStart=CharArrayUtil.shiftForward(docText,lineStart," \t");
      final String space=docText.subSequence(lineStart,textStart).toString();
      EditorModificationUtil.insertStringAtCaret(editor,"\n" + space + "\n"+ space+ PYSTRING_QUOTES);
      editor.getCaretModel().moveCaretRelatively(-3,-1,false,false,true);
      return Result.Stop;
    }
  }
  return Result.Continue;
}
