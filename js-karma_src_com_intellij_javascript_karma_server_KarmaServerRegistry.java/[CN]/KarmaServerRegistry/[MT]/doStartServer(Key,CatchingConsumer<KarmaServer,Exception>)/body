{
  if (myStartingServers.putIfAbsent(key,key) != null) {
    LOG.warn(new Throwable("Unexpected subsequent karma server starting:" + key.toString()));
    JobScheduler.getScheduler().schedule(new Runnable(){
      @Override public void run(){
        startServer(key.getNodeInterpreter(),key.getKarmaPackageDir(),key.getConfigurationFile(),consumer);
      }
    }
,100,TimeUnit.MILLISECONDS);
  }
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      try {
        final KarmaServer server;
        try {
          server=new KarmaServer(myProject,key.getNodeInterpreter(),key.getKarmaPackageDir(),key.getConfigurationFile());
          myServers.put(key,server);
          myServerByConfigFile.put(key.getConfigurationFilePath(),server);
        }
  finally {
          myStartingServers.remove(key);
        }
        consumer.consume(server);
        server.onTerminated(new KarmaServerTerminatedListener(){
          @Override public void onTerminated(          int exitCode){
            myServers.remove(key,server);
            myServerByConfigFile.remove(key.getConfigurationFilePath(),server);
          }
        }
);
      }
 catch (      Exception e) {
        consumer.consume(e);
      }
    }
  }
);
}
