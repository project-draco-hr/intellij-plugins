{
  final Element mainConfigRootElement=getClonedRootElementOfMainConfigFile(myMainConfigFilePath);
  if (mainConfigRootElement == null)   return;
  for (  RLMInfo info : myRlmInfos) {
    indicator.setText("Generating Flex compiler configuration file for " + info.myRLMName);
    final String mainClassAbsolutePath=findAbsolutePath(myModule,info.myMainClassRelativePath);
    changeInputAndOutputFilePaths(mainConfigRootElement,mainClassAbsolutePath,info.myOutputFolderPath + "/" + info.myOutputFileName);
    removeChildrenWithNames(mainConfigRootElement,ELEMENTS_TO_REMOVE);
    try {
      JDOMUtil.writeDocument(mainConfigRootElement.getDocument(),info.myConfigFilePath,CodeStyleSettingsManager.getSettings(project).getLineSeparator());
    }
 catch (    IOException e) {
    }
  }
  MavenUtil.invokeAndWaitWriteAction(project,new Runnable(){
    public void run(){
      for (      RLMInfo info : myRlmInfos) {
        final VirtualFile file=LocalFileSystem.getInstance().refreshAndFindFileByPath(info.myConfigFilePath);
        if (file != null) {
          file.refresh(false,false);
        }
      }
    }
  }
);
}
