{
  final TypedNameProviderRegistry nameProviderRegistry=new TypedNameProviderRegistry();
  ElementPresentationManager.registerIcon(StrutsRoot.class,StrutsIcons.STRUTS_CONFIG_FILE_ICON);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<StrutsRoot>(StrutsRoot.class){
    protected String getDisplayName(    final StrutsRoot strutsRoot){
      return DomUtil.getFile(strutsRoot).getName();
    }
  }
);
  ElementPresentationManager.registerIcon(ExceptionMapping.class,StrutsIcons.EXCEPTION_MAPPING);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<ExceptionMapping>(ExceptionMapping.class){
    protected String getDisplayName(    final ExceptionMapping exceptionMapping){
      final PsiClass exceptionClass=exceptionMapping.getExceptionClass().getValue();
      if (exceptionClass != null) {
        return exceptionClass.getName();
      }
      return exceptionMapping.getName().getStringValue();
    }
  }
);
  ElementPresentationManager.registerIcon(GlobalExceptionMapping.class,StrutsIcons.GLOBAL_EXCEPTION_MAPPING);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<GlobalExceptionMapping>(GlobalExceptionMapping.class){
    protected String getDisplayName(    final GlobalExceptionMapping globalExceptionMapping){
      final PsiClass exceptionClass=globalExceptionMapping.getExceptionClass().getValue();
      if (exceptionClass != null) {
        return exceptionClass.getName();
      }
      return globalExceptionMapping.getName().getStringValue();
    }
  }
);
  ElementPresentationManager.registerIconProvider(new NullableFunction<Object,Icon>(){
    public Icon fun(    final Object o){
      if (o instanceof InterceptorRef) {
        final InterceptorOrStackBase interceptorOrStackBase=((InterceptorRef)o).getName().getValue();
        if (interceptorOrStackBase instanceof Interceptor) {
          return StrutsIcons.INTERCEPTOR;
        }
 else         if (interceptorOrStackBase instanceof InterceptorStack) {
          return StrutsIcons.INTERCEPTOR_STACK;
        }
      }
      return null;
    }
  }
);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<InterceptorRef>(InterceptorRef.class){
    protected String getDisplayName(    final InterceptorRef interceptorRef){
      return interceptorRef.getName().getStringValue();
    }
  }
);
  ElementPresentationManager.registerIcon(DefaultInterceptorRef.class,StrutsIcons.DEFAULT_INTERCEPTOR_REF);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<DefaultInterceptorRef>(DefaultInterceptorRef.class){
    protected String getDisplayName(    final DefaultInterceptorRef defaultInterceptorRef){
      return defaultInterceptorRef.getName().getStringValue();
    }
  }
);
  ElementPresentationManager.registerIcon(Include.class,StrutsIcons.INCLUDE);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<Include>(Include.class){
    protected String getDisplayName(    final Include include){
      return include.getFile().getStringValue();
    }
  }
);
  ElementPresentationManager.registerIcon(Result.class,StrutsIcons.RESULT);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<Result>(Result.class){
    protected String getDisplayName(    final Result result){
      final String resultName=result.getName().getStringValue();
      return resultName != null ? resultName : Result.DEFAULT_NAME;
    }
  }
);
  ElementPresentationManager.registerIcon(GlobalResult.class,StrutsIcons.GLOBAL_RESULT);
  TypeNameManager.registerTypeName(GlobalResult.class,"global result");
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<GlobalResult>(GlobalResult.class){
    protected String getDisplayName(    final GlobalResult globalResult){
      final String globalResultName=globalResult.getName().getStringValue();
      return globalResultName != null ? globalResultName : Result.DEFAULT_NAME;
    }
  }
);
  ElementPresentationManager.registerIcon(DefaultActionRef.class,StrutsIcons.DEFAULT_ACTION_REF);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<DefaultActionRef>(DefaultActionRef.class){
    protected String getDisplayName(    final DefaultActionRef defaultActionRef){
      return defaultActionRef.getName().getStringValue();
    }
  }
);
  ElementPresentationManager.registerIcon(DefaultClassRef.class,StrutsIcons.DEFAULT_CLASS_REF);
  nameProviderRegistry.addTypedNameProvider(new TypedNameProvider<DefaultClassRef>(DefaultClassRef.class){
    protected String getDisplayName(    final DefaultClassRef defaultClassRef){
      return defaultClassRef.getDefaultClass().getStringValue();
    }
  }
);
  ElementPresentationManager.registerNameProvider(nameProviderRegistry);
  ElementPresentationManager.registerIcon(Action.class,StrutsIcons.ACTION);
  ElementPresentationManager.registerIcon(Bean.class,StrutsIcons.BEAN);
  ElementPresentationManager.registerIcon(Constant.class,Icons.PARAMETER_ICON);
  ElementPresentationManager.registerIcon(Interceptor.class,StrutsIcons.INTERCEPTOR);
  ElementPresentationManager.registerIcon(InterceptorStack.class,StrutsIcons.INTERCEPTOR_STACK);
  ElementPresentationManager.registerIcon(Param.class,StrutsIcons.PARAM);
  ElementPresentationManager.registerIcon(ResultType.class,StrutsIcons.RESULT_TYPE);
  ElementPresentationManager.registerIcon(StrutsPackage.class,StrutsIcons.PACKAGE);
}
