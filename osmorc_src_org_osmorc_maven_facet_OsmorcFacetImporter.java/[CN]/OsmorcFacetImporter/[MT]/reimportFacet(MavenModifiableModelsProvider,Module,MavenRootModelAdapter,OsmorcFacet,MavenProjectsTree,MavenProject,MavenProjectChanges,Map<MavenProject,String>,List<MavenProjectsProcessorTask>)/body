{
  OsmorcFacetConfiguration conf=osmorcFacet.getConfiguration();
  if (conf.isDoNotSynchronizeWithMaven()) {
    return;
  }
  MavenId id=mavenProject.getMavenId();
  conf.setBundleSymbolicName(id.getGroupId() + "." + id.getArtifactId());
  conf.setBundleVersion(ImporterUtil.cleanupVersion(id.getVersion()));
  MavenPlugin plugin=mavenProject.findPlugin(myPluginGroupID,myPluginArtifactID);
  if (plugin == null) {
    return;
  }
  conf.setBundleSymbolicName(computeSymbolicName(mavenProject));
  Map<String,String> props=ContainerUtil.newLinkedHashMap();
  Map<String,String> modelMap=mavenProject.getModelMap();
  String description=modelMap.get("description");
  if (!StringUtil.isEmptyOrSpaces(description)) {
    props.put(Constants.BUNDLE_DESCRIPTION,description);
  }
  String licenses=modelMap.get("licenses");
  if (!StringUtil.isEmptyOrSpaces(licenses)) {
    props.put("Bundle-License",licenses);
  }
  String vendor=modelMap.get("organization.name");
  if (!StringUtil.isEmpty(vendor)) {
    props.put(Constants.BUNDLE_VENDOR,vendor);
  }
  String docUrl=modelMap.get("organization.url");
  if (!StringUtil.isEmptyOrSpaces(docUrl)) {
    props.put(Constants.BUNDLE_DOCURL,docUrl);
  }
  Map<String,String> versions=cleanVersions(plugin);
  Element instructionsNode=getConfig(mavenProject,"instructions");
  if (instructionsNode != null) {
    boolean useExistingManifest=false;
    for (    Element child : instructionsNode.getChildren()) {
      String name=child.getName();
      String value=child.getTextTrim();
      value=value.replaceAll("\\p{Blank}*[\r\n]\\p{Blank}*","");
      value=substituteVersions(value,versions);
      if (INCLUDE_MANIFEST.equals(name)) {
        conf.setManifestLocation(value);
        conf.setManifestGenerationMode(ManifestGenerationMode.Manually);
        conf.setUseProjectDefaultManifestFileLocation(false);
        useExistingManifest=true;
      }
 else       if (Constants.BUNDLE_VERSION.equals(name)) {
        conf.setBundleVersion(value);
      }
 else       if (Constants.BUNDLE_ACTIVATOR.equals(name)) {
        conf.setBundleActivator(value);
      }
 else       if (!StringUtil.isEmpty(value) && !Constants.BUNDLE_SYMBOLICNAME.equals(name)) {
        if (StringUtil.startsWithChar(name,'_')) {
          name="-" + name.substring(1);
        }
        props.put(name,value);
      }
    }
    if (!useExistingManifest) {
      conf.setManifestLocation("");
      conf.setManifestGenerationMode(ManifestGenerationMode.OsmorcControlled);
      conf.setUseProjectDefaultManifestFileLocation(true);
    }
  }
  if (!props.containsKey(Constants.BUNDLE_NAME)) {
    props.put(Constants.BUNDLE_NAME,computeBundleName(mavenProject));
  }
  ImporterUtil.postProcessAdditionalProperties(props,mavenProject,module.getProject());
  conf.importAdditionalProperties(props,true);
  String jarFileName=mavenProject.getFinalName() + ".jar";
switch (conf.getOutputPathType()) {
case OsgiOutputPath:
    conf.setJarFileLocation(jarFileName,OutputPathType.OsgiOutputPath);
  break;
case SpecificOutputPath:
String path=new File(conf.getJarFilePath(),jarFileName).getPath();
conf.setJarFileLocation(path,OutputPathType.SpecificOutputPath);
break;
default :
conf.setJarFileLocation(jarFileName,OutputPathType.CompilerOutputPath);
}
}
