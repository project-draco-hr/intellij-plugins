{
  element.accept(new AngularJSRecursiveVisitor(){
    @Override public void visitJSDefinitionExpression(    JSDefinitionExpression node){
      myResult.add(node);
      super.visitJSDefinitionExpression(node);
    }
    @Override public void visitAngularJSRepeatExpression(    AngularJSRepeatExpression repeatExpression){
      if (repeatExpression.getNode().getElementType() == AngularJSElementTypes.REPEAT_EXPRESSION) {
        for (        Map.Entry<String,String> entry : NG_REPEAT_IMPLICITS.entrySet()) {
          myResult.add(new ImplicitJSVariableImpl(entry.getKey(),entry.getValue(),repeatExpression));
        }
      }
      super.visitAngularJSRepeatExpression(repeatExpression);
    }
  }
);
  if (element instanceof XmlAttribute) {
    final String name=((XmlAttribute)element).getName();
    if (AngularAttributesRegistry.isVariableAttribute(name,element.getProject())) {
      final JSImplicitElementImpl.Builder builder=createVariable((HtmlTag)element.getParent(),(XmlAttribute)element,name);
      myResult.add(builder.toImplicitElement());
    }
    if (AngularAttributesRegistry.isEventAttribute(name,element.getProject())) {
      final JSImplicitElementImpl.Builder builder=new JSImplicitElementImpl.Builder($EVENT,element).setType(JSImplicitElement.Type.Variable);
      builder.setTypeString("Event");
      myResult.add(builder.toImplicitElement());
    }
  }
}
