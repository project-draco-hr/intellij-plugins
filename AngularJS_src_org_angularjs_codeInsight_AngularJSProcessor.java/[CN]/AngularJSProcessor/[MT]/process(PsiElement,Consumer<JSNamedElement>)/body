{
  final PsiElement original=CompletionUtil.getOriginalOrSelf(element);
  final PsiFile hostFile=FileContextUtil.getContextFile(original != element ? original : element.getContainingFile().getOriginalFile());
  if (hostFile == null)   return;
  final XmlFile file=(XmlFile)hostFile;
  final JSResolveUtil.JSInjectedFilesVisitor visitor=new JSResolveUtil.JSInjectedFilesVisitor(){
    @Override protected void process(    JSFile file){
      file.accept(new AngularJSRecursiveVisitor(){
        @Override public void visitJSVariable(        JSVariable node){
          if (scopeMatches(original,node)) {
            consumer.consume(node);
          }
          super.visitJSVariable(node);
        }
        @Override public void visitAngularJSAsExpression(        AngularJSAsExpression asExpression){
          final JSDefinitionExpression def=asExpression.getDefinition();
          if (def != null && scopeMatches(original,asExpression)) {
            consumer.consume(def);
          }
        }
        @Override public void visitAngularJSRepeatExpression(        AngularJSRepeatExpression repeatExpression){
          if (scopeMatches(original,repeatExpression)) {
            for (            JSDefinitionExpression def : repeatExpression.getDefinitions()) {
              consumer.consume(def);
            }
            for (            Map.Entry<String,String> entry : NG_REPEAT_IMPLICITS.entrySet()) {
              consumer.consume(new ImplicitJSVariableImpl(entry.getKey(),entry.getValue(),repeatExpression));
            }
          }
          super.visitAngularJSRepeatExpression(repeatExpression);
        }
      }
);
    }
  }
;
  processDocument(visitor,file.getDocument());
}
