{
  final PsiElement original=CompletionUtil.getOriginalOrSelf(element);
  final PsiFile hostFile=FileContextUtil.getContextFile(original != element ? original : element.getContainingFile().getOriginalFile());
  if (!(hostFile instanceof XmlFile))   return;
  final XmlFile file=(XmlFile)hostFile;
  final Collection<JSNamedElement> cache=CachedValuesManager.getCachedValue(file,new CachedValueProvider<Collection<JSNamedElement>>(){
    @Nullable @Override public Result<Collection<JSNamedElement>> compute(){
      final Collection<JSNamedElement> result=new ArrayList<JSNamedElement>();
      processDocument(file.getDocument(),result);
      return Result.create(result,PsiModificationTracker.MODIFICATION_COUNT);
    }
  }
);
  for (  JSNamedElement namedElement : cache) {
    if (scopeMatches(original,namedElement)) {
      consumer.consume(namedElement);
    }
  }
}
