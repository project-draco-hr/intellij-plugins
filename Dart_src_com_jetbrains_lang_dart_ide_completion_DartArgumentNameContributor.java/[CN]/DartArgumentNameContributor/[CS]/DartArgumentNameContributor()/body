{
  final PsiElementPattern.Capture<PsiElement> idInExpression=psiElement().withSuperParent(1,DartId.class).withSuperParent(2,DartReference.class);
  extend(CompletionType.BASIC,idInExpression.withSuperParent(3,DartArgumentList.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      DartExpression reference=findExpressionFromCallOrNew(parameters);
      PsiElement target=reference instanceof DartReference ? ((DartReference)reference).resolve() : null;
      PsiElement targetComponent=target != null ? target.getParent() : null;
      DartFormalParameterList parameterList=PsiTreeUtil.getChildOfType(targetComponent,DartFormalParameterList.class);
      if (parameterList != null) {
        for (        DartNormalFormalParameter parameter : parameterList.getNormalFormalParameterList()) {
          final DartComponentName componentName=parameter.findComponentName();
          if (componentName != null) {
            addParameterName(result,componentName.getName());
          }
        }
        DartNamedFormalParameters namedFormalParameters=parameterList.getNamedFormalParameters();
        List<DartDefaultFormalNamedParameter> namedParameterList=namedFormalParameters != null ? namedFormalParameters.getDefaultFormalNamedParameterList() : Collections.<DartDefaultFormalNamedParameter>emptyList();
        for (        DartDefaultFormalNamedParameter parameterDescription : namedParameterList) {
          final DartComponentName componentName=parameterDescription.getNormalFormalParameter().findComponentName();
          if (componentName != null) {
            addParameterName(result,componentName.getName());
          }
        }
      }
    }
    private void addParameterName(    CompletionResultSet result,    @Nullable String parameterName){
      if (parameterName != null) {
        result.addElement(LookupElementBuilder.create(parameterName));
      }
    }
  }
);
}
