{
  final PsiElement element;
  List<String> qualifiers=null;
  JSReferenceExpression qualifier=(JSReferenceExpression)expression.getQualifier();
  if (qualificatorSupportedForMxmlBinding && qualifier != null) {
    JSReferenceExpression topElement;
    qualifiers=new ArrayList<String>();
    do {
      qualifiers.add(qualifier.getReferencedName());
      topElement=qualifier;
    }
 while ((qualifier=(JSReferenceExpression)qualifier.getQualifier()) != null);
    element=resolveReferenceExpression(topElement,true);
  }
 else {
    element=resolveReferenceExpression(expression,false);
  }
  if (element instanceof JSClass) {
    checkQualifier(expression);
    writer.classReference(((JSClass)element).getQualifiedName());
  }
 else   if (element instanceof JSVariable) {
    checkQualifier(expression);
    VariableReference valueReference=valueReferenceResolver.getNullableValueReference((JSVariable)element);
    if (valueReference != null) {
      out.write(ExpressionMessageTypes.VARIABLE_REFERENCE);
      valueReference.write(out,writer,valueReferenceResolver);
      return;
    }
    writeJSVariable(((JSVariable)element),out,writer,valueReferenceResolver);
  }
 else {
    final String hostObjectId;
    if (qualifiers == null) {
      out.write(ExpressionMessageTypes.MXML_OBJECT_REFERENCE);
      hostObjectId=expression.getReferencedName();
    }
 else {
      out.write(ExpressionMessageTypes.MXML_OBJECT_CHAIN);
      writer.classOrPropertyName(expression.getReferencedName());
      for (int i=qualifiers.size() - 2; i >= 0; i--) {
        writer.classOrPropertyName(qualifiers.get(i));
      }
      writer.endObject();
      hostObjectId=qualifiers.get(qualifiers.size() - 1);
    }
    try {
      valueReferenceResolver.getValueReference(hostObjectId).write(out,writer,valueReferenceResolver);
    }
 catch (    IllegalStateException e) {
      throw new UnsupportedOperationException(expression.getText());
    }
  }
}
