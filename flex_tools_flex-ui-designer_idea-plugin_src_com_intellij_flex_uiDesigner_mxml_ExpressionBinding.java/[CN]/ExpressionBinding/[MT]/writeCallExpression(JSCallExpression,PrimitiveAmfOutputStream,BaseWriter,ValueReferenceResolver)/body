{
  final JSReferenceExpression methodExpression=(JSReferenceExpression)expression.getMethodExpression();
  final JSFunction function=(JSFunction)resolveReferenceExpression(methodExpression,true);
  final JSExpression[] arguments;
  final int rollbackPosition;
  final int start;
  if (function.isConstructor()) {
    arguments=expression.getArguments();
    final JSClass jsClass=(JSClass)function.getParent();
    writer.newInstance(jsClass.getQualifiedName(),arguments.length,true);
    rollbackPosition=out.allocateShort();
    start=out.size();
  }
 else {
    out.write(ExpressionMessageTypes.CALL);
    rollbackPosition=out.allocateShort();
    start=out.size();
    JSReferenceExpression qualifier=(JSReferenceExpression)methodExpression.getQualifier();
    while (qualifier != null) {
      writer.classOrPropertyName(qualifier.getReferencedName());
      qualifier=(JSReferenceExpression)qualifier.getQualifier();
    }
    out.write(0);
    writer.classOrPropertyName(function.getName());
    if (function.isGetProperty()) {
      out.write(-1);
      return;
    }
 else {
      arguments=expression.getArguments();
      out.write(arguments.length);
    }
  }
  for (  JSExpression argument : arguments) {
    writeExpression(argument,out,writer,valueReferenceResolver);
  }
  out.putShort(out.size() - start,rollbackPosition);
}
