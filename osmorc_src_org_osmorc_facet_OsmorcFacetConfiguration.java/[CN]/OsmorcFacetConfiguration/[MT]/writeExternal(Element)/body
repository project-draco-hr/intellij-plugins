{
  element.setAttribute(OSMORC_CONTROLS_MANIFEST,String.valueOf(isOsmorcControlsManifest()));
  element.setAttribute(MANIFEST_LOCATION,getManifestLocation());
  element.setAttribute(JARFILE_LOCATION,myJarFileLocation != null ? myJarFileLocation : "");
  element.setAttribute(OUTPUT_PATH_TYPE,getOutputPathType().name());
  element.setAttribute(USE_BND_FILE,String.valueOf(isUseBndFile()));
  element.setAttribute(BND_FILE_LOCATION,getBndFileLocation());
  element.setAttribute(USE_BUNDLOR_FILE,String.valueOf(isUseBundlorFile()));
  element.setAttribute(BUNDLOR_FILE_LOCATION,getBundlorFileLocation());
  element.setAttribute(BUNDLE_ACTIVATOR,getBundleActivator());
  element.setAttribute(BUNDLE_SYMBOLIC_NAME,getBundleSymbolicName());
  element.setAttribute(BUNDLE_VERSION,getBundleVersion());
  element.setAttribute(IGNORE_FILE_PATTERN,getIgnoreFilePattern());
  element.setAttribute(USE_PROJECT_DEFAULT_MANIFEST_FILE_LOCATION,String.valueOf(isUseProjectDefaultManifestFileLocation()));
  element.setAttribute(ALWAYS_REBUILD_BUNDLE_JAR,String.valueOf(isAlwaysRebuildBundleJAR()));
  Element props=new Element(ADDITIONAL_PROPERTIES);
  Map<String,String> additionalPropertiesAsMap=getAdditionalPropertiesAsMap();
  for (  String key : additionalPropertiesAsMap.keySet()) {
    Element prop=new Element(PROPERTY);
    prop.setAttribute(KEY,key);
    prop.setAttribute(VALUE,additionalPropertiesAsMap.get(key));
    props.addContent(prop);
  }
  element.addContent(props);
  Element additionalJARContentsElement=new Element("additionalJARContents");
  List<Pair<String,String>> additionalJARContents=getAdditionalJARContents();
  for (  Pair<String,String> additionalJARContent : additionalJARContents) {
    Element entry=new Element("entry");
    entry.setAttribute("source",additionalJARContent.getFirst());
    entry.setAttribute("dest",additionalJARContent.getSecond());
    additionalJARContentsElement.addContent(entry);
  }
  element.addContent(additionalJARContentsElement);
}
