{
  element.setAttribute(MANIFEST_GENERATION_MODE,getManifestGenerationMode().name());
  element.setAttribute(MANIFEST_LOCATION,getManifestLocation());
  element.setAttribute(JAR_FILE_LOCATION,myJarFileLocation != null ? myJarFileLocation : "");
  element.setAttribute(OUTPUT_PATH_TYPE,getOutputPathType().name());
  element.setAttribute(BND_FILE_LOCATION,getBndFileLocation());
  element.setAttribute(BUNDLOR_FILE_LOCATION,getBundlorFileLocation());
  element.setAttribute(BUNDLE_ACTIVATOR,getBundleActivator());
  element.setAttribute(BUNDLE_SYMBOLIC_NAME,getBundleSymbolicName());
  element.setAttribute(BUNDLE_VERSION,getBundleVersion());
  element.setAttribute(IGNORE_FILE_PATTERN,getIgnoreFilePattern());
  element.setAttribute(USE_PROJECT_DEFAULT_MANIFEST_FILE_LOCATION,String.valueOf(isUseProjectDefaultManifestFileLocation()));
  element.setAttribute(ALWAYS_REBUILD_BUNDLE_JAR,String.valueOf(isAlwaysRebuildBundleJAR()));
  element.setAttribute(DO_NOT_SYNCHRONIZE_WITH_MAVEN,String.valueOf(myDoNotSynchronizeWithMaven));
  Element props=new Element(ADDITIONAL_PROPERTIES);
  PathMacroManager macroManager=PathMacroManager.getInstance(myFacet.getModule());
  Map<String,String> additionalPropertiesAsMap=getAdditionalPropertiesAsMap();
  for (  String key : additionalPropertiesAsMap.keySet()) {
    Element prop=new Element(PROPERTY);
    prop.setAttribute(KEY,key);
    String value=additionalPropertiesAsMap.get(key);
    if (key.equals(INCLUDE_RESOURCE)) {
      Map<String,Map<String,String>> map=OSGiHeader.parseHeader(value);
      for (      String name : map.keySet()) {
        if (StringUtil.startsWithChar(name,'{') && name.endsWith("}")) {
          name=name.substring(1,name.length() - 1).trim();
        }
        String[] parts=name.split("\\s*=\\s*");
        String source=parts[0];
        if (parts.length == 2) {
          source=parts[1];
        }
        if (StringUtil.startsWithChar(source,'@')) {
          source=source.substring(1);
        }
        String collapsedSource=macroManager.collapsePath(source);
        value=StringUtil.replace(value,source,collapsedSource);
      }
    }
    prop.setAttribute(VALUE,value);
    props.addContent(prop);
  }
  element.addContent(props);
  Element additionalJARContentsElement=new Element("additionalJARContents");
  List<Pair<String,String>> additionalJARContents=getAdditionalJARContents();
  for (  Pair<String,String> additionalJARContent : additionalJARContents) {
    Element entry=new Element("entry");
    entry.setAttribute("source",additionalJARContent.getFirst());
    entry.setAttribute("dest",additionalJARContent.getSecond());
    additionalJARContentsElement.addContent(entry);
  }
  element.addContent(additionalJARContentsElement);
}
