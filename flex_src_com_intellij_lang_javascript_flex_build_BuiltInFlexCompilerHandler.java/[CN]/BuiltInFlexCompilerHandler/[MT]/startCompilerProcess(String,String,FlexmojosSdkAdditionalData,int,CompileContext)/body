{
  final StringBuilder classpath=new StringBuilder();
  classpath.append(FlexUtils.getPathToBundledJar("idea-flex-compiler-fix.jar"));
  classpath.append(File.pathSeparatorChar);
  classpath.append(FlexUtils.getPathToBundledJar("flex-compiler.jar"));
  if (data == null) {
    classpath.append(File.pathSeparator).append(FileUtil.toSystemDependentName(sdkHome + "/lib/flex-compiler-oem.jar"));
  }
  final List<String> commandLine=FlexSdkUtils.getCommandLineForSdkTool(myProject,sdkHome,data,classpath.toString(),"com.intellij.flex.compiler.FlexCompiler",null);
  commandLine.add(String.valueOf(port));
  final ProcessBuilder processBuilder=new ProcessBuilder(commandLine);
  processBuilder.redirectErrorStream(true);
  processBuilder.directory(new File(FlexUtils.getFlexCompilerWorkDirPath(myProject,null)));
  final String plainCommand=StringUtil.join(processBuilder.command(),new Function<String,String>(){
    public String fun(    final String s){
      return s.contains(" ") ? "\"" + s + "\"" : s;
    }
  }
," ");
  context.addMessage(CompilerMessageCategory.INFORMATION,"Starting Flex compiler:\n" + plainCommand,null,-1,-1);
  final Process process=processBuilder.start();
  readInputStreamUntilConnected(process,context);
}
