{
  myDebugProcess=debugProcess;
  myBreakpointHandlers=new XBreakpointHandler<?>[]{new XBreakpointHandler<XLineBreakpoint<XBreakpointProperties>>(FlexBreakpointType.class){
    public void registerBreakpoint(    @NotNull final XLineBreakpoint<XBreakpointProperties> breakpoint){
      final XSourcePosition position=breakpoint.getSourcePosition();
      if (position != null) {
        if (isValidSourceBreakpoint(position)) {
          myDebugProcess.sendCommand(new InsertBreakpointCommand(breakpoint));
        }
 else {
          updateBreakpointStatusToInvalid(breakpoint);
        }
      }
    }
    private boolean isValidSourceBreakpoint(    XSourcePosition position){
      ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(myDebugProcess.getSession().getProject()).getFileIndex();
      VirtualFile rootForFile=projectFileIndex.getSourceRootForFile(position.getFile());
      return rootForFile != null;
    }
    public void unregisterBreakpoint(    @NotNull final XLineBreakpoint<XBreakpointProperties> breakpoint,    final boolean temporary){
      final XSourcePosition position=breakpoint.getSourcePosition();
      if (position != null && isValidSourceBreakpoint(position)) {
        myDebugProcess.sendCommand(new RemoveBreakpointCommand(breakpoint));
      }
    }
  }
};
}
