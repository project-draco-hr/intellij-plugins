{
  final DartSdk sdk=DartSdk.getDartSdk(env.getProject());
  assert(sdk != null);
  final RunProfile runConfiguration=env.getRunProfile();
  final VirtualFile contextFileOrDir;
  final boolean entryPointInLibFolder;
  final ExecutionResult executionResult;
  final String debuggingHost;
  final int observatoryPort;
  if (runConfiguration instanceof DartRunConfigurationBase) {
    contextFileOrDir=((DartRunConfigurationBase)runConfiguration).getRunnerParameters().getDartFile();
    final VirtualFile pubspec=PubspecYamlUtil.findPubspecYamlFile(env.getProject(),contextFileOrDir);
    entryPointInLibFolder=pubspec != null && contextFileOrDir.getPath().startsWith(pubspec.getParent().getPath() + "/lib/");
    executionResult=state.execute(env.getExecutor(),this);
    if (executionResult == null) {
      return null;
    }
    debuggingHost=null;
    observatoryPort=((DartCommandLineRunningState)state).getObservatoryPort();
  }
 else   if (runConfiguration instanceof DartRemoteDebugConfiguration) {
    entryPointInLibFolder=false;
    final String path=((DartRemoteDebugConfiguration)runConfiguration).getParameters().getDartProjectPath();
    contextFileOrDir=LocalFileSystem.getInstance().findFileByPath(path);
    if (contextFileOrDir == null) {
      throw new RuntimeConfigurationError("Folder not found: " + FileUtil.toSystemDependentName(path));
    }
    executionResult=null;
    debuggingHost=((DartRemoteDebugConfiguration)runConfiguration).getParameters().getHost();
    observatoryPort=((DartRemoteDebugConfiguration)runConfiguration).getParameters().getPort();
  }
 else {
    LOG.error("Unexpected run configuration: " + runConfiguration.getClass().getName());
    return null;
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  final XDebuggerManager debuggerManager=XDebuggerManager.getInstance(env.getProject());
  final XDebugSession debugSession=debuggerManager.startSession(env,new XDebugProcessStarter(){
    @Override @NotNull public XDebugProcess start(    @NotNull final XDebugSession session){
      final DartUrlResolver dartUrlResolver=getDartUrlResolver(env.getProject(),contextFileOrDir);
      return new DartVmServiceDebugProcess(session,StringUtil.notNullize(debuggingHost,"localhost"),observatoryPort,executionResult,dartUrlResolver,dasExecutionContextId,runConfiguration instanceof DartRemoteDebugConfiguration,entryPointInLibFolder,getTimeout());
    }
  }
);
  return debugSession.getRunContentDescriptor();
}
