{
  ManifestHeaderValue headerValueMock=createMock(ManifestHeaderValue.class);
  expect(headerValueMock.getValueText()).andReturn("1.2.3.b300");
  expect(headerValueMock.getValueText()).andReturn("1.2.3");
  expect(headerValueMock.getValueText()).andReturn("1.2.");
  expect(headerValueMock.getValueText()).andReturn("1");
  expect(headerValueMock.getValueText()).andReturn("1.x");
  expect(headerValueMock.getValueText()).andReturn("1-");
  expect(headerValueMock.getValueText()).andReturn("1.0,3");
  replay(headerValueMock);
  VersionParser testObject=new VersionParser();
  assertThat(testObject.parseValue(headerValueMock,null),equalTo(new Version(1,2,3,"b300")));
  assertThat(testObject.parseValue(headerValueMock,null),equalTo(new Version(1,2,3,"")));
  assertThat(testObject.parseValue(headerValueMock,null),equalTo(new Version(1,2,0,"")));
  assertThat(testObject.parseValue(headerValueMock,null),equalTo(new Version(1,0,0,"")));
  assertThat(testObject.parseValue(headerValueMock,null),equalTo(new Version(1,0,0,"")));
  assertThat(testObject.parseValue(headerValueMock,null),equalTo(new Version(0,0,0,"")));
  assertThat(testObject.parseValue(headerValueMock,null),equalTo(new Version(1,0,0,"")));
  verify(headerValueMock);
}
