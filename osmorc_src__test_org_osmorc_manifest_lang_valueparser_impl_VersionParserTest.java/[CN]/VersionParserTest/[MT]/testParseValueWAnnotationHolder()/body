{
  AnnotationHolder annotationHolderMock=createMock(AnnotationHolder.class);
  HeaderValuePart headerValueMock=createMock(HeaderValuePart.class);
  expect(headerValueMock.getUnwrappedText()).andReturn("1.2.3.b300");
  expect(headerValueMock.getUnwrappedText()).andReturn("1-");
  expect(headerValueMock.getTextRange()).andReturn(new TextRange(10,12));
  expect(annotationHolderMock.createErrorAnnotation(new TextRange(10,12),"The major component of the defined version is not a valid number")).andReturn(null);
  expect(headerValueMock.getUnwrappedText()).andReturn("1.x");
  expect(headerValueMock.getTextRange()).andReturn(new TextRange(10,13));
  expect(annotationHolderMock.createErrorAnnotation(new TextRange(12,13),"The minor component of the defined version is not a valid number")).andReturn(null);
  expect(headerValueMock.getUnwrappedText()).andReturn("1.0.u");
  expect(headerValueMock.getTextRange()).andReturn(new TextRange(10,15));
  expect(annotationHolderMock.createErrorAnnotation(new TextRange(14,15),"The micro component of the defined version is not a valid number")).andReturn(null);
  expect(headerValueMock.getUnwrappedText()).andReturn("1.0,u");
  expect(headerValueMock.getTextRange()).andReturn(new TextRange(10,15));
  expect(annotationHolderMock.createErrorAnnotation(new TextRange(12,15),"The minor component of the defined version is not a valid number")).andReturn(null);
  expect(headerValueMock.getUnwrappedText()).andReturn("1.0.0.b2+3");
  expect(headerValueMock.getTextRange()).andReturn(new TextRange(10,20));
  expect(annotationHolderMock.createErrorAnnotation(new TextRange(16,20),"The qualifier component of the defined version is invalid. It may only contain alphanumeric characters, '-' and '_'")).andReturn(null);
  expect(headerValueMock.getUnwrappedText()).andReturn("1.0.0.b2_3");
  expect(headerValueMock.getUnwrappedText()).andReturn("1.0.0.b2-3");
  replay(headerValueMock,annotationHolderMock);
  VersionParser testObject=new VersionParser();
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(1,2,3,"b300")));
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(0,0,0,"")));
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(1,0,0,"")));
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(1,0,0,"")));
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(1,0,0,"")));
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(1,0,0,"b2+3")));
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(1,0,0,"b2_3")));
  assertThat(testObject.parseValue(headerValueMock,annotationHolderMock),equalTo(new Version(1,0,0,"b2-3")));
  verify(headerValueMock,annotationHolderMock);
}
