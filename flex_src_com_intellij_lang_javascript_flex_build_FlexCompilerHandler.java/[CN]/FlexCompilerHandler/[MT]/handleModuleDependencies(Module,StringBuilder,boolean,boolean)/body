{
  final List<String> libraryPaths=new ArrayList<String>();
  final List<String> externalLibraryPaths=new ArrayList<String>();
  final List<String> includedLibraryPaths=new ArrayList<String>();
  for (  final OrderEntry o : ModuleRootManager.getInstance(module).getOrderEntries()) {
    final DependencyScope scope=o instanceof ExportableOrderEntry ? ((ExportableOrderEntry)o).getScope() : DependencyScope.COMPILE;
    final boolean export=neverIncludeLibs ? false : (o instanceof ExportableOrderEntry ? ((ExportableOrderEntry)o).isExported() : false);
    if (scope == DependencyScope.RUNTIME || (scope == DependencyScope.TEST && !isTest)) {
      continue;
    }
    if (o instanceof LibraryOrderEntry) {
      final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)o;
      if (AutogeneratedLibraryUtils.isAutogeneratedLibrary(libraryOrderEntry)) {
        continue;
      }
      for (      VirtualFile libFile : libraryOrderEntry.getRootFiles(OrderRootType.CLASSES)) {
        libFile=getRealFile(libFile);
        if (libFile != null && !libFile.isDirectory() && "swc".equalsIgnoreCase(libFile.getExtension())) {
          final String libFileName=libFile.getName();
          if (libFileName.startsWith("airglobal")) {
            if (libFileName.equals("airglobal.swc")) {
              externalLibraryPaths.add(libFile.getPath());
            }
          }
 else           if (libFileName.startsWith("playerglobal")) {
            if (libFileName.equals("playerglobal.swc")) {
              externalLibraryPaths.add(libFile.getPath());
            }
          }
 else {
            if (scope == DependencyScope.PROVIDED) {
              externalLibraryPaths.add(libFile.getPath());
            }
 else             if (export) {
              includedLibraryPaths.add(libFile.getPath());
            }
 else {
              libraryPaths.add(libFile.getPath());
            }
          }
        }
      }
    }
 else     if (o instanceof ModuleOrderEntry) {
      final Module moduleDependency=((ModuleOrderEntry)o).getModule();
      if (moduleDependency != null) {
        for (        final FlexBuildConfiguration configOfDependency : FlexBuildConfiguration.getConfigForFlexModuleOrItsFlexFacets(moduleDependency)) {
          if (FlexBuildConfiguration.LIBRARY.equals(configOfDependency.OUTPUT_TYPE)) {
            if (scope == DependencyScope.PROVIDED) {
              externalLibraryPaths.add(configOfDependency.getOutputFileFullPath());
            }
 else             if (export) {
              includedLibraryPaths.add(configOfDependency.getOutputFileFullPath());
            }
 else {
              libraryPaths.add(configOfDependency.getOutputFileFullPath());
            }
          }
 else {
            addSourcePath(moduleDependency,configTextBuilder,isTest);
          }
        }
      }
    }
  }
  addExternalLibraryPaths(configTextBuilder,externalLibraryPaths);
  addLibraryPaths(configTextBuilder,libraryPaths);
  addIncludedLibraryPaths(configTextBuilder,includedLibraryPaths);
}
