{
  final Object moduleOrFacet=flexFacet == null ? module : flexFacet;
  List<VirtualFile> result=new ArrayList<VirtualFile>();
  if (config.USE_CUSTOM_CONFIG_FILE && !needToMergeAutogeneratedAndCustomConfigFile(config,false)) {
    final String customConfigFilePath=config.getType() == FlexBuildConfiguration.Type.FlexUnit && config.USE_CUSTOM_CONFIG_FILE_FOR_TESTS ? config.CUSTOM_CONFIG_FILE_FOR_TESTS : config.CUSTOM_CONFIG_FILE;
    final VirtualFile customConfigFile=VfsUtil.findRelativeFile(customConfigFilePath,FlexUtils.getFlexCompilerWorkDir(myProject,null));
    if (customConfigFile != null) {
      result.add(customConfigFile);
    }
  }
  if (!config.USE_CUSTOM_CONFIG_FILE || config.getType() == FlexBuildConfiguration.Type.FlexUnit || config.getType() == FlexBuildConfiguration.Type.OverriddenMainClass) {
    final ModuleOrFacetCompileCache compileCache=getCache(config.getType());
    VirtualFile generatedConfigFile=compileCache.moduleOrFacetToAutoGeneratedConfig.get(moduleOrFacet);
    final boolean regenerateTempConfig=generatedConfigFile != null && needToRegenerateMainClassBasedConfigFile(generatedConfigFile,config);
    if (regenerateTempConfig) {
      removeIncrementalCommandFor(generatedConfigFile);
    }
    if (generatedConfigFile == null || !generatedConfigFile.isValid() || regenerateTempConfig) {
      @NonNls final String name=generateConfigFileName(module,flexFacet,config.getType().getConfigFilePrefix(),null);
      final Ref<VirtualFile> fileRef=new Ref<VirtualFile>();
      final Ref<IOException> error=new Ref<IOException>();
      final String configText=generateConfigFileText(module,config,null);
      final Runnable runnable=new Runnable(){
        public void run(){
          fileRef.set(ApplicationManager.getApplication().runWriteAction(new NullableComputable<VirtualFile>(){
            public VirtualFile compute(){
              try {
                final String baseDirPath=FlexUtils.getTempFlexConfigsDirPath();
                final VirtualFile baseDir=VfsUtil.createDirectories(baseDirPath);
                VirtualFile configFile=baseDir.findChild(name);
                if (configFile == null) {
                  configFile=baseDir.createChildData(this,name);
                }
                mySavingConfigOurselves=true;
                VfsUtil.saveText(configFile,configText);
                return configFile;
              }
 catch (              IOException ex) {
                error.set(ex);
              }
 finally {
                mySavingConfigOurselves=false;
              }
              return null;
            }
          }
));
        }
      }
;
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        runnable.run();
      }
 else {
        ApplicationManager.getApplication().invokeAndWait(runnable,ProgressManager.getInstance().getProgressIndicator().getModalityState());
      }
      if (!error.isNull()) {
        throw error.get();
      }
      generatedConfigFile=fileRef.get();
      compileCache.moduleOrFacetToAutoGeneratedConfig.put(moduleOrFacet,generatedConfigFile);
      compileCache.configFileToTimestamp.put(generatedConfigFile,generatedConfigFile.getModificationCount());
    }
    result.add(generatedConfigFile);
  }
  return result;
}
