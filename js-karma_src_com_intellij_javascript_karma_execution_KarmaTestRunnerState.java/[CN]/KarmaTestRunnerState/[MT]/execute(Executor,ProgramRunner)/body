{
  ApplicationManager.getApplication().assertIsDispatchThread();
  File configurationFile=new File(myRunSettings.getConfigPath());
  KarmaServer server=KarmaServerRegistry.getServerByConfigurationFile(configurationFile);
  if (server == null) {
    try {
      server=new KarmaServer(new File(myNodeInterpreterPath),new File(myKarmaPackageDir),configurationFile);
      KarmaServerRegistry.registerServer(server);
    }
 catch (    IOException e) {
      throw new ExecutionException(e);
    }
  }
  int runnerPort=-1;
  if (server.isReady()) {
    runnerPort=server.getRunnerPort();
  }
  final ProcessHandler processHandler=startProcess(runnerPort);
  if (runnerPort == -1) {
    server.addListener(new KarmaServerListener(){
      @Override public void onReady(      int webServerPort,      int runnerPort){
        @SuppressWarnings("IOResourceOpenedButNotSafelyClosed") PrintWriter pw=new PrintWriter(processHandler.getProcessInput(),false);
        pw.print("runner port " + runnerPort + "\n");
        pw.flush();
      }
    }
);
  }
  ConsoleView consoleView=createConsole(myProject,myExecutionEnvironment,executor);
  consoleView.attachToProcess(processHandler);
  DefaultExecutionResult executionResult=new DefaultExecutionResult(consoleView,processHandler);
  executionResult.setRestartActions(new ToggleAutoTestAction());
  return executionResult;
}
