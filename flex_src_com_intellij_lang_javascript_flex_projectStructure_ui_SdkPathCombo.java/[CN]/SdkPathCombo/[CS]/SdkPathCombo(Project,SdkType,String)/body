{
  myProject=project;
  myHistoryKey=historyKey;
  getChildComponent().setEditable(true);
  setText("");
  getChildComponent().setEditor(new DelegatingComboBoxEditor(getChildComponent().getEditor()){
    JTextField field=null;
    @Override public Component getEditorComponent(){
      final Component c=super.getEditorComponent();
      if (c instanceof JTextField && field != c) {
        field=(JTextField)c;
        field.getDocument().addDocumentListener(new DocumentAdapter(){
          @Override protected void textChanged(          DocumentEvent e){
            myEventDispatcher.getMulticaster().stateChanged(new ChangeEvent(SdkPathCombo.this));
          }
        }
);
      }
      return c;
    }
  }
);
  getButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      SdkConfigurationUtil.selectSdkHome(sdkType,new Consumer<String>(){
        @Override public void consume(        String s){
          setText(FileUtil.toSystemDependentName(s));
        }
      }
);
    }
  }
);
  final List<String> recentEntries=RecentsManager.getInstance(project).getRecentEntries(historyKey);
  if (recentEntries != null) {
    setHistory(ArrayUtil.toStringArray(recentEntries));
  }
  getChildComponent().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        myEventDispatcher.getMulticaster().stateChanged(new ChangeEvent(SdkPathCombo.this));
      }
    }
  }
);
}
