{
  final SearchScope scope=options.searchScope;
  final DartAnalysisServerService service=DartAnalysisServerService.getInstance();
  final ReadActionConsumer<SearchResult> searchResultProcessor=new ReadActionConsumer<SearchResult>(){
    @Override public void consumeInReadAction(    SearchResult result){
      if (result.getKind().equals(SearchResultKind.DECLARATION))       return;
      final Location location=result.getLocation();
      final VirtualFile vFile=LocalFileSystem.getInstance().findFileByPath(FileUtil.toSystemIndependentName(location.getFile()));
      if (vFile == null)       return;
      if (scope instanceof LocalSearchScope && !((LocalSearchScope)scope).isInScope(vFile))       return;
      if (scope instanceof GlobalSearchScope && !((GlobalSearchScope)scope).contains(vFile))       return;
      final PsiFile psiFile=elementToSearch.getManager().findFile(vFile);
      if (psiFile == null)       return;
      final int offset=service.getConvertedOffset(vFile,location.getOffset());
      final int length=service.getConvertedOffset(vFile,location.getOffset() + location.getLength()) - offset;
      final TextRange range=TextRange.create(offset,offset + length);
      final boolean potentialUsage=result.isPotential();
      final PsiElement usageElement=getUsagePsiElement(psiFile,range);
      final UsageInfo usageInfo=usageElement == null ? null : getUsageInfo(usageElement,range,potentialUsage);
      if (usageInfo != null && usageInfo.getElement() != null && (!(scope instanceof LocalSearchScope) || PsiSearchScopeUtil.isInScope((LocalSearchScope)scope,usageInfo.getElement()))) {
        processor.process(usageInfo);
      }
    }
  }
;
  final VirtualFile file=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>(){
    @Override public VirtualFile compute(){
      return elementToSearch.getContainingFile().getVirtualFile();
    }
  }
);
  final int offset=elementToSearch.getTextRange().getStartOffset();
  service.search_findElementReferences(file,offset,searchResultProcessor);
  return true;
}
