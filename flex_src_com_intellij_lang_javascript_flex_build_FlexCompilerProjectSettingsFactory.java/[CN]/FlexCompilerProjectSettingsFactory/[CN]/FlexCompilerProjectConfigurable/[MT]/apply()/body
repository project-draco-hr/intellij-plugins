{
  final FlexCompilerHandler flexCompilerHandler=FlexCompilerHandler.getInstance(myProject);
  flexCompilerHandler.getCompilerDependenciesCache().clear();
  if (isImportantModified()) {
    flexCompilerHandler.quitCompilerShell();
    flexCompilerHandler.getBuiltInFlexCompilerHandler().stopCompilerProcess();
  }
  myConfig.USE_BUILT_IN_COMPILER=myBuiltInCompilerRadioButton.isSelected();
  myConfig.USE_FCSH=myFcshRadioButton.isSelected();
  myConfig.USE_MXMLC_COMPC=myMxmlcCompcRadioButton.isSelected();
  myConfig.MAX_PARALLEL_COMPILATIONS=(Integer)myParallelCompilationsAmountSpinner.getValue();
  try {
    final int heapSizeMb=Integer.parseInt(myHeapSizeTextField.getText().trim());
    if (heapSizeMb > 0) {
      myConfig.HEAP_SIZE_MB=heapSizeMb;
    }
 else {
      throw new ConfigurationException(FlexBundle.message("invalid.flex.compiler.heap.size"));
    }
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(FlexBundle.message("invalid.flex.compiler.heap.size"));
  }
  myConfig.VM_OPTIONS=myVMOptionsEditor.getText().trim();
  myConfig.SWF_DEBUG_ENABLED=mySwfDebugEnabledCheckBox.isSelected();
  myConfig.SWC_DEBUG_ENABLED=mySwcDebugEnabledCheckBox.isSelected();
}
