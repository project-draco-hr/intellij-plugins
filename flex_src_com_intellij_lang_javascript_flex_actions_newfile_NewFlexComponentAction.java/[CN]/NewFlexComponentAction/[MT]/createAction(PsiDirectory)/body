{
  final Ref<String> parentComponentToSet=new Ref<String>();
  return new CreateClassOrInterfaceFix(dir){
    @Override protected CreateClassParameters createDialog(    final String templateName){
      final WizardModel model=new WizardModel(dir,true);
      MainStep mainStep=new MainStep(model,dir.getProject(),null,true,DirectoryIndex.getInstance(dir.getProject()).getPackageName(dir.getVirtualFile()),null,true,templateName,dir,JSBundle.message("choose.base.component.title")){
        @Override protected List<FileTemplate> getApplicableTemplates(){
          Module module=ModuleUtilCore.findModuleForPsiElement(dir);
          final String[] allowedBuiltin=getAllowedBuiltInTemplates(module);
          return ContainerUtil.filter(CreateClassOrInterfaceFix.getApplicableTemplates(FLEX_TEMPLATES_EXTENSIONS),new Condition<FileTemplate>(){
            @Override public boolean value(            final FileTemplate fileTemplate){
              String name=fileTemplate.getName();
              return ArrayUtil.contains(name,allowedBuiltin) || !isClassifierTemplate(name);
            }
          }
);
        }
        @Override protected boolean canFinish(){
          if (!super.canFinish()) {
            return false;
          }
          if (isSuperclassFieldEnabled()) {
            if (!JSUtils.isValidClassName(getSuperclassFqn(),true)) {
              return false;
            }
            if (!(JSResolveUtil.findClassByQName(getSuperclassFqn(),getSuperclassScope()) instanceof JSClass)) {
              return false;
            }
          }
          return true;
        }
        @Override protected boolean canBeSuperClass(        final JSClass jsClass){
          return super.canBeSuperClass(jsClass);
        }
        @Override public void commit(        final CommitType commitType) throws CommitStepException {
          super.commit(commitType);
          final FileTemplate template;
          try {
            template=ClassLoaderUtil.runWithClassLoader(CreateClassOrInterfaceFix.class.getClassLoader(),new ThrowableComputable<FileTemplate,IOException>(){
              @Override public FileTemplate compute() throws IOException {
                return FileTemplateManager.getInstance().getInternalTemplate(model.getTemplateName());
              }
            }
);
            String[] attributes=FileTemplateUtil.calculateAttributes(template.getText(),new Properties(),true);
            if (ArrayUtil.contains(CreateClassOrInterfaceFix.SUPERCLASS,attributes)) {
              parentComponentToSet.set(getSuperclassFqn());
            }
          }
 catch (          IOException e) {
          }
catch (          ParseException e) {
          }
        }
      }
;
      mainStep.setSuperclassLabelText(JSBundle.message("parent.component.label.text"));
      CustomVariablesStep customVariablesStep=new CustomVariablesStep(model);
      CreateFlashClassWizard w=new CreateFlashClassWizard(JSBundle.message("new.flex.component.dialog.title"),dir.getProject(),model,mainStep,customVariablesStep);
      w.show();
      if (w.getExitCode() != DialogWrapper.OK_EXIT_CODE)       return null;
      return model;
    }
    @Override protected void postProcess(    @NotNull final JSClass jsClass){
      final XmlTag tag=(XmlTag)jsClass.getParent();
      if (!parentComponentToSet.isNull() && parentComponentToSet.get().equals(tag.getName())) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            setParentComponent((XmlBackedJSClassImpl)jsClass,parentComponentToSet.get());
          }
        }
);
      }
      jsClass.navigate(true);
    }
  }
;
}
