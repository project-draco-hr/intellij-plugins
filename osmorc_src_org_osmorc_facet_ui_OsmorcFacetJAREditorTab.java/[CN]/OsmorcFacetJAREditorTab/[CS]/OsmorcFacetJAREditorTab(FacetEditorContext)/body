{
  myEditorContext=editorContext;
  final Project project=editorContext.getProject();
  myIgnoreFilePatternTextField=new EditorTextField("",project,FileTypes.PLAIN_TEXT);
  FileType fileType=FileTypeManager.getInstance().getFileTypeByFileName("*.regexp");
  if (fileType == FileTypes.UNKNOWN) {
    fileType=FileTypeManager.getInstance().getFileTypeByFileName("*.txt");
  }
  final PsiFile file=PsiFileFactory.getInstance(project).createFileFromText("*.regexp",fileType,myIgnoreFilePatternTextField.getText(),-1,true);
  myIgnoreFilePatternTextField.setNewDocumentAndFileType(fileType,PsiDocumentManager.getInstance(project).getDocument(file));
  myIgnoreFilePatternPanel.add(myIgnoreFilePatternTextField,BorderLayout.CENTER);
  UserActivityWatcher watcher=new UserActivityWatcher();
  watcher.addUserActivityListener(new UserActivityListener(){
    public void stateChanged(){
      myModified=true;
    }
  }
);
  myJarOutputPathChooser.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      onOutputPathSelect();
    }
  }
);
  ChangeListener listener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      updateGui();
    }
  }
;
  myPlaceInProjectWideRadioButton.addChangeListener(listener);
  myPlaceInThisPathRadioButton.addChangeListener(listener);
  myPlaceInCompilerOutputPathRadioButton.addChangeListener(listener);
  watcher.register(myRoot);
  myAdditionalJARContentsTableModel=new AdditionalJARContentsTableModel();
  myAdditionalJARContentsTable.setModel(myAdditionalJARContentsTableModel);
  TableColumn col=myAdditionalJARContentsTable.getColumnModel().getColumn(0);
  final FileSelectorTableCellEditor selectorTableCellEditor=new FileSelectorTableCellEditor(project,myEditorContext.getModule());
  col.setCellEditor(selectorTableCellEditor);
  selectorTableCellEditor.addCellEditorListener(new CellEditorListener(){
    public void editingCanceled(    ChangeEvent e){
    }
    public void editingStopped(    ChangeEvent e){
      int row=myAdditionalJARContentsTable.getSelectedRow();
      if (row > -1) {
        Pair<String,String> additionalJARContent=myAdditionalJARContentsTableModel.getAdditionalJARContent(row);
        VirtualFile preselectedPath=LocalFileSystem.getInstance().findFileByPath(additionalJARContent.getFirst());
        String destinationName;
        if (preselectedPath != null) {
          destinationName=determineMostLikelyLocationInJAR(preselectedPath);
        }
 else {
          destinationName="";
        }
        myAdditionalJARContentsTableModel.changeAdditionalJARConent(row,additionalJARContent.first,destinationName);
        myAdditionalJARContentsTable.editCellAt(row,1);
        myAdditionalJARContentsTable.getEditorComponent().requestFocus();
      }
    }
  }
);
  myAdditionalJARContentsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      myRemoveButton.setEnabled(myAdditionalJARContentsTable.getSelectedRowCount() > 0);
      myEditButton.setEnabled(myAdditionalJARContentsTable.getSelectedRowCount() > 0);
    }
  }
);
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onAddAdditionalJARContent();
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onRemoveAdditionalJARContent();
    }
  }
);
  myEditButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onEditAdditionalJARContent();
    }
  }
);
  myEditButton.setEnabled(false);
  myRemoveButton.setEnabled(false);
}
