{
  _editorContext=editorContext;
  final Project project=editorContext.getProject();
  _ignoreFilePatternTextField=new EditorTextField("",project,FileTypes.PLAIN_TEXT);
  FileType fileType=FileTypeManager.getInstance().getFileTypeByFileName("*.regexp");
  if (fileType == FileTypes.UNKNOWN) {
    fileType=FileTypeManager.getInstance().getFileTypeByFileName("*.txt");
  }
  final PsiFile file=PsiFileFactory.getInstance(project).createFileFromText("*.regexp",fileType,_ignoreFilePatternTextField.getText(),-1,true);
  _ignoreFilePatternTextField.setNewDocumentAndFileType(fileType,PsiDocumentManager.getInstance(project).getDocument(file));
  _ignoreFilePatternPanel.add(_ignoreFilePatternTextField,BorderLayout.CENTER);
  UserActivityWatcher watcher=new UserActivityWatcher();
  watcher.addUserActivityListener(new UserActivityListener(){
    public void stateChanged(){
      _modified=true;
    }
  }
);
  watcher.register(_root);
  _jarFileChooser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onJarFileSelect();
    }
  }
);
  _additionalJARContentsTableModel=new AdditionalJARContentsTableModel();
  _additionalJARContentsTable.setModel(_additionalJARContentsTableModel);
  TableColumn col=_additionalJARContentsTable.getColumnModel().getColumn(0);
  final FileSelectorTableCellEditor selectorTableCellEditor=new FileSelectorTableCellEditor(project,_editorContext.getModule());
  col.setCellEditor(selectorTableCellEditor);
  selectorTableCellEditor.addCellEditorListener(new CellEditorListener(){
    public void editingCanceled(    ChangeEvent e){
    }
    public void editingStopped(    ChangeEvent e){
      int row=_additionalJARContentsTable.getSelectedRow();
      Pair<String,String> additionalJARContent=_additionalJARContentsTableModel.getAdditionalJARContent(row);
      VirtualFile preselectedPath=LocalFileSystem.getInstance().findFileByPath(additionalJARContent.getFirst());
      String destinationName;
      if (preselectedPath != null) {
        destinationName=determineMostLikelyLocationInJAR(preselectedPath);
      }
 else {
        destinationName="";
      }
      _additionalJARContentsTableModel.changeAdditionalJARConent(row,additionalJARContent.first,destinationName);
      _additionalJARContentsTable.editCellAt(row,1);
      _additionalJARContentsTable.getEditorComponent().requestFocus();
    }
  }
);
  _additionalJARContentsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      _removeButton.setEnabled(_additionalJARContentsTable.getSelectedRowCount() > 0);
      _editButton.setEnabled(_additionalJARContentsTable.getSelectedRowCount() > 0);
    }
  }
);
  _addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onAddAdditionalJARContent();
    }
  }
);
  _removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onRemoveAdditionalJARContent();
    }
  }
);
  _editButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onEditAdditionalJARContent();
    }
  }
);
  _editButton.setEnabled(false);
  _removeButton.setEnabled(false);
}
