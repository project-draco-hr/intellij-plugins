{
  myEditorContext=editorContext;
  myValidatorsManager=validatorsManager;
  Project project=editorContext.getProject();
  myIgnoreFilePatternTextField=new EditorTextField("",project,FileTypes.PLAIN_TEXT);
  FileType type=FileTypeManager.getInstance().getFileTypeByFileName("*.regexp");
  if (type == FileTypes.UNKNOWN) {
    type=FileTypeManager.getInstance().getFileTypeByFileName("*.txt");
  }
  PsiFile file=PsiFileFactory.getInstance(project).createFileFromText("*.regexp",type,myIgnoreFilePatternTextField.getText(),-1,true);
  myIgnoreFilePatternTextField.setNewDocumentAndFileType(type,PsiDocumentManager.getInstance(project).getDocument(file));
  myIgnoreFilePatternPanel.add(myIgnoreFilePatternTextField,BorderLayout.CENTER);
  UserActivityWatcher watcher=new UserActivityWatcher();
  watcher.addUserActivityListener(new UserActivityListener(){
    public void stateChanged(){
      myModified=true;
      updateGui();
    }
  }
);
  watcher.register(myRoot);
  myJarOutputPathChooser.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      onOutputPathSelect();
    }
  }
);
  ChangeListener listener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      updateGui();
    }
  }
;
  myPlaceInProjectWideRadioButton.addChangeListener(listener);
  myPlaceInThisPathRadioButton.addChangeListener(listener);
  myPlaceInCompilerOutputPathRadioButton.addChangeListener(listener);
  myAdditionalJARContentsTableModel=new AdditionalJARContentsTableModel();
  myAdditionalJARContentsTable=new JBTable(myAdditionalJARContentsTableModel);
  TableColumn col=myAdditionalJARContentsTable.getColumnModel().getColumn(0);
  FileSelectorTableCellEditor selectorTableCellEditor=new FileSelectorTableCellEditor(project,myEditorContext.getModule());
  col.setCellEditor(selectorTableCellEditor);
  selectorTableCellEditor.addCellEditorListener(new CellEditorListener(){
    @Override public void editingCanceled(    ChangeEvent e){
    }
    @Override public void editingStopped(    ChangeEvent e){
      int row=myAdditionalJARContentsTable.getSelectedRow();
      if (row > -1) {
        Pair<String,String> additionalJARContent=myAdditionalJARContentsTableModel.getAdditionalJARContent(row);
        VirtualFile preselectedPath=LocalFileSystem.getInstance().findFileByPath(additionalJARContent.getFirst());
        String destinationName=preselectedPath != null ? determineMostLikelyLocationInJar(preselectedPath) : "";
        myAdditionalJARContentsTableModel.changeAdditionalJARConent(row,additionalJARContent.first,destinationName);
        myAdditionalJARContentsTable.editCellAt(row,1);
        myAdditionalJARContentsTable.getEditorComponent().requestFocus();
      }
    }
  }
);
  myAdditionalJarContentsPanel.add(ToolbarDecorator.createDecorator(myAdditionalJARContentsTable).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      onAddAdditionalJarContent();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      onRemoveAdditionalJarContent();
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      onEditAdditionalJARContent();
    }
  }
).disableUpDownActions().createPanel(),BorderLayout.CENTER);
  myValidatorsManager.registerValidator(new FacetEditorValidator(){
    @NotNull @Override public ValidationResult check(){
      if (StringUtil.isEmptyOrSpaces(myJarFileTextField.getText())) {
        return new ValidationResult(OsmorcBundle.message("facet.editor.jar.empty.jar.name"));
      }
      if (getSelectedOutputPathType() == SpecificOutputPath && StringUtil.isEmptyOrSpaces(myJarOutputPathChooser.getText())) {
        return new ValidationResult(OsmorcBundle.message("facet.editor.jar.empty.output.path"));
      }
      return ValidationResult.OK;
    }
  }
);
}
