{
  try {
    mySdkSpecificHandler.initThreadLocals(myLogger);
    final Configuration configuration=mySdkSpecificHandler.processConfiguration(myParams);
    final Builder builder=mySdkSpecificHandler.createBuilder(configuration);
    builder.setLogger(myLogger);
    builder.setPathResolver(SdkFilesResolver.INSTANCE);
    final String linkReportFileName=configuration.getLinkReportFileName();
    if (linkReportFileName != null) {
      builder.getConfiguration().keepLinkReport(true);
    }
    final long outputFileSize;
    final boolean omitTrace=mySdkSpecificHandler.omitTrace(configuration);
    try {
      acquire(omitTrace);
      mySdkSpecificHandler.setupOmitTraceOption(omitTrace);
      outputFileSize=builder.build(true);
    }
  finally {
      release(omitTrace);
    }
    if (outputFileSize > 0) {
      final File outputFile=(builder instanceof Application) ? ((Application)builder).getOutput() : ((Library)builder).getOutput();
      myLogger.log(outputFile.getCanonicalPath() + " (" + outputFileSize+ " bytes)");
      if (linkReportFileName != null) {
        final File linkReportFile=new File(linkReportFileName);
        FlexCompilerUtil.ensureFileCanBeCreated(linkReportFile);
        final Report report=builder.getReport();
        final FileWriter writer=new FileWriter(linkReportFile);
        report.writeLinkReport(writer);
        writer.close();
      }
    }
  }
 catch (  final Exception e) {
    logError(e);
  }
catch (  final Throwable t) {
    logError(t);
    System.exit(1);
  }
 finally {
    myLogger.log(FlexCompiler.COMPILATION_FINISHED);
    mySdkSpecificHandler.cleanThreadLocals();
    System.gc();
  }
}
