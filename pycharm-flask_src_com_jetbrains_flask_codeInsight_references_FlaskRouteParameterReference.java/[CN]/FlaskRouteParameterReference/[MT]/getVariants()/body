{
  String canonicalText=getCanonicalText();
  int index=canonicalText.indexOf(':');
  String existingConverter="";
  if (index >= 0) {
    existingConverter=canonicalText.substring(0,index + 1);
  }
  List<Object> variants=new ArrayList<Object>();
  PyFunction function=PsiTreeUtil.getParentOfType(getElement(),PyFunction.class);
  if (function != null) {
    for (    PyParameter parameter : function.getParameterList().getParameters()) {
      if (parameter instanceof PyNamedParameter) {
        variants.add(LookupElementBuilder.create(parameter,existingConverter + parameter.getName()).withIcon(parameter.getIcon(Iconable.ICON_FLAG_CLOSED)));
      }
    }
  }
  PyPsiFacade pyPsiFacade=PyPsiFacade.getInstance(getElement().getProject());
  PsiElement routingModule=pyPsiFacade.qualifiedNameResolver("werkzeug.routing").fromElement(getElement()).firstResult();
  if (routingModule instanceof PyFile) {
    PyTargetExpression converters=((PyFile)routingModule).findTopLevelAttribute(FlaskNames.DEFAULT_CONVERTERS);
    if (converters != null) {
      PyExpression value=converters.findAssignedValue();
      if (value instanceof PyDictLiteralExpression) {
        for (        PyKeyValueExpression expression : ((PyDictLiteralExpression)value).getElements()) {
          String converterName=PyPsiUtils.strValue(expression.getKey());
          if (converterName != null) {
            variants.add(TailTypeDecorator.withTail(LookupElementBuilder.create(converterName),TailType.createSimpleTailType(':')));
          }
        }
      }
    }
  }
  return variants.toArray();
}
