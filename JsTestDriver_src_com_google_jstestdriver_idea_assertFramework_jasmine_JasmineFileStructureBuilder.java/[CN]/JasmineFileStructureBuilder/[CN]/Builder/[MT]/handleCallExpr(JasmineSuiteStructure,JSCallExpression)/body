{
  JSReferenceExpression methodExpression=CastUtils.tryCast(callExpression.getMethodExpression(),JSReferenceExpression.class);
  JSArgumentList argumentList=callExpression.getArgumentList();
  if (methodExpression != null && argumentList != null) {
    String methodName=methodExpression.getReferencedName();
    JSExpression[] arguments=ObjectUtils.notNull(argumentList.getArguments(),JSExpression.EMPTY_ARRAY);
    if ("describe".equals(methodName) && arguments.length == 2) {
      String name=JsPsiUtils.extractStringValue(arguments[0]);
      JSFunctionExpression specDefinitions=JsPsiUtils.extractFunctionExpression(arguments[1]);
      if (name != null && specDefinitions != null) {
        JasmineSuiteStructure suiteStructure=new JasmineSuiteStructure(name,callExpression);
        if (parentSuiteStructure != null) {
          parentSuiteStructure.addChild(suiteStructure);
        }
 else {
          myFileStructure.addDescribeStructure(suiteStructure);
        }
        handleDescribeSpecDefinitions(suiteStructure,specDefinitions);
      }
    }
    if ("it".equals(methodName) && arguments.length == 2) {
      String name=JsPsiUtils.extractStringValue(arguments[0]);
      JSFunctionExpression body=JsPsiUtils.extractFunctionExpression(arguments[1]);
      if (name != null && body != null) {
        JasmineSpecStructure specStructure=new JasmineSpecStructure(name,callExpression,body);
        if (parentSuiteStructure != null) {
          parentSuiteStructure.addChild(specStructure);
        }
      }
    }
  }
}
