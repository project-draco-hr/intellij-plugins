{
  final DartSdk sdk=DartSdk.getDartSdk(project);
  if (sdk == null)   return;
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final SortedSet<String> folderPaths=new TreeSet<String>();
  final Collection<String> rootsToAddToLib=new THashSet<String>();
  for (  final String path : filePaths) {
    if (path != null) {
      folderPaths.add(PathUtil.getParentPath(FileUtil.toSystemIndependentName(path)));
    }
  }
  outer:   for (  final String path : folderPaths) {
    final VirtualFile vFile=LocalFileSystem.getInstance().findFileByPath(path);
    if (!path.startsWith(sdk.getHomePath() + "/") && (vFile == null || !fileIndex.isInContent(vFile))) {
      for (      String configuredPath : rootsToAddToLib) {
        if (path.startsWith(configuredPath + "/")) {
          continue outer;
        }
      }
      rootsToAddToLib.add(path);
    }
  }
  final Set<Module> affectedModules=new THashSet<Module>();
  final Module[] modules=ModuleManager.getInstance(project).getModules();
  for (  final Module module : modules) {
    if (DartSdkGlobalLibUtil.isDartSdkGlobalLibAttached(module,sdk.getGlobalLibName())) {
      if (!FilenameIndex.getVirtualFilesByName(project,PubspecYamlUtil.PUBSPEC_YAML,module.getModuleContentScope()).isEmpty()) {
        continue;
      }
      affectedModules.add(module);
    }
  }
  final Library library=createDartPackagesLibrary(project,rootsToAddToLib);
  final Module[] affectedModulesArray=affectedModules.toArray(new Module[affectedModules.size()]);
  DartFileListener.updateDependenciesOnDartPackagesLibrary(affectedModulesArray,sdk,library);
}
