{
  final String filePath=FileUtil.toSystemDependentName(file.getPath());
  final Ref<List<DartServerData.DartNavigationRegion>> resultRef=Ref.create();
  final AnalysisServer server=myServer;
  if (server == null) {
    return null;
  }
  final CountDownLatch latch=new CountDownLatch(1);
  LOG.debug("analysis_getNavigation(" + filePath + ")");
  server.analysis_getNavigation(filePath,offset,length,new GetNavigationConsumer(){
    @Override public void computedNavigation(    final List<NavigationRegion> regions){
      final List<DartServerData.DartNavigationRegion> dartRegions=new ArrayList<DartServerData.DartNavigationRegion>(regions.size());
      for (      NavigationRegion region : regions) {
        if (region.getLength() > 0) {
          dartRegions.add(new DartServerData.DartNavigationRegion(region));
        }
      }
      resultRef.set(dartRegions);
      latch.countDown();
    }
    @Override public void onError(    final RequestError error){
      if (RequestErrorCode.GET_NAVIGATION_INVALID_FILE.equals(error.getCode())) {
        LOG.info(getShortErrorMessage("analysis_getNavigation()",filePath,error));
      }
 else {
        logError("analysis_getNavigation()",filePath,error);
      }
      latch.countDown();
    }
  }
);
  awaitForLatchCheckingCanceled(server,latch,GET_NAVIGATION_TIMEOUT);
  if (latch.getCount() > 0) {
    LOG.info("analysis_getNavigation() took more than " + GET_NAVIGATION_TIMEOUT + "ms for file "+ filePath);
  }
  return resultRef.get();
}
