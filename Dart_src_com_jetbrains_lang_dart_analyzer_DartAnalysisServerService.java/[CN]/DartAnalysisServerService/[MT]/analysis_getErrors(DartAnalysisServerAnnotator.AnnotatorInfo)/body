{
  final Ref<AnalysisError[]> resultError=new Ref<AnalysisError[]>();
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  try {
    final String path=FileUtil.toSystemDependentName(info.myFilePath);
    myServer.analysis_getErrors(path,new GetErrorsConsumer(){
      @Override public void computedErrors(      final AnalysisError[] errors){
        if (semaphore.tryUp()) {
          resultError.set(errors);
        }
 else {
          LOG.info("analysis_getErrors() took too long for file " + path + ", restarting daemon");
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              final VirtualFile vFile=info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);
              final PsiFile psiFile=vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);
              if (psiFile != null) {
                DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);
              }
            }
          }
);
        }
      }
      @Override public void onError(      final RequestError error){
        semaphore.up();
        LOG.error("Error from analysis_getErrors() for file " + path + ", code="+ error.getCode()+ ": "+ error.getMessage());
      }
    }
);
    semaphore.waitFor(GET_ERRORS_TIMEOUT);
  }
  finally {
    semaphore.up();
  }
  return resultError.get();
}
