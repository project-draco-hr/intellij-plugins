{
synchronized (myLock) {
    mySdkHome=sdk.getHomePath();
    final String runtimePath=FileUtil.toSystemDependentName(mySdkHome + "/bin/dart");
    String analysisServerPath=FileUtil.toSystemDependentName(mySdkHome + "/bin/snapshots/analysis_server.dart.snapshot");
    analysisServerPath=System.getProperty("dart.server.path",analysisServerPath);
    final DebugPrintStream debugStream=new DebugPrintStream(){
      @Override public void println(      String str){
      }
    }
;
    String vmArgsRaw;
    try {
      vmArgsRaw=Registry.stringValue("dart.server.vm.options");
    }
 catch (    MissingResourceException e) {
      vmArgsRaw="";
    }
    String serverArgsRaw="";
    serverArgsRaw+=" --useAnalysisHighlight2";
    serverArgsRaw+=" --file-read-mode=normalize-eol-always";
    try {
      serverArgsRaw+=" " + Registry.stringValue("dart.server.additional.arguments");
    }
 catch (    MissingResourceException e) {
    }
    myServerSocket=new StdioServerSocket(runtimePath,StringUtil.split(vmArgsRaw," "),analysisServerPath,StringUtil.split(serverArgsRaw," "),debugStream);
    myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ','_'));
    myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());
    final AnalysisServer startedServer=new RemoteAnalysisServerImpl(myServerSocket);
    try {
      startedServer.start();
      startedServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);
      if (Registry.is("dart.projects.without.pubspec",false)) {
        startedServer.analysis_setGeneralSubscriptions(Collections.singletonList(GeneralAnalysisService.ANALYZED_FILES));
      }
      startedServer.addAnalysisServerListener(myAnalysisServerListener);
      startedServer.addStatusListener(new AnalysisServerStatusListener(){
        @Override public void isAliveServer(        boolean isAlive){
          if (!isAlive) {
synchronized (myLock) {
              if (startedServer == myServer) {
                stopServer();
              }
            }
          }
        }
      }
);
      mySdkVersion=sdk.getVersion();
      startedServer.analysis_updateOptions(new AnalysisOptions(true,true,true,true,true,false,true,false));
      myServer=startedServer;
    }
 catch (    Exception e) {
      LOG.warn("Failed to start Dart analysis server",e);
      stopServer();
    }
  }
}
