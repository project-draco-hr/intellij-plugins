{
synchronized (myLock) {
    mySdkHome=sdk.getHomePath();
    final String runtimePath=FileUtil.toSystemDependentName(mySdkHome + "/bin/dart");
    final String analysisServerPath=FileUtil.toSystemDependentName(mySdkHome + "/bin/snapshots/analysis_server.dart.snapshot");
    final DebugPrintStream debugStream=new DebugPrintStream(){
      @Override public void println(      String str){
      }
    }
;
    final int port=NetUtils.tryToFindAvailableSocketPort(10000);
    String argsRaw;
    try {
      argsRaw=Registry.stringValue("dart.server.additional.arguments");
    }
 catch (    MissingResourceException e) {
      argsRaw="";
    }
    argsRaw+=" --useAnalysisHighlight2";
    myServerSocket=new StdioServerSocket(runtimePath,analysisServerPath,null,debugStream,ArrayUtil.toStringArray(StringUtil.split(argsRaw," ")),false,false,port,false,FileReadMode.NORMALIZE_EOL_ALWAYS);
    myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ','_'));
    myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());
    myServer=new RemoteAnalysisServerImpl(myServerSocket);
    try {
      myServer.start();
      myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);
      if (Registry.is("dart.projects.without.pubspec",false)) {
        myServer.analysis_setGeneralSubscriptions(Collections.singletonList(GeneralAnalysisService.ANALYZED_FILES));
      }
      myServer.addAnalysisServerListener(myAnalysisServerListener);
      mySdkVersion=sdk.getVersion();
      final AnalysisServer server=myServer;
      final boolean ok=runInPooledThreadAndWait(new Runnable(){
        @Override public void run(){
          server.analysis_updateOptions(new AnalysisOptions(true,true,true,true,false,true,false));
        }
      }
,"analysis_updateOptions(true, true, true, true, false, true, false)",SEND_REQUEST_TIMEOUT);
      if (!ok) {
        stopServer();
        return;
      }
      LOG.info("Server started, see status at http://localhost:" + port + "/status");
    }
 catch (    Exception e) {
      LOG.warn("Failed to start Dart analysis server, port=" + port,e);
      stopServer();
    }
  }
}
