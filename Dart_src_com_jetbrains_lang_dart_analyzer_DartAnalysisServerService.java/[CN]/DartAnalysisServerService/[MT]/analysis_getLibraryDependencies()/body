{
  final Ref<LibraryDependenciesResult> resultRef=new Ref<LibraryDependenciesResult>();
  final Semaphore semaphore=new Semaphore();
  try {
synchronized (myLock) {
      if (myServer == null)       return null;
      semaphore.down();
      LOG.debug("analysis_getLibraryDependencies()");
      final GetLibraryDependenciesConsumer consumer=new GetLibraryDependenciesConsumer(){
        @Override public void computedDependencies(        @Nullable final String[] libraries,        @Nullable final Map<String,Map<String,List<String>>> packageMap){
          resultRef.set(new LibraryDependenciesResult(libraries,packageMap));
          semaphore.up();
        }
        @Override public void onError(        final RequestError error){
          logError("analysis_getLibraryDependencies()",null,error);
          semaphore.up();
        }
      }
;
      final AnalysisServer server=myServer;
      final boolean ok=runInPooledThreadAndWait(new Runnable(){
        @Override public void run(){
          server.analysis_getLibraryDependencies(consumer);
        }
      }
,"analysis_getLibraryDependencies()",SEND_REQUEST_TIMEOUT);
      if (!ok) {
        stopServer();
        return null;
      }
    }
    semaphore.waitFor(GET_LIBRARY_DEPENDENCIES_TIMEOUT);
  }
  finally {
    semaphore.up();
  }
  return resultRef.get();
}
