{
  final String filePath=FileUtil.toSystemDependentName(file.getPath());
  final Ref<String> searchIdRef=new Ref<String>();
  final AnalysisServer server=myServer;
  if (server == null)   return;
  final CountDownLatch latch=new CountDownLatch(1);
  final int offset=getOriginalOffset(file,_offset);
  server.search_findElementReferences(filePath,offset,true,new FindElementReferencesConsumer(){
    @Override public void computedElementReferences(    String searchId,    Element element){
      searchIdRef.set(searchId);
      latch.countDown();
    }
    @Override public void onError(    RequestError error){
      LOG.info(getShortErrorMessage("search_findElementReferences()",filePath,error));
      latch.countDown();
    }
  }
);
  awaitForLatchCheckingCanceled(server,latch,FIND_ELEMENT_REFERENCES_TIMEOUT);
  if (latch.getCount() > 0) {
    LOG.info("search_findElementReferences() took too long for " + filePath + "@"+ offset);
    return;
  }
  final String searchId=searchIdRef.get();
  if (searchId == null) {
    return;
  }
  while (true) {
    ProgressManager.checkCanceled();
synchronized (mySearchResultSets) {
      SearchResultsSet resultSet;
      while ((resultSet=mySearchResultSets.poll()) != null) {
        if (!resultSet.id.equals(searchId))         continue;
        for (        final SearchResult searchResult : resultSet.results) {
          consumer.consume(searchResult);
        }
        if (resultSet.isLast)         return;
      }
      try {
        mySearchResultSets.wait(CHECK_CANCELLED_PERIOD);
      }
 catch (      InterruptedException e) {
        return;
      }
    }
  }
}
