{
  final List<SourceChange> results=Lists.newArrayList();
  final Semaphore semaphore=new Semaphore();
  final String filePath=FileUtil.toSystemDependentName(_filePath);
synchronized (myLock) {
    final AnalysisServer server=myServer;
    if (server == null)     return null;
    final GetAssistsConsumer consumer=new GetAssistsConsumer(){
      @Override public void computedSourceChanges(      List<SourceChange> sourceChanges){
        results.addAll(sourceChanges);
        semaphore.up();
      }
      @Override public void onError(      final RequestError error){
        logError("edit_getAssists()",filePath,error);
        semaphore.up();
      }
    }
;
    semaphore.down();
    final boolean ok=runInPooledThreadAndWait(new Runnable(){
      @Override public void run(){
        server.edit_getAssists(filePath,offset,length,consumer);
      }
    }
,"edit_getAssists(" + filePath + ", "+ offset+ ", "+ length+ ")",SEND_REQUEST_TIMEOUT);
    if (!ok) {
      stopServer();
      return null;
    }
  }
  final long t0=System.currentTimeMillis();
  semaphore.waitFor(GET_ASSISTS_TIMEOUT);
  semaphore.up();
  return results;
}
