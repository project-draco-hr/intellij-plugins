{
  final Ref<List<AnalysisErrorFixes>> resultRef=new Ref<List<AnalysisErrorFixes>>();
  final Semaphore semaphore=new Semaphore();
  final String filePath=FileUtil.toSystemDependentName(info.myFilePath);
synchronized (myLock) {
    if (myServer == null)     return null;
    semaphore.down();
    final GetFixesConsumer consumer=new GetFixesConsumer(){
      @Override public void computedFixes(      final List<AnalysisErrorFixes> fixes){
        resultRef.set(fixes);
        semaphore.up();
      }
      @Override public void onError(      final RequestError error){
        logError("edit_getFixes()",filePath,error);
        semaphore.up();
      }
    }
;
    final AnalysisServer server=myServer;
    final boolean ok=runInPooledThreadAndWait(new Runnable(){
      @Override public void run(){
        server.edit_getFixes(filePath,offset,consumer);
      }
    }
,"edit_getFixes(" + filePath + ", "+ offset+ ")",SEND_REQUEST_TIMEOUT);
    if (!ok) {
      stopServer();
      return null;
    }
  }
  final long t0=System.currentTimeMillis();
  semaphore.waitFor(GET_FIXES_TIMEOUT);
  if (semaphore.tryUp()) {
    LOG.info("edit_getFixes() took too long for file " + filePath + ": "+ (System.currentTimeMillis() - t0)+ "ms");
    return null;
  }
  return resultRef.get();
}
