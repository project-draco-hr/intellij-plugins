{
  final MessageBusConnection connection=ApplicationManager.getApplication().getMessageBus().connect();
  connection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void fileOpened(    @NotNull final FileEditorManager source,    @NotNull final VirtualFile file){
      if (isDartOrHtmlFile(file)) {
synchronized (myLock) {
          final String path=FileUtil.toSystemDependentName(file.getPath());
          if (!myPriorityFiles.contains(path)) {
            myPriorityFiles.add(path);
            analysis_setPriorityFiles();
          }
        }
      }
    }
    @Override public void fileClosed(    @NotNull final FileEditorManager source,    @NotNull final VirtualFile file){
      if (isDartOrHtmlFile(file)) {
synchronized (myLock) {
          final String path=FileUtil.toSystemDependentName(file.getPath());
          if (myPriorityFiles.remove(path)) {
            analysis_setPriorityFiles();
          }
        }
      }
    }
  }
);
  connection.subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
    @Override public void before(    @NotNull final List<? extends VFileEvent> events){
synchronized (myLock) {
        if (myServer == null)         return;
      }
      final List<VirtualFile> deletedFiles=new ArrayList<VirtualFile>(events.size());
      for (      VFileEvent event : events) {
        if (event instanceof VFileDeleteEvent && isDartOrHtmlFile(((VFileDeleteEvent)event).getFile())) {
          deletedFiles.add(((VFileDeleteEvent)event).getFile());
        }
      }
      if (deletedFiles.isEmpty())       return;
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          for (          VirtualFile vFile : deletedFiles) {
            for (            final Project project : myRootsHandler.getTrackedProjects()) {
              if (!project.isDisposed() && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile)) {
                DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile,AnalysisError.EMPTY_LIST);
              }
            }
          }
        }
      }
);
    }
  }
);
}
