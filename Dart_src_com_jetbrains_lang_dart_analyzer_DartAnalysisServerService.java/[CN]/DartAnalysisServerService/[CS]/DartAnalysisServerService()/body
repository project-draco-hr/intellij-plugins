{
  Disposer.register(ApplicationManager.getApplication(),new Disposable(){
    public void dispose(){
      stopServer();
    }
  }
);
  ApplicationManager.getApplication().getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void fileOpened(    @NotNull final FileEditorManager source,    @NotNull final VirtualFile file){
      if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE) {
        DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());
      }
    }
    @Override public void fileClosed(    @NotNull final FileEditorManager source,    @NotNull final VirtualFile file){
      if (isDartOrHtmlFile(file)) {
        removePriorityFile(file);
      }
    }
  }
);
  EditorFactory.getInstance().getEventMulticaster().addDocumentListener(new DocumentAdapter(){
    @Override public void beforeDocumentChange(    DocumentEvent e){
      final Document document=e.getDocument();
      final VirtualFile file=FileDocumentManager.getInstance().getFile(document);
      if (file == null) {
        return;
      }
      long start=System.nanoTime();
synchronized (myLock) {
        final String filePath=file.getPath();
        myFilePathsWithUnsentChanges.add(filePath);
        final List<PluginNavigationRegion> regions=myNavigationData.get(filePath);
        if (regions != null) {
          final int eventOffset=e.getOffset();
          final int deltaLength=e.getNewLength() - e.getOldLength();
          for (          PluginNavigationRegion region : regions) {
            if (region.offset <= eventOffset && eventOffset <= region.offset + region.length) {
              region.length+=deltaLength;
            }
 else             if (region.offset >= eventOffset) {
              region.offset+=deltaLength;
            }
            for (            PluginNavigationTarget target : region.getTargets()) {
              if (target.file.equals(filePath) && target.offset >= eventOffset) {
                target.offset+=deltaLength;
              }
            }
          }
        }
      }
    }
  }
);
}
