{
  Disposer.register(ApplicationManager.getApplication(),new Disposable(){
    public void dispose(){
      stopServer();
    }
  }
);
  Logging.setLogger(new com.google.dart.server.utilities.logging.Logger(){
    @Override public void logError(    String message){
      LOG.error(message);
    }
    @Override public void logError(    String message,    Throwable exception){
      LOG.error(message,exception);
    }
    @Override public void logInformation(    String message){
      LOG.debug(message);
    }
    @Override public void logInformation(    String message,    Throwable exception){
      LOG.debug(message,exception);
    }
  }
);
  ApplicationManager.getApplication().getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerListener(){
    @Override public void fileOpened(    @NotNull final FileEditorManager source,    @NotNull final VirtualFile file){
      if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE) {
        DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());
      }
      if (isLocalDartOrHtmlFile(file)) {
        updateVisibleFiles();
      }
    }
    @Override public void selectionChanged(    @NotNull FileEditorManagerEvent event){
      if (isLocalDartOrHtmlFile(event.getOldFile()) || isLocalDartOrHtmlFile(event.getNewFile())) {
        updateVisibleFiles();
      }
    }
    @Override public void fileClosed(    @NotNull final FileEditorManager source,    @NotNull final VirtualFile file){
      if (isLocalDartOrHtmlFile(file)) {
        if (FileEditorManager.getInstance(myRootsHandler.getTrackedProjects().iterator().next()).getSelectedEditor(file) == null) {
          myServerData.onFileClosed(file);
        }
        updateVisibleFiles();
      }
    }
  }
);
  registerQuickAssistIntentions();
}
