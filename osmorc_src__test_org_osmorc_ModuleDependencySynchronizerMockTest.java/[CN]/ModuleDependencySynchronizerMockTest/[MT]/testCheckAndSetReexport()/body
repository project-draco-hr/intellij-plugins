{
  ModifiableRootModel modelMock=createMock(ModifiableRootModel.class);
  LibraryOrderEntry libraryOrderEntryWithoutLibrary=createMock(LibraryOrderEntry.class);
  expect(libraryOrderEntryWithoutLibrary.getLibrary()).andReturn(null).anyTimes();
  expect(libraryOrderEntryWithoutLibrary.getLibraryName()).andReturn("test").anyTimes();
  expect(library2.getName()).andReturn("test").anyTimes();
  expect(osmorcFacetUtil.hasOsmorcFacet(module1)).andReturn(true).anyTimes();
  expect(osmorcFacetUtil.hasOsmorcFacet(module2)).andReturn(true).anyTimes();
  expect(libraryHandler.isFrameworkInstanceLibrary(libraryOrderEntry1)).andReturn(true).anyTimes();
  expect(libraryHandler.isFrameworkInstanceLibrary(libraryOrderEntryWithoutLibrary)).andReturn(true).anyTimes();
  expect(modelMock.getOrderEntries()).andReturn(new OrderEntry[]{moduleOrderEntry1,moduleOrderEntry2,libraryOrderEntry1,libraryOrderEntryWithoutLibrary});
  expect(bundleManager.isReexported(module1,module)).andReturn(true).anyTimes();
  expect(bundleManager.isReexported(module2,module)).andReturn(false).anyTimes();
  expect(bundleManager.isReexported(library1,module)).andReturn(true).anyTimes();
  expect(bundleManager.isReexported(library2,module)).andReturn(false).anyTimes();
  expect(moduleOrderEntry1.isExported()).andReturn(false);
  moduleOrderEntry1.setExported(true);
  expect(moduleOrderEntry2.isExported()).andReturn(false);
  expect(libraryOrderEntry1.isExported()).andReturn(false);
  libraryOrderEntry1.setExported(true);
  expect(libraryOrderEntryWithoutLibrary.isExported()).andReturn(false);
  replay(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2,modelMock,libraryOrderEntryWithoutLibrary);
  List<Object> newBundles=new ArrayList<Object>();
  newBundles.add(library2);
  ModuleDependencySynchronizer testObject=new ModuleDependencySynchronizer(bundleManager,moduleRootManager,application,libraryHandler,osmorcFacetUtil);
  assertThat(testObject.checkAndSetReexport(modelMock,newBundles),equalTo(true));
  verify(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2,modelMock,libraryOrderEntryWithoutLibrary);
}
