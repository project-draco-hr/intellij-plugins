{
  replay(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2);
  List<OrderEntry> oldOrderEntries=new ArrayList<OrderEntry>();
  oldOrderEntries.add(moduleOrderEntry1);
  oldOrderEntries.add(moduleOrderEntry2);
  oldOrderEntries.add(libraryOrderEntry1);
  oldOrderEntries.add(libraryOrderEntry2);
  List<Object> newBundles=new ArrayList<Object>();
  newBundles.add(module1);
  newBundles.add(library4);
  newBundles.add(module3);
  newBundles.add(module4);
  newBundles.add(library2);
  newBundles.add(library3);
  ModuleDependencySynchronizer testObject=new ModuleDependencySynchronizer(bundleManager,moduleRootManager,application,libraryHandler,osmorcFacetUtil);
  List<OrderEntry> obsoleteEntries=testObject.determineObsoleteModuleDependencies(oldOrderEntries,newBundles);
  assertThat(obsoleteEntries.size(),equalTo(2));
  assertThat(obsoleteEntries,hasItem((OrderEntry)moduleOrderEntry2));
  assertThat(obsoleteEntries,hasItem((OrderEntry)libraryOrderEntry1));
  verify(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2);
}
