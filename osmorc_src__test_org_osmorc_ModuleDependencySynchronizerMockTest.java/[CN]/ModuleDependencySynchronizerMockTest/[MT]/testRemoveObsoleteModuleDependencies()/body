{
  ModifiableRootModel modelMock=createMock(ModifiableRootModel.class);
  modelMock.removeOrderEntry(_moduleOrderEntry1);
  modelMock.removeOrderEntry(_libraryOrderEntry1);
  replay(_bundleManager,_moduleRootManager,_application,_libraryHandler,_modifiableRootModel,_module,_osmorcFacetUtil,_module1,_module2,_module3,_module4,_moduleOrderEntry1,_moduleOrderEntry2,_library1,_library2,_library3,_library4,_libraryOrderEntry1,_libraryOrderEntry2,modelMock);
  List<OrderEntry> oldOrderEntries=new ArrayList<OrderEntry>();
  oldOrderEntries.add(_moduleOrderEntry1);
  oldOrderEntries.add(_libraryOrderEntry1);
  ModuleDependencySynchronizer testObject=new ModuleDependencySynchronizer(_bundleManager,_moduleRootManager,_application,_libraryHandler,_osmorcFacetUtil);
  assertThat(testObject.removeObsoleteModuleDependencies(modelMock,oldOrderEntries),equalTo(true));
  assertThat(testObject.removeObsoleteModuleDependencies(modelMock,new ArrayList<OrderEntry>()),equalTo(false));
  verify(_bundleManager,_moduleRootManager,_application,_libraryHandler,_modifiableRootModel,_module,_osmorcFacetUtil,_module1,_module2,_module3,_module4,_moduleOrderEntry1,_moduleOrderEntry2,_library1,_library2,_library3,_library4,_libraryOrderEntry1,_libraryOrderEntry2,modelMock);
}
