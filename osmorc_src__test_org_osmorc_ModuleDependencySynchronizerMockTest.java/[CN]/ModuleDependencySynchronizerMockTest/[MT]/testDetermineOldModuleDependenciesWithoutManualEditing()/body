{
  ModifiableRootModel modelMock=createMock(ModifiableRootModel.class);
  expect(modelMock.getOrderEntries()).andReturn(new OrderEntry[]{moduleOrderEntry1,libraryOrderEntry1,moduleOrderEntry2,libraryOrderEntry2}).times(1);
  expect(osmorcFacetUtil.hasOsmorcFacet(module1)).andReturn(true).times(1);
  OsmorcFacetConfiguration configuration=new OsmorcFacetConfiguration();
  configuration.setOsmorcControlsManifest(true);
  OsmorcFacet facet=new OsmorcFacet(OsmorcFacetType.INSTANCE,module1,configuration,null,"OSGi");
  expect(osmorcFacetUtil.getOsmorcFacet(module1)).andReturn(facet).times(1);
  expect(osmorcFacetUtil.hasOsmorcFacet(module2)).andReturn(false).times(1);
  expect(libraryHandler.isFrameworkInstanceLibrary(libraryOrderEntry1)).andReturn(false);
  expect(libraryHandler.isFrameworkInstanceLibrary(libraryOrderEntry2)).andReturn(true);
  replay(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2,modelMock);
  ModuleDependencySynchronizer testObject=new ModuleDependencySynchronizer(bundleManager,moduleRootManager,application,libraryHandler,osmorcFacetUtil);
  List<OrderEntry> oldEntries=testObject.determineOldModuleDependencies(modelMock);
  assertThat(oldEntries.size(),equalTo(1));
  assertThat(oldEntries,hasItem((OrderEntry)libraryOrderEntry2));
  verify(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2,modelMock);
}
