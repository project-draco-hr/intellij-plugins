{
  ModifiableRootModel modelMock=createMock(ModifiableRootModel.class);
  expect(modelMock.addModuleOrderEntry(module1)).andReturn(moduleOrderEntry1).times(1);
  expect(modelMock.addLibraryEntry(library1)).andReturn(libraryOrderEntry1).times(1);
  replay(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2,modelMock);
  List<Object> newBundles=new ArrayList<Object>();
  newBundles.add(module1);
  newBundles.add(library1);
  ModuleDependencySynchronizer testObject=new ModuleDependencySynchronizer(bundleManager,moduleRootManager,application,libraryHandler,osmorcFacetUtil);
  assertThat(testObject.addNewModuleDependencies(modelMock,newBundles),equalTo(true));
  assertThat(testObject.addNewModuleDependencies(modelMock,new ArrayList<Object>()),equalTo(false));
  newBundles.clear();
  newBundles.add(module);
  assertThat(testObject.addNewModuleDependencies(modelMock,newBundles),equalTo(false));
  verify(bundleManager,moduleRootManager,application,libraryHandler,modifiableRootModel,module,osmorcFacetUtil,module1,module2,module3,module4,moduleOrderEntry1,moduleOrderEntry2,library1,library2,library3,library4,libraryOrderEntry1,libraryOrderEntry2,modelMock);
}
