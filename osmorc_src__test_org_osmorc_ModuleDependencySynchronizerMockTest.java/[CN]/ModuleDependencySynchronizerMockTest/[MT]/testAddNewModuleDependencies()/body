{
  ModifiableRootModel modelMock=createMock(ModifiableRootModel.class);
  expect(modelMock.addModuleOrderEntry(_module1)).andReturn(_moduleOrderEntry1).times(1);
  expect(modelMock.addLibraryEntry(_library1)).andReturn(_libraryOrderEntry1).times(1);
  replay(_bundleManager,_moduleRootManager,_application,_libraryHandler,_modifiableRootModel,_module,_osmorcFacetUtil,_module1,_module2,_module3,_module4,_moduleOrderEntry1,_moduleOrderEntry2,_library1,_library2,_library3,_library4,_libraryOrderEntry1,_libraryOrderEntry2,modelMock);
  List<Object> newBundles=new ArrayList<Object>();
  newBundles.add(_module1);
  newBundles.add(_library1);
  ModuleDependencySynchronizer testObject=new ModuleDependencySynchronizer(_bundleManager,_moduleRootManager,_application,_libraryHandler,_osmorcFacetUtil);
  assertThat(testObject.addNewModuleDependencies(modelMock,newBundles),equalTo(true));
  assertThat(testObject.addNewModuleDependencies(modelMock,new ArrayList<Object>()),equalTo(false));
  newBundles.clear();
  newBundles.add(_module);
  assertThat(testObject.addNewModuleDependencies(modelMock,newBundles),equalTo(false));
  verify(_bundleManager,_moduleRootManager,_application,_libraryHandler,_modifiableRootModel,_module,_osmorcFacetUtil,_module1,_module2,_module3,_module4,_moduleOrderEntry1,_moduleOrderEntry2,_library1,_library2,_library3,_library4,_libraryOrderEntry1,_libraryOrderEntry2,modelMock);
}
