{
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      final InputStreamReader reader=FlexCommonUtils.createInputStreamReader(myProcess.getInputStream());
      try {
        char[] buf=new char[2048];
        int read;
        while ((read=reader.read(buf,0,buf.length)) >= 0) {
          final String output=new String(buf,0,read);
          final StringTokenizer tokenizer=new StringTokenizer(output,"\r\n");
          while (tokenizer.hasMoreElements()) {
            final String message=tokenizer.nextElement();
            if (StringUtil.isEmptyOrSpaces(message))             continue;
            final boolean ok=handleCompilerMessage(compilationManager,message);
            if (!ok) {
              myCompilationFailed=true;
            }
          }
        }
        printPreviousLine(compilationManager);
      }
 catch (      IOException e) {
        compilationManager.addMessage(ASC20CompilationTask.this,CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
        myCompilationFailed=true;
      }
 finally {
        cancel();
        try {
          reader.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
);
}
