{
  final Collection<JSVariable> result=new HashSet<JSVariable>();
  element.acceptChildren(new JSRecursiveElementVisitor(){
    public void visitJSIndexedPropertyAccessExpression(    final JSIndexedPropertyAccessExpression node){
      if (node.getQualifier() instanceof JSReferenceExpression) {
        addResult((JSReferenceExpression)node.getQualifier());
      }
    }
    @Override public void visitJSAssignmentExpression(    JSAssignmentExpression node){
      if (node.getOperationSign() != JSTokenTypes.EQ) {
        return;
      }
      final JSExpression rOperand=node.getROperand();
      if (rOperand instanceof JSReferenceExpression) {
        addResult((JSReferenceExpression)rOperand);
      }
      node.acceptChildren(this);
    }
    @Override public void visitJSVariable(    JSVariable node){
      final JSExpression initializer=node.getInitializer();
      if (initializer instanceof JSReferenceExpression) {
        addResult((JSReferenceExpression)initializer);
      }
    }
    private void addResult(    final JSReferenceExpression referenceExpression){
      final PsiElement resolved=referenceExpression.resolve();
      if (resolved instanceof JSVariable) {
        final JSVariable variable=(JSVariable)resolved;
        if (!JSTypeUtils.isImmutableType(variable.getType())) {
          result.add(variable);
        }
      }
    }
  }
);
  return result;
}
