{
  if (!CodeInsightUtilBase.preparePsiElementForWrite(myField))   return;
  final JSBlockStatement anchorBlock=findAnchorBlock(myReferences);
  if (anchorBlock == null)   return;
  final PsiElement firstElement=getFirstElement(myReferences);
  final PsiElement anchorElement=getAnchorElement(anchorBlock,firstElement);
  final String typeString=myField.getTypeString();
  StringBuilder text=new StringBuilder("var ").append(myField.getName());
  if (!StringUtil.isEmpty(typeString)) {
    text.append(":").append(typeString);
  }
  final boolean b=isAssignment(anchorElement,firstElement);
  if (b) {
    final JSExpression expression=((JSExpressionStatement)anchorElement).getExpression();
    final JSExpression rOperand=((JSAssignmentExpression)expression).getROperand();
    text.append("=").append(rOperand.getText());
  }
 else {
    String initializerText=myField.getInitializerText();
    if (initializerText != null) {
      text.append("=").append(initializerText);
    }
  }
  text.append(JSChangeUtil.getSemicolon(project));
  final PsiElement varStatement=JSChangeUtil.createJSTreeFromText(project,text.toString(),JavaScriptSupportLoader.ECMA_SCRIPT_L4).getPsi();
  if (varStatement == null)   return;
  final PsiElement newDeclaration;
  if (b) {
    newDeclaration=anchorElement.replace(varStatement);
  }
 else {
    newDeclaration=anchorBlock.addBefore(varStatement,anchorElement);
  }
  CodeStyleManager.getInstance(project).reformat(anchorBlock);
  if (newDeclaration != null) {
    PsiFile psiFile=myField.getContainingFile();
    int offset=newDeclaration.getTextOffset();
    if (psiFile.getContext() != null) {
      psiFile=psiFile.getContext().getContainingFile();
      offset=InjectedLanguageManager.getInstance(project).injectedToHost(newDeclaration,offset);
    }
    final Editor editor=FileEditorManager.getInstance(project).getSelectedTextEditor();
    if (editor != null) {
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
      if (file == psiFile) {
        editor.getCaretModel().moveToOffset(offset);
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      }
    }
  }
  deleteField();
}
