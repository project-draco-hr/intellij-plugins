{
  final IosPackagingOptions packagingOptions=bc.getIosPackagingOptions();
  final AirSigningOptions signingOptions=packagingOptions.getSigningOptions();
  final boolean simulator=packageType == IOSPackageType.TestOnSimulator || packageType == IOSPackageType.DebugOnSimulator;
  final String keystorePassword=simulator ? TEMP_KEYSTORE_PASSWORD : passwords.getKeystorePassword(signingOptions.getKeystorePath());
  final String keyPassword=simulator ? null : passwords.getKeyPassword(signingOptions.getKeystorePath(),signingOptions.getKeyAlias());
  return new AdtTask(module.getProject(),bc.getSdk()){
    protected void appendAdtOptions(    List<String> command){
      command.add("-package");
      final String adtOptions=packagingOptions.getSigningOptions().getADTOptions();
      if (!adtOptions.isEmpty()) {
        final String undocumentedOptions=FlexUtils.removeOptions(adtOptions,"sampler","hideAneLibSymbols");
        command.addAll(StringUtil.split(undocumentedOptions," "));
      }
      command.add("-target");
switch (packageType) {
case Test:
        command.add(fastPackaging ? "ipa-test-interpreter" : "ipa-test");
      break;
case DebugOverUSB:
    command.add(fastPackaging ? "ipa-debug-interpreter" : "ipa-debug");
  command.add("-listen");
command.add(String.valueOf(usbDebugPort));
break;
case DebugOverNetwork:
command.add(fastPackaging ? "ipa-debug-interpreter" : "ipa-debug");
command.add("-connect");
break;
case TestOnSimulator:
command.add("ipa-test-interpreter-simulator");
break;
case DebugOnSimulator:
command.add("ipa-debug-interpreter-simulator");
break;
case AdHoc:
command.add("ipa-ad-hoc");
break;
case AppStore:
command.add("ipa-app-store");
break;
}
if (!adtOptions.isEmpty() && (adtOptions.equals("-sampler") || adtOptions.startsWith("-sampler ") || adtOptions.endsWith(" -sampler")|| adtOptions.contains(" -sampler "))) {
command.add("-sampler");
}
final List<String> optionValues=FlexUtils.getOptionValues(adtOptions,"hideAneLibSymbols");
if (!optionValues.isEmpty()) {
command.add("-hideAneLibSymbols");
command.add(optionValues.get(0));
}
if (simulator) {
command.add("-storetype");
command.add("PKCS12");
command.add("-keystore");
command.add(getTempKeystorePath());
command.add("-storepass");
command.add(TEMP_KEYSTORE_PASSWORD);
}
 else {
appendSigningOptions(command,packagingOptions,keystorePassword,keyPassword);
}
if (!simulator) {
command.add("-provisioning-profile");
command.add(FileUtil.toSystemDependentName(signingOptions.getProvisioningProfilePath()));
}
appendPaths(command,module,bc,packagingOptions,iosSDKPath,".ipa");
}
}
;
}
