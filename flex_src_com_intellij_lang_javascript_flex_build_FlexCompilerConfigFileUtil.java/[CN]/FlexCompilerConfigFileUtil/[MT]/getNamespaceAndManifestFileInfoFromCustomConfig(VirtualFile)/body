{
  if (configFile == null || !configFile.isValid() || configFile.isDirectory()) {
    return Collections.emptyList();
  }
  final Collection<FlexBuildConfiguration.NamespaceAndManifestFileInfo> result=new ArrayList<FlexBuildConfiguration.NamespaceAndManifestFileInfo>();
  try {
    final NamespacesXmlBuilder builder=new NamespacesXmlBuilder();
    NanoXmlUtil.parse(configFile.getInputStream(),builder);
    final Collection<String> includedInSwcNamespaces=builder.getIncludedNamespaces();
    for (    final Pair<String,String> namespaceAndManifest : builder.getNamespacesAndManifests()) {
      final FlexBuildConfiguration.NamespaceAndManifestFileInfo info=new FlexBuildConfiguration.NamespaceAndManifestFileInfo();
      info.NAMESPACE=namespaceAndManifest.first;
      info.MANIFEST_FILE_PATH=namespaceAndManifest.second;
      info.INCLUDE_IN_SWC=includedInSwcNamespaces.contains(info.NAMESPACE);
      result.add(info);
    }
  }
 catch (  IOException ignored) {
  }
  return result;
}
