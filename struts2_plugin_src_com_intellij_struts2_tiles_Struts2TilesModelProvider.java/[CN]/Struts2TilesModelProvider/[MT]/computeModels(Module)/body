{
  final Project project=module.getProject();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final GlobalSearchScope moduleScope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module,false);
  final PsiClass strutsTilesListenerClass=facade.findClass(STRUTS_TILES_LISTENER_CLASS,moduleScope);
  if (strutsTilesListenerClass == null) {
    return Collections.emptyList();
  }
  final PsiClass tilesListenerClass=facade.findClass(TilesConstants.TILES_LISTENER,moduleScope);
  final StrutsPluginDomFactory<TilesDefinitions,TilesModel> factory=StrutsProjectComponent.getInstance(project).getTilesFactory();
  final Set<TilesModel> struts2TilesModels=new HashSet<TilesModel>();
  final Consumer<Set<XmlFile>> consumer=new Consumer<Set<XmlFile>>(){
    public void consume(    final Set<XmlFile> definitions){
      final DomFileElement<TilesDefinitions> domFileElement=factory.createMergedModelRoot(definitions);
      if (domFileElement != null) {
        struts2TilesModels.add(new TilesModelImpl(definitions,domFileElement,STRUTS2_TILES_MODEL));
      }
    }
  }
;
  final WebDirectoryUtil webDirectoryUtil=WebDirectoryUtil.getWebDirectoryUtil(project);
  final Collection<WebFacet> webFacets=WebFacet.getInstances(module);
  for (  final WebFacet webFacet : webFacets) {
    final WebApp webApp=webFacet.getRoot();
    if (webApp == null) {
      continue;
    }
    @NonNls final Set<String> tilesConfigNames=findConfiguredTilesPaths(webApp);
    if (tilesConfigNames.isEmpty()) {
      tilesConfigNames.add(DEFAULT_TILES_XML);
    }
    final Set<XmlFile> tilesFileSet=new HashSet<XmlFile>();
    for (    final String tilesPath : tilesConfigNames) {
      final PsiElement tilesXmlFile=webDirectoryUtil.findFileByPath(tilesPath,webFacet);
      if (tilesXmlFile instanceof XmlFile) {
        tilesFileSet.add((XmlFile)tilesXmlFile);
      }
    }
    final List<Listener> listenerList=webApp.getListeners();
    for (    final Listener listener : listenerList) {
      final PsiClass listenerClass=listener.getListenerClass().getValue();
      if (strutsTilesListenerClass.equals(listenerClass) || Comparing.equal(tilesListenerClass,listenerClass)) {
        consumer.consume(tilesFileSet);
      }
    }
  }
  return struts2TilesModels;
}
