{
  final ConsoleView console;
  PubToolWindowContentInfo info=findExistingInfoForCommand(module.getProject(),command);
  if (info != null) {
    console=info.console;
    console.clear();
  }
 else {
    console=createConsole(module.getProject(),pubspecYamlFile);
    info=new PubToolWindowContentInfo(module,pubspecYamlFile,command,actionTitle,console);
    final ActionToolbar actionToolbar=createToolWindowActionsBar(info);
    final SimpleToolWindowPanel toolWindowPanel=new SimpleToolWindowPanel(false,true);
    toolWindowPanel.setContent(console.getComponent());
    toolWindowPanel.setToolbar(actionToolbar.getComponent());
    final Content content=ContentFactory.SERVICE.getInstance().createContent(toolWindowPanel.getComponent(),actionTitle,true);
    content.putUserData(PUB_TOOL_WINDOW_CONTENT_INFO_KEY,info);
    Disposer.register(content,console);
    final ContentManager contentManager=MessageView.SERVICE.getInstance(module.getProject()).getContentManager();
    removeOldTabs(contentManager);
    contentManager.addContent(content);
    contentManager.setSelectedContent(content);
    final ToolWindow toolWindow=ToolWindowManager.getInstance(module.getProject()).getToolWindow(ToolWindowId.MESSAGES_WINDOW);
    toolWindow.activate(null,true);
  }
  info.rerunPubCommandAction.setProcessHandler(processHandler);
  info.stopProcessAction.setProcessHandler(processHandler);
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      console.print(IdeBundle.message("finished.with.exit.code.text.message",event.getExitCode()),ConsoleViewContentType.SYSTEM_OUTPUT);
    }
  }
);
  console.print(DartBundle.message("working.dir.0",FileUtil.toSystemDependentName(pubspecYamlFile.getParent().getPath())) + "\n",ConsoleViewContentType.SYSTEM_OUTPUT);
  console.attachToProcess(processHandler);
  processHandler.startNotify();
}
