{
  final PsiElement element=queryParameters.getElementToSearch();
  if (!GrCucumberUtil.isStepDefinition(element))   return true;
  @Nullable final String regexp=ApplicationManager.getApplication().runReadAction(new NullableComputable<String>(){
    @Nullable @Override public String compute(){
      return GrCucumberUtil.getStepDefinitionPatternText((GrMethodCall)element);
    }
  }
);
  if (StringUtil.isEmptyOrSpaces(regexp))   return true;
  final String word=CucumberUtil.getTheBiggestWordToSearchByIndex(regexp);
  if (StringUtil.isEmptyOrSpaces(word))   return true;
  final SearchScope searchScope=CucumberStepSearchUtil.restrictScopeToGherkinFiles(new Computable<SearchScope>(){
    public SearchScope compute(){
      return queryParameters.getEffectiveSearchScope();
    }
  }
);
  final TextOccurenceProcessor processor=new TextOccurenceProcessor(){
    @Override public boolean execute(    final PsiElement occurrence,    int offsetInElement){
      return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        @NotNull @Override public Boolean compute(){
          if (!processRefs(occurrence,element,consumer))           return false;
          PsiElement parent=occurrence.getParent();
          if (parent != null) {
            if (!processRefs(parent,element,consumer))             return false;
          }
          return true;
        }
      }
);
    }
  }
;
  short context=UsageSearchContext.IN_STRINGS | UsageSearchContext.IN_CODE;
  PsiSearchHelper instance=PsiSearchHelper.SERVICE.getInstance(element.getProject());
  return instance.processElementsWithWord(processor,searchScope,word,context,true);
}
