{
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
  final ModuleFileIndex fileIndex=rootManager.getFileIndex();
  final CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(module.getProject());
  for (  final VirtualFile srcRoot : rootManager.getSourceRoots()) {
    final boolean isTestRoot=fileIndex.isInTestSourceContent(srcRoot);
    fileIndex.iterateContentUnderDirectory(srcRoot,new ContentIterator(){
      public boolean processFile(      final VirtualFile file){
        if (file.isDirectory() || compilerConfiguration.isExcludedFromCompilation(file))         return true;
        final String relativePath=VfsUtilCore.getRelativePath(file,srcRoot,'/');
        final Set<String> targetPaths=new THashSet<String>();
        if (isTestRoot) {
          if (!FlexCommonUtils.isSourceFile(file.getName())) {
            final CompilerModuleExtension compilerModuleExtension=CompilerModuleExtension.getInstance(module);
            final String outputUrl=compilerModuleExtension == null ? null : compilerModuleExtension.getCompilerOutputUrlForTests();
            if (outputUrl != null) {
              targetPaths.add(VfsUtilCore.urlToPath(outputUrl) + "/" + relativePath);
            }
          }
        }
 else {
          for (          FlexBuildConfiguration bc : FlexBuildConfigurationManager.getInstance(module).getBuildConfigurations()) {
            if (bc.isSkipCompile() || !BCUtils.canHaveResourceFiles(bc.getNature()) || bc.getCompilerOptions().getResourceFilesMode() == CompilerOptions.ResourceFilesMode.None) {
              continue;
            }
            final CompilerOptions.ResourceFilesMode mode=bc.getCompilerOptions().getResourceFilesMode();
            if (mode == CompilerOptions.ResourceFilesMode.All && !FlexCommonUtils.isSourceFile(file.getName()) || mode == CompilerOptions.ResourceFilesMode.ResourcePatterns && compilerConfiguration.isResourceFile(file)) {
              final String outputFolder=PathUtil.getParentPath(bc.getActualOutputFilePath());
              targetPaths.add(outputFolder + "/" + relativePath);
            }
          }
        }
        if (targetPaths.size() > 0) {
          processingItems.add(new FlexResourceProcessingItem(file,targetPaths));
        }
        return true;
      }
    }
);
  }
}
