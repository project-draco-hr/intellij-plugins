{
  if (CompilerPathsEx.CLEAR_ALL_OUTPUTS_KEY.get(context.getCompileScope()) == Boolean.TRUE) {
    context.getProgressIndicator().pushState();
    context.getProgressIndicator().setText(CompilerBundle.message("progress.clearing.output"));
    Collection<File> outputDirectories=new HashSet<File>();
    try {
      Collection<Pair<Module,FlexIdeBuildConfiguration>> toCompile=FlexCompiler.getModulesAndBCsToCompile(context.getCompileScope());
      for (      Pair<Module,FlexIdeBuildConfiguration> pair : toCompile) {
        outputDirectories.add(new File(PathUtil.getParentPath(pair.second.getActualOutputFilePath())));
      }
    }
 catch (    ConfigurationException e) {
      LOG.error("Validation error unexpected",e);
    }
    CompilerUtil.clearOutputDirectories(outputDirectories);
    context.getProgressIndicator().popState();
  }
  context.getProgressIndicator().pushState();
  context.getProgressIndicator().setText(CompilerBundle.message("progress.copying.resources"));
  final Collection<ProcessingItem> processed=new ArrayList<ProcessingItem>(items.length);
  final Collection<File> filesToRefresh=new THashSet<File>();
  for (  ProcessingItem item : items) {
    final VirtualFile sourceVFile=item.getFile();
    final File sourceFile=new File(sourceVFile.getPath());
    context.getProgressIndicator().setText2(FlexBundle.message("copying.0",FileUtil.toSystemDependentName(sourceVFile.getPath())));
    boolean allCopied=true;
    for (    String targetPath : ((FlexResourceProcessingItem)item).myTargetPaths) {
      if (context.getProgressIndicator().isCanceled()) {
        allCopied=false;
        break;
      }
      final File targetFile=new File(targetPath);
      try {
        FileUtil.copyContent(sourceFile,targetFile);
        filesToRefresh.add(targetFile);
      }
 catch (      IOException e) {
        allCopied=false;
        context.addMessage(CompilerMessageCategory.ERROR,CompilerBundle.message("error.copying",sourceFile.getPath(),targetFile.getPath(),e.getMessage()),VfsUtil.pathToUrl(sourceFile.getPath()),-1,-1);
      }
    }
    if (allCopied) {
      processed.add(item);
    }
  }
  CompilerUtil.refreshIOFiles(filesToRefresh);
  context.getProgressIndicator().popState();
  return processed.toArray(new ProcessingItem[processed.size()]);
}
