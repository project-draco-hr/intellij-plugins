{
  if (CompilerPathsEx.CLEAR_ALL_OUTPUTS_KEY.get(scope) == Boolean.TRUE) {
    try {
      final Collection<Pair<Module,FlexBuildConfiguration>> modulesAndBCs=FlexCompiler.getModulesAndBCsToCompile(scope);
      Set<VirtualFile> outputs=new HashSet<VirtualFile>();
      for (      Pair<Module,FlexBuildConfiguration> pair : modulesAndBCs) {
        String outputFilePath=pair.second.getActualOutputFilePath();
        VirtualFile outputFolder=LocalFileSystem.getInstance().findFileByPath(PathUtil.getParentPath(outputFilePath));
        ContainerUtil.addIfNotNull(outputs,outputFolder);
      }
      Project project=scope.getAffectedModules()[0].getProject();
      Set<VirtualFile> affectedOutputPaths=new HashSet<VirtualFile>();
      CompilerUtil.computeIntersectingPaths(project,outputs,affectedOutputPaths);
      if (!affectedOutputPaths.isEmpty()) {
        if (CompilerUtil.askUserToContinueWithNoClearing(project,affectedOutputPaths)) {
          CompilerPathsEx.CLEAR_ALL_OUTPUTS_KEY.set(scope,false);
          return true;
        }
 else {
          return false;
        }
      }
    }
 catch (    ConfigurationException ignored) {
    }
  }
  return true;
}
