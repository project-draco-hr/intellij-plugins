{
  final Set<DartComponentName> suggestedVariants=new THashSet<DartComponentName>();
  DartClass dartClass=null;
  if (DartResolveUtil.aloneOrFirstInChain(this)) {
    final PsiElement context=this;
    final PsiScopeProcessor processor=new ComponentNameScopeProcessor(suggestedVariants);
    DartResolveUtil.treeWalkUpAndTopLevelDeclarations(context,processor);
    dartClass=PsiTreeUtil.getParentOfType(this,DartClass.class);
  }
  final DartReference leftReference=DartResolveUtil.getLeftReference(this);
  if (leftReference != null) {
    final DartClassResolveResult classResolveResult=leftReference.resolveDartClass();
    dartClass=classResolveResult.getDartClass();
    if (PsiTreeUtil.getParentOfType(leftReference.resolve(),DartImportStatement.class,DartExportStatement.class) != null) {
      final VirtualFile virtualFile=DartResolveUtil.getFileByPrefix(getContainingFile(),leftReference.getText());
      DartResolveUtil.processTopLevelDeclarations(this,new ComponentNameScopeProcessor(suggestedVariants),virtualFile,null);
    }
  }
  if (dartClass != null) {
    suggestedVariants.addAll(DartResolveUtil.getComponentNames(dartClass.getFields()));
    suggestedVariants.addAll(DartResolveUtil.getComponentNames(dartClass.getMethods()));
    suggestedVariants.addAll(DartResolveUtil.getComponentNames(ContainerUtil.filter(dartClass.getConstructors(),new Condition<DartComponent>(){
      @Override public boolean value(      DartComponent component){
        return component instanceof DartNamedConstructorDeclaration || component instanceof DartFactoryConstructorDeclaration;
      }
    }
)));
  }
  final boolean typeInNew=getParent() instanceof DartType && getParent().getParent() instanceof DartNewExpression;
  if (typeInNew) {
    final Set<DartComponentName> constructors=new THashSet<DartComponentName>();
    for (    DartComponentName componentName : suggestedVariants) {
      final PsiElement parent=componentName.getParent();
      if (!(parent instanceof DartClass))       continue;
      constructors.addAll(DartResolveUtil.getComponentNames(ContainerUtil.filter(((DartClass)parent).getConstructors(),new Condition<DartComponent>(){
        @Override public boolean value(        DartComponent component){
          return component instanceof DartNamedConstructorDeclaration || component instanceof DartFactoryConstructorDeclaration;
        }
      }
)));
    }
    suggestedVariants.addAll(constructors);
  }
  return DartLookupElement.convert(suggestedVariants,typeInNew).toArray();
}
