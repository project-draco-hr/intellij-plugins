{
  checkSequenceIndent(sequence,holder,expectedIndent);
  sequence.acceptChildren(new PsiElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (element instanceof YAMLSequence) {
        YAMLSequence childSequence=(YAMLSequence)element;
        annotateFileSequence(childSequence,holder,basePath,expectedIndent);
      }
      super.visitElement(element);
    }
  }
);
  if (!isOneLineText(sequence)) {
    holder.createErrorAnnotation(sequence,"Unexpected multiline path");
    return;
  }
  PsiElementFragment<YAMLSequence> sequenceTextFragment=JstdConfigFileUtils.buildSequenceTextFragment(sequence);
  if (basePath != null && sequenceTextFragment != null) {
    DocumentFragment documentFragment=sequenceTextFragment.toDocumentFragment();
    if (documentFragment != null) {
      annotatePath(basePath,documentFragment,holder,true,false);
    }
  }
}
