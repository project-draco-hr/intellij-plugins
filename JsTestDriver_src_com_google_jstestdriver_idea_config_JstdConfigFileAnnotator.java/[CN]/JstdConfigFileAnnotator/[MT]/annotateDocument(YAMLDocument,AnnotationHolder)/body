{
  List<Group> groups=buildGroups(yamlDocument);
  if (groups == null) {
    return;
  }
  BasePathInfo basePathInfo=new BasePathInfo(yamlDocument);
  annotateBasePath(basePathInfo,holder);
  final Set<String> visitedKeys=Sets.newHashSet();
  for (  Group group : groups) {
    YAMLKeyValue keyValue=group.getKeyValue();
    if (keyValue != null) {
      PsiElement keyElement=keyValue.getKey();
      String keyStr=keyValue.getKeyText();
      if (!JstdConfigFileUtils.isTopLevelKey(keyValue)) {
        holder.createErrorAnnotation(keyElement,"Unexpected key '" + keyStr + "'");
      }
      if (!visitedKeys.add(keyStr)) {
        holder.createErrorAnnotation(keyElement,"Duplicated '" + keyStr + "' key");
      }
 else       if (JstdConfigFileUtils.isTopLevelKeyWithInnerFileSequence(keyValue)) {
        annotateKeyValueWithInnerFileSequence(keyValue,holder,basePathInfo.getBasePath());
      }
    }
 else {
      PsiElement element=group.getUnexpectedElement();
      if (!JsPsiUtils.isElementOfType(element,YAMLTokenTypes.EOL,YAMLTokenTypes.INDENT)) {
        holder.createErrorAnnotation(element,"Unexpected element '" + element.getText() + "'");
      }
    }
  }
}
