{
  YAMLCompoundValue compoundValue=CastUtils.tryCast(keyValue.getValue(),YAMLCompoundValue.class);
  if (compoundValue == null) {
    holder.createErrorAnnotation(keyValue,"YAML sequence is expected here");
    return;
  }
  ASTNode firstIndent=CastUtils.tryCast(compoundValue.getPrevSibling(),ASTNode.class);
  if (firstIndent == null || firstIndent.getElementType() != YAMLTokenTypes.INDENT) {
    int offset=compoundValue.getTextRange().getStartOffset();
    holder.createErrorAnnotation(TextRange.create(offset,offset),"Indent is expected here");
    return;
  }
  final String indent=StringUtil.notNullize(firstIndent.getText());
  compoundValue.acceptChildren(new PsiElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      final YAMLSequence sequence=CastUtils.tryCast(element,YAMLSequence.class);
      if (sequence != null) {
        if (!isOneLineText(sequence,document)) {
          holder.createErrorAnnotation(sequence,"Unexpected multiline path");
        }
        return;
      }
      ASTNode astNode=CastUtils.tryCast(element,ASTNode.class);
      boolean error=true;
      if (astNode != null) {
        IElementType type=astNode.getElementType();
        if (type == YAMLTokenTypes.INDENT && !indent.equals(astNode.getText())) {
          holder.createErrorAnnotation(astNode,"All indents should be equal-sized");
        }
        error=type != YAMLTokenTypes.INDENT && type != YAMLTokenTypes.EOL && type != YAMLTokenTypes.WHITESPACE;
      }
      if (error) {
        holder.createErrorAnnotation(element,"YAML sequence is expected here");
      }
    }
  }
);
}
