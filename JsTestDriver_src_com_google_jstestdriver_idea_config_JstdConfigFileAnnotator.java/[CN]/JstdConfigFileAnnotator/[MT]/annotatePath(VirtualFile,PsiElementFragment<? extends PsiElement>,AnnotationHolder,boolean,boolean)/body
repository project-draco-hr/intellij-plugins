{
  String pathStr=pathFragment.getText();
  if (tolerateRemoteLocations && (pathStr.startsWith("http:") || pathStr.startsWith("https:"))) {
    return true;
  }
  if (StringUtil.isEmptyOrSpaces(pathStr)) {
    holder.createErrorAnnotation(pathFragment.getDocumentTextRange(),"Invalid path");
    return false;
  }
  int documentOffset=pathFragment.getDocumentTextRange().getStartOffset();
  List<String> components=JstdConfigFileUtils.convertPathToComponentList(pathStr);
  VirtualFile current=basePath;
  if (!components.isEmpty()) {
    String first=components.get(0);
    if (first.isEmpty() && !pathStr.isEmpty()) {
      first=pathStr.substring(0,1);
    }
    if (!first.isEmpty()) {
      VirtualFile initial=LocalFileSystem.getInstance().findFileByPath(first);
      if (initial != null) {
        current=initial;
        components=components.subList(1,components.size());
        documentOffset+=first.length() + 1;
      }
    }
  }
  if (directoryIsExpected && !components.isEmpty() && components.get(components.size() - 1).isEmpty()) {
    components=components.subList(0,components.size() - 1);
  }
  for (  String component : components) {
    if (component.contains("*")) {
      return true;
    }
    if (component.isEmpty()) {
      holder.createErrorAnnotation(TextRange.create(documentOffset,documentOffset + 1),"Empty name");
      break;
    }
    VirtualFile next=current.findFileByRelativePath(component);
    if (next == null) {
      holder.createErrorAnnotation(TextRange.create(documentOffset,documentOffset + component.length()),"No such element");
      break;
    }
    documentOffset+=component.length() + 1;
    current=next;
  }
  if (directoryIsExpected) {
    if (!current.isDirectory()) {
      holder.createErrorAnnotation(pathFragment.getDocumentTextRange(),"Not a directory");
    }
  }
 else {
    if (current.isDirectory()) {
      holder.createErrorAnnotation(pathFragment.getDocumentTextRange(),"Not a file");
    }
  }
  return true;
}
