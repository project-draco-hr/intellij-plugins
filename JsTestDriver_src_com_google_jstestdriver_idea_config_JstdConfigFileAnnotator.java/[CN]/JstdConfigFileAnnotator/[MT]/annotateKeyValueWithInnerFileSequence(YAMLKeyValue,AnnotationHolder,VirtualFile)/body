{
  PsiElement value=keyValue.getValue();
  if (value == null) {
    holder.createErrorAnnotation(keyValue,"File sequence was expected here");
    return;
  }
  YAMLCompoundValue compoundValue=ObjectUtils.tryCast(value,YAMLCompoundValue.class);
  if (compoundValue == null) {
    holder.createErrorAnnotation(value,"File sequence should start with a dash symbol");
    return;
  }
  final String firstIndent=toIndentString(compoundValue.getPrevSibling());
  compoundValue.acceptChildren(new PsiElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      final YAMLSequence sequence=ObjectUtils.tryCast(element,YAMLSequence.class);
      if (sequence != null) {
        annotateFileSequence(sequence,holder,basePath,firstIndent);
        return;
      }
      boolean accepted=JsPsiUtils.isElementOfType(element,YAMLTokenTypes.EOL,YAMLTokenTypes.WHITESPACE,YAMLTokenTypes.COMMENT,YAMLTokenTypes.INDENT);
      if (!accepted) {
        holder.createErrorAnnotation(element,"YAML sequence was expected here");
      }
    }
  }
);
}
