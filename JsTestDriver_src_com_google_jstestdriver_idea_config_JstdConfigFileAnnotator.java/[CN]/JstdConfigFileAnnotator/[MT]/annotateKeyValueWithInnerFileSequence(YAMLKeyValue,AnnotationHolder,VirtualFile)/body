{
  PsiElement value=keyValue.getValue();
  if (value == null) {
    holder.createErrorAnnotation(keyValue,"File sequence was expected here");
    return;
  }
  YAMLCompoundValue compoundValue=CastUtils.tryCast(value,YAMLCompoundValue.class);
  if (compoundValue == null) {
    holder.createErrorAnnotation(value,"File sequence should start with a dash symbol");
    return;
  }
  PsiElement firstIndentElement=compoundValue.getPrevSibling();
  if (firstIndentElement == null || !JsPsiUtils.isElementOfType(firstIndentElement,YAMLTokenTypes.INDENT)) {
    int offset=compoundValue.getTextRange().getStartOffset();
    holder.createErrorAnnotation(TextRange.create(offset,offset),"Indent was expected here");
    return;
  }
  final String firstIndent=StringUtil.notNullize(firstIndentElement.getText());
  compoundValue.acceptChildren(new PsiElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      final YAMLSequence sequence=CastUtils.tryCast(element,YAMLSequence.class);
      if (sequence != null) {
        annotateFileSequence(sequence,holder,basePath);
        return;
      }
      boolean indentType=JsPsiUtils.isElementOfType(element,YAMLTokenTypes.INDENT);
      boolean whitespaceType=JsPsiUtils.isElementOfType(element,YAMLTokenTypes.EOL,YAMLTokenTypes.WHITESPACE);
      boolean comment=JsPsiUtils.isElementOfType(element,YAMLTokenTypes.COMMENT);
      if (indentType || whitespaceType || comment) {
        if (indentType && !firstIndent.equals(element.getText())) {
          holder.createErrorAnnotation(element,"All indents should be equal-sized");
        }
      }
 else {
        holder.createErrorAnnotation(element,"YAML sequence was expected here");
      }
    }
  }
);
}
