{
  node.getPsi().getFirstChild();
  for (ASTNode n=node.getFirstChildNode(); n != null; n=n.getTreeNext()) {
    final IElementType elementType=n.getElementType();
    if (elementType == DartTokenTypesSets.SINGLE_LINE_COMMENT) {
      ASTNode treeNext=n.getTreeNext();
      if (isSingleLineWs(treeNext)) {
        treeNext=treeNext.getTreeNext();
        while (treeNext != null && treeNext.getElementType() == DartTokenTypesSets.SINGLE_LINE_COMMENT) {
          ASTNode nextNext=treeNext.getTreeNext();
          if (isSingleLineWs(nextNext)) {
            nextNext=nextNext.getTreeNext();
            if (nextNext != null && nextNext.getElementType() == DartTokenTypesSets.SINGLE_LINE_COMMENT) {
              treeNext=nextNext;
            }
 else {
              break;
            }
          }
 else {
            break;
          }
        }
        if (treeNext != null && treeNext.getElementType() == DartTokenTypesSets.SINGLE_LINE_COMMENT) {
          TextRange foldedRange=new TextRange(n.getStartOffset() + "//".length(),treeNext.getStartOffset() + treeNext.getTextLength());
          descriptors.add(new FoldingDescriptor(n,foldedRange));
          n=treeNext;
        }
      }
    }
 else     if (DartTokenTypesSets.COMMENTS.contains(elementType)) {
      TextRange textRange=n.getTextRange();
      if (document.getLineNumber(textRange.getStartOffset()) != document.getLineNumber(textRange.getEndOffset() - 1)) {
        String s="", e="";
        if (elementType == DartTokenTypesSets.DOC_COMMENT) {
          s="/**";
          e="*/";
        }
 else         if (elementType == DartTokenTypesSets.MULTI_LINE_COMMENT) {
          s="/*";
          e="*/";
        }
        textRange=new TextRange(textRange.getStartOffset() + s.length(),textRange.getEndOffset() - e.length());
        descriptors.add(new FoldingDescriptor(n,textRange));
      }
    }
    if (node.getFirstChildNode() != null)     appendDescriptors(n,document,descriptors);
  }
  return node;
}
