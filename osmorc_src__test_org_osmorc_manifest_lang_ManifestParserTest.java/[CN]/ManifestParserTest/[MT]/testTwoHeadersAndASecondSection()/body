{
  PsiBuilder builder=new PsiBuilderImpl(lexer,TokenSet.EMPTY,TokenSet.EMPTY,"Bundle-SymbolicName: com.acme\n" + "Bundle-Activator: com.acme.Activator\n" + "\n"+ "Name: otherSection\n");
  ASTNode node=testObject.parse(ManifestStubElementTypes.FILE,builder);
  assertThat(node.getElementType(),sameInstance((IElementType)ManifestStubElementTypes.FILE));
  checkContainsNodes(node,ManifestElementTypes.SECTION,ManifestTokenType.SECTION_END,ManifestElementTypes.SECTION);
  ASTNode fileNode=node;
  node=fileNode.getChildren(null)[0];
  checkContainsNodes(node,ManifestElementTypes.HEADER,ManifestElementTypes.HEADER);
  ASTNode sectionNode=node;
  node=sectionNode.getChildren(null)[0];
  checkContainsNodes(node,ManifestTokenType.HEADER_NAME,ManifestTokenType.COLON,ManifestTokenType.SIGNIFICANT_SPACE,ManifestElementTypes.CLAUSE);
  node=node.getChildren(null)[3];
  checkContainsNodes(node,ManifestElementTypes.HEADER_VALUE_PART);
  node=sectionNode.getChildren(null)[1];
  checkContainsNodes(node,ManifestTokenType.HEADER_NAME,ManifestTokenType.COLON,ManifestTokenType.SIGNIFICANT_SPACE,ManifestElementTypes.CLAUSE);
  node=node.getChildren(null)[3];
  checkContainsNodes(node,ManifestElementTypes.HEADER_VALUE_PART);
  node=fileNode.getChildren(null)[2];
  checkContainsNodes(node,ManifestElementTypes.HEADER);
  sectionNode=node;
  node=sectionNode.getChildren(null)[0];
  checkContainsNodes(node,ManifestTokenType.HEADER_NAME,ManifestTokenType.COLON,ManifestTokenType.SIGNIFICANT_SPACE,ManifestElementTypes.CLAUSE);
  node=node.getChildren(null)[3];
  checkContainsNodes(node,ManifestElementTypes.HEADER_VALUE_PART);
}
