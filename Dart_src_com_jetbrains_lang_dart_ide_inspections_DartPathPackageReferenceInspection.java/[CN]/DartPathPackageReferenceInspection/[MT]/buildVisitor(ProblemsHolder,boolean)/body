{
  if (!PubspecYamlUtil.PUBSPEC_YAML.equals(holder.getFile().getName()))   return super.buildVisitor(holder,isOnTheFly);
  final Module module=ModuleUtilCore.findModuleForPsiElement(holder.getFile());
  final DartSdk sdk=DartSdk.getDartSdk(holder.getProject());
  if (module == null || sdk == null || !DartSdkGlobalLibUtil.isDartSdkEnabled(module)) {
    return super.buildVisitor(holder,isOnTheFly);
  }
  return new PsiElementVisitor(){
    @Override public void visitElement(    final PsiElement element){
      ProgressIndicatorProvider.checkCanceled();
      if (!(element instanceof YAMLKeyValue) || !PubspecYamlReferenceContributor.isPathPackageDefinition((YAMLKeyValue)element)) {
        return;
      }
      final VirtualFile packageDir=checkReferences(holder,(YAMLKeyValue)element);
      if (packageDir == null) {
        return;
      }
      if (packageDir.findChild(PubspecYamlUtil.PUBSPEC_YAML) == null) {
        final String message=DartBundle.message("pubspec.yaml.not.found.in",FileUtil.toSystemDependentName(packageDir.getPath()));
        holder.registerProblem(((YAMLKeyValue)element).getValue(),message);
        return;
      }
      final VirtualFile file=DartResolveUtil.getRealVirtualFile(element.getContainingFile());
      if (file != null && packageDir.equals(file.getParent())) {
        holder.registerProblem(((YAMLKeyValue)element).getValue(),DartBundle.message("path.package.reference.to.itself"));
        return;
      }
      final VirtualFile libDir=packageDir.findChild(PubspecYamlUtil.LIB_DIR_NAME);
      if (libDir != null && libDir.isDirectory() && !ProjectRootManager.getInstance(element.getProject()).getFileIndex().isInContent(libDir)) {
        final String message=DartBundle.message("folder.0.not.in.project.content",FileUtil.toSystemDependentName(packageDir.getPath()));
        holder.registerProblem(((YAMLKeyValue)element).getValue(),message,new AddContentRootFix(module,packageDir));
      }
    }
  }
;
}
