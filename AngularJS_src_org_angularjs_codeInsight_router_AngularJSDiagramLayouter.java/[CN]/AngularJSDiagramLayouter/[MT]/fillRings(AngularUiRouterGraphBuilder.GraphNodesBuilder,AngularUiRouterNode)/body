{
  Ring center=new Ring(null);
  final CircleSector centerSector=new CircleSector(null,rootNode);
  centerSector.myCirclePart=1.0;
  centerSector.myStartAngle=0;
  centerSector.myOrderedNodes.add(new NodeGroup(rootNode));
  center.myInnerRadius=0;
  center.mySectors.add(centerSector);
  final List<Ring> ringsList=new ArrayList<>();
  ringsList.add(center);
  Ring parent=center;
  while (true) {
    final Ring current=new Ring(parent);
    final List<CircleSector> parentSectors=parent.mySectors;
    for (    CircleSector parentSector : parentSectors) {
      if (parentSector.myParentSector == null) {
        final List<AngularUiRouterNode> zeroLevelStates=dataObject.getZeroLevelStates();
        for (        AngularUiRouterNode state : zeroLevelStates) {
          final CircleSector circleSector=new CircleSector(parentSector,rootNode);
          current.mySectors.add(circleSector);
          wrapStateAddToSector(dataObject,state,circleSector);
        }
      }
 else {
        for (        NodeGroup group : parentSector.myOrderedNodes) {
          final List<AngularUiRouterNode> states=dataObject.getImmediateChildrenStates(group.myNode);
          if (states != null && !states.isEmpty()) {
            final CircleSector circleSector=new CircleSector(parentSector,group.myNode);
            current.mySectors.add(circleSector);
            for (            AngularUiRouterNode state : states) {
              wrapStateAddToSector(dataObject,state,circleSector);
            }
          }
        }
      }
    }
    if (current.mySectors.isEmpty())     break;
    ringsList.add(current);
    parent=current;
  }
  return ringsList;
}
