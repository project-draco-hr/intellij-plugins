{
  final UmlGraphBuilder umlGraphBuilder=(UmlGraphBuilder)myGraph.getDataProvider(DiagramDataKeys.GRAPH_BUILDER).get(null);
  final AngularUiRouterDiagramModel model=(AngularUiRouterDiagramModel)umlGraphBuilder.getDataModel();
  double maxWidth=0;
  final Map<AngularUiRouterNode,Node> nodesMap=new HashMap<>();
  final Node[] array=myGraph.getNodeArray();
  for (  Node node : array) {
    final AngularUiRouterNode object=(AngularUiRouterNode)umlGraphBuilder.getNodeObject(node);
    nodesMap.put(object,node);
    maxWidth=Math.max(maxWidth,myGraph.getWidth(node));
  }
  final AngularUiRouterGraphBuilder.GraphNodesBuilder dataObject=findDataObject(model);
  if (dataObject == null)   return false;
  final AngularUiRouterNode rootNode=dataObject.getRootNode();
  final List<Ring> ringsList=fillRings(dataObject,rootNode);
  final Rectangle box=myGraph.getBoundingBox();
  final int inset=JBUI.scale(5);
  calculateSectorHeights(nodesMap,ringsList,inset);
  double curX=inset;
  double curY=inset;
  for (  Ring ring : ringsList) {
    curY=inset;
    final List<CircleSector> sectors=ring.mySectors;
    boolean hadTemplateLevel=false;
    for (    CircleSector sector : sectors) {
      if (sector.myParentSector != null && sector.myParentNode != null) {
        final Node graphNode=nodesMap.get(sector.myParentNode);
        final double nodeHeight=myGraph.getHeight(graphNode);
        final double parentY=myGraph.getCenterY(graphNode) - nodeHeight / 2;
        if (parentY > curY)         curY=parentY;
      }
      sector.myStartY=curY;
      for (      NodeGroup group : sector.myOrderedNodes) {
        final AngularUiRouterNode node=group.myNode;
        final double nodeHeight=layoutNode(maxWidth,nodesMap,curX,curY,node);
        hadTemplateLevel|=layoutTemplates(curX,maxWidth,curY,group,nodesMap,inset);
        curY+=nodeHeight + inset;
      }
      curY+=sector.mySumHeight;
    }
    curX+=maxWidth + inset * 2;
    if (hadTemplateLevel)     curX+=maxWidth + inset * 2;
  }
  layoutEdges(umlGraphBuilder,box);
  return true;
}
