{
  if (consumer instanceof BreakpointConsumer) {
    if (responseType.equals("Breakpoint")) {
      ((BreakpointConsumer)consumer).received(new Breakpoint(json));
      return;
    }
  }
  if (consumer instanceof EvaluateConsumer) {
    if (responseType.equals("ErrorRef")) {
      ((EvaluateConsumer)consumer).received(new ErrorRef(json));
      return;
    }
    if (responseType.equals("InstanceRef")) {
      ((EvaluateConsumer)consumer).received(new InstanceRef(json));
      return;
    }
    if (responseType.equals("NullRef")) {
      ((EvaluateConsumer)consumer).received(new NullRef(json));
      return;
    }
    if (responseType.equals("Sentinel")) {
      ((EvaluateConsumer)consumer).received(new Sentinel(json));
      return;
    }
  }
  if (consumer instanceof EvaluateInFrameConsumer) {
    if (responseType.equals("ErrorRef")) {
      ((EvaluateInFrameConsumer)consumer).received(new ErrorRef(json));
      return;
    }
    if (responseType.equals("InstanceRef")) {
      ((EvaluateInFrameConsumer)consumer).received(new InstanceRef(json));
      return;
    }
    if (responseType.equals("NullRef")) {
      ((EvaluateInFrameConsumer)consumer).received(new NullRef(json));
      return;
    }
  }
  if (consumer instanceof FlagListConsumer) {
    if (responseType.equals("FlagList")) {
      ((FlagListConsumer)consumer).received(new FlagList(json));
      return;
    }
  }
  if (consumer instanceof GetIsolateConsumer) {
    if (responseType.equals("Isolate")) {
      ((GetIsolateConsumer)consumer).received(new Isolate(json));
      return;
    }
    if (responseType.equals("Sentinel")) {
      ((GetIsolateConsumer)consumer).received(new Sentinel(json));
      return;
    }
  }
  if (consumer instanceof GetObjectConsumer) {
    if (responseType.equals("Breakpoint")) {
      ((GetObjectConsumer)consumer).received(new Breakpoint(json));
      return;
    }
    if (responseType.equals("Class")) {
      ((GetObjectConsumer)consumer).received(new ClassObj(json));
      return;
    }
    if (responseType.equals("Context")) {
      ((GetObjectConsumer)consumer).received(new Context(json));
      return;
    }
    if (responseType.equals("Error")) {
      ((GetObjectConsumer)consumer).received(new ErrorObj(json));
      return;
    }
    if (responseType.equals("Field")) {
      ((GetObjectConsumer)consumer).received(new Field(json));
      return;
    }
    if (responseType.equals("Func")) {
      ((GetObjectConsumer)consumer).received(new Func(json));
      return;
    }
    if (responseType.equals("Instance")) {
      ((GetObjectConsumer)consumer).received(new Instance(json));
      return;
    }
    if (responseType.equals("Library")) {
      ((GetObjectConsumer)consumer).received(new Library(json));
      return;
    }
    if (responseType.equals("Null")) {
      ((GetObjectConsumer)consumer).received(new Null(json));
      return;
    }
    if (responseType.equals("Obj")) {
      ((GetObjectConsumer)consumer).received(new Obj(json));
      return;
    }
    if (responseType.equals("Script")) {
      ((GetObjectConsumer)consumer).received(new Script(json));
      return;
    }
    if (responseType.equals("Sentinel")) {
      ((GetObjectConsumer)consumer).received(new Sentinel(json));
      return;
    }
    if (responseType.equals("TypeArguments")) {
      ((GetObjectConsumer)consumer).received(new TypeArguments(json));
      return;
    }
  }
  if (consumer instanceof StackConsumer) {
    if (responseType.equals("Stack")) {
      ((StackConsumer)consumer).received(new Stack(json));
      return;
    }
  }
  if (consumer instanceof SuccessConsumer) {
    if (responseType.equals("Success")) {
      ((SuccessConsumer)consumer).received(new Success(json));
      return;
    }
  }
  if (consumer instanceof VMConsumer) {
    if (responseType.equals("VM")) {
      ((VMConsumer)consumer).received(new VM(json));
      return;
    }
  }
  if (consumer instanceof VersionConsumer) {
    if (responseType.equals("Version")) {
      ((VersionConsumer)consumer).received(new Version(json));
      return;
    }
  }
  logUnknownResponse(consumer,json);
}
