{
  assertAlive();
  Map<String,ModifiableDependencyEntry> moduleLibrariesEntries=new HashMap<String,ModifiableDependencyEntry>();
  for (  ModifiableDependencyEntry entry : dependant.getModifiableEntries()) {
    if (entry instanceof ModuleLibraryEntry) {
      moduleLibrariesEntries.put(((ModuleLibraryEntry)entry).getLibraryId(),entry);
    }
  }
  List<ModifiableDependencyEntry> entriesToRemove=new ArrayList<ModifiableDependencyEntry>(dependant.getModifiableEntries());
  for (Iterator<? extends ModifiableDependencyEntry> i=newEntries.iterator(); i.hasNext(); ) {
    ModifiableDependencyEntry entry=i.next();
    if (entry instanceof ModuleLibraryEntry) {
      ModifiableDependencyEntry existingEntry=moduleLibrariesEntries.get(((ModuleLibraryEntry)entry).getLibraryId());
      if (existingEntry != null) {
        entriesToRemove.remove(existingEntry);
        existingEntry.getDependencyType().copyFrom(entry.getDependencyType());
        i.remove();
      }
    }
  }
  Editor dependantEditor=getEditor(dependant);
  ModifiableRootModel dependantModifiableModel=myProvider.getModuleModifiableModel(dependantEditor.myModule);
  for (  DependencyEntry entry : entriesToRemove) {
    if (entry instanceof ModuleLibraryEntry) {
      ModuleLibraryEntry libraryEntry=(ModuleLibraryEntry)entry;
      Library dependencyLibrary=findLibrary(dependantModifiableModel,libraryEntry.getLibraryId());
      if (dependencyLibrary != null) {
        LibraryOrderEntry orderEntry=dependantModifiableModel.findLibraryOrderEntry(dependencyLibrary);
        LOG.assertTrue(orderEntry != null);
        dependantModifiableModel.removeOrderEntry(orderEntry);
      }
    }
  }
  dependant.getModifiableEntries().removeAll(entriesToRemove);
  dependant.getModifiableEntries().addAll(newEntries);
}
