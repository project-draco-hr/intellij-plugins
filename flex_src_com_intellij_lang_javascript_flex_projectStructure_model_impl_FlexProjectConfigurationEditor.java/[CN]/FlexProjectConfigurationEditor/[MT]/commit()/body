{
  for (  Module module : myModule2Editors.keySet()) {
    ModifiableRootModel modifiableModel=myProvider.getModuleModifiableModel(module);
    Map<LibraryEx,Boolean> sdksToAdd=new HashMap<LibraryEx,Boolean>();
    for (    Editor editor : myModule2Editors.get(module)) {
      SdkEntry sdkEntry=editor.getDependencies().getSdkEntry();
      if (sdkEntry != null) {
        LibraryEx sdkLibrary=((SdkEntryImpl)sdkEntry).findLibrary(myProvider.getGlobalLibrariesModifiableModel().getLibraries());
        if (sdkLibrary != null) {
          sdksToAdd.put(sdkLibrary,true);
        }
      }
    }
    Collection<OrderEntry> sdkEntriesToRemove=new ArrayList<OrderEntry>();
    for (    OrderEntry orderEntry : modifiableModel.getOrderEntries()) {
      if (orderEntry instanceof LibraryOrderEntry) {
        if (LibraryTablesRegistrar.APPLICATION_LEVEL.equals(((LibraryOrderEntry)orderEntry).getLibraryLevel())) {
          LibraryEx sdkLibrary=(LibraryEx)((LibraryOrderEntry)orderEntry).getLibrary();
          if (sdksToAdd.containsKey(sdkLibrary)) {
            sdksToAdd.put(sdkLibrary,false);
          }
 else           if (sdkLibrary != null && sdkLibrary.getType() instanceof FlexSdkLibraryType) {
            sdkEntriesToRemove.add(orderEntry);
          }
        }
      }
    }
    for (    OrderEntry e : sdkEntriesToRemove) {
      modifiableModel.removeOrderEntry(e);
    }
    for (    LibraryEx library : sdksToAdd.keySet()) {
      if (!library.isDisposed() && sdksToAdd.get(library) && myProvider.getGlobalLibrariesModifiableModel().getLibraryByName(library.getName()) != null) {
        modifiableModel.addLibraryEntry(library);
      }
    }
    final Map<Module,Boolean> modulesToAdd=new HashMap<Module,Boolean>();
    for (    Editor editor : myModule2Editors.get(module)) {
      for (      DependencyEntry dependencyEntry : editor.getDependencies().getEntries()) {
        if (dependencyEntry instanceof BuildConfigurationEntry) {
          Editor bc=findBc((BuildConfigurationEntry)dependencyEntry);
          if (bc != null && bc.myModule != module) {
            modulesToAdd.put(bc.myModule,true);
          }
        }
      }
    }
    List<OrderEntry> moduleOrderEntriesToRemove=ContainerUtil.filter(modifiableModel.getOrderEntries(),new Condition<OrderEntry>(){
      @Override public boolean value(      OrderEntry orderEntry){
        if (orderEntry instanceof ModuleOrderEntry) {
          Module m=((ModuleOrderEntry)orderEntry).getModule();
          if (modulesToAdd.containsKey(m)) {
            modulesToAdd.put(m,false);
            return false;
          }
 else {
            return true;
          }
        }
        return false;
      }
    }
);
    for (    OrderEntry orderEntry : moduleOrderEntriesToRemove) {
      modifiableModel.removeOrderEntry(orderEntry);
    }
    for (    Module m : modulesToAdd.keySet()) {
      if (modulesToAdd.get(m)) {
        modifiableModel.addModuleOrderEntry(m);
      }
    }
  }
  Collection<Module> modulesWithChangedModifiableModel=ContainerUtil.findAll(myModule2Editors.keySet(),new Condition<Module>(){
    @Override public boolean value(    Module module){
      return myProvider.getModuleModifiableModel(module).isChanged();
    }
  }
);
  if (!modulesWithChangedModifiableModel.isEmpty()) {
    myProvider.commitModifiableModels();
    myModulesModelChangeEventDispatcher.getMulticaster().modulesModelsChanged(modulesWithChangedModifiableModel);
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      for (      Module module : myModule2Editors.keySet()) {
        Function<Editor,FlexIdeBuildConfigurationImpl> f=new Function<Editor,FlexIdeBuildConfigurationImpl>(){
          @Override public FlexIdeBuildConfigurationImpl fun(          Editor editor){
            return editor.commit();
          }
        }
;
        FlexIdeBuildConfigurationImpl[] current=ContainerUtil.map2Array(myModule2Editors.get(module),FlexIdeBuildConfigurationImpl.class,f);
        ((FlexBuildConfigurationManagerImpl)FlexBuildConfigurationManager.getInstance(module)).setBuildConfigurations(current);
      }
      if (mySdksEditor.isModified()) {
        mySdksEditor.commit();
      }
      if (myProject != null) {
        FlexBuildConfigurationManagerImpl.resetHighlighting(myProject);
      }
    }
  }
);
}
