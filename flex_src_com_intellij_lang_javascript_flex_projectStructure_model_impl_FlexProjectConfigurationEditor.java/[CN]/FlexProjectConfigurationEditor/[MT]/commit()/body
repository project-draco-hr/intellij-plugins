{
  for (  Module module : myModule2Editors.keySet()) {
    ModifiableRootModel modifiableModel=myProvider.getModuleModifiableModel(module);
    Collection<String> usedModulesLibrariesIds=new ArrayList<String>();
    Map<Library,Boolean> librariesToAdd=new HashMap<Library,Boolean>();
    final Collection<String> sdkNames=new HashSet<String>();
    for (    Editor editor : myModule2Editors.get(module)) {
      final SdkEntry sdkEntry=editor.getDependencies().getSdkEntry();
      if (sdkEntry != null) {
        sdkNames.add(sdkEntry.getName());
      }
      for (      DependencyEntry dependencyEntry : editor.getDependencies().getEntries()) {
        if (dependencyEntry instanceof ModuleLibraryEntry) {
          ModuleLibraryEntry moduleLibraryEntry=(ModuleLibraryEntry)dependencyEntry;
          usedModulesLibrariesIds.add(moduleLibraryEntry.getLibraryId());
        }
        if (dependencyEntry instanceof SharedLibraryEntry) {
          SharedLibraryEntry sharedLibraryEntry=(SharedLibraryEntry)dependencyEntry;
          Library library=myProvider.findSourceLibraryForLiveName(sharedLibraryEntry.getLibraryName(),sharedLibraryEntry.getLibraryLevel());
          if (library != null) {
            librariesToAdd.put(library,true);
          }
        }
      }
    }
    modifiableModel.setSdk(sdkNames.isEmpty() ? null : new FlexCompositeSdk(ArrayUtil.toStringArray(sdkNames)));
    Collection<OrderEntry> entriesToRemove=new ArrayList<OrderEntry>();
    for (    OrderEntry orderEntry : modifiableModel.getOrderEntries()) {
      if (orderEntry instanceof LibraryOrderEntry) {
        if (((LibraryOrderEntry)orderEntry).isModuleLevel()) {
          LibraryEx library=(LibraryEx)((LibraryOrderEntry)orderEntry).getLibrary();
          if (FlexProjectRootsUtil.isFlexLibrary(library) && !usedModulesLibrariesIds.contains(FlexProjectRootsUtil.getLibraryId(library))) {
            entriesToRemove.add(orderEntry);
          }
        }
 else {
          LibraryEx library=(LibraryEx)((LibraryOrderEntry)orderEntry).getLibrary();
          if (librariesToAdd.containsKey(library)) {
            librariesToAdd.put(library,false);
          }
 else           if (library != null && FlexProjectRootsUtil.isFlexLibrary(library)) {
            entriesToRemove.add(orderEntry);
          }
        }
      }
    }
    for (    OrderEntry e : entriesToRemove) {
      modifiableModel.removeOrderEntry(e);
    }
    for (    Library library : librariesToAdd.keySet()) {
      if (!((LibraryEx)library).isDisposed() && librariesToAdd.get(library) && myProvider.findSourceLibrary(library.getName(),library.getTable().getTableLevel()) != null) {
        modifiableModel.addLibraryEntry(library);
      }
    }
    final Map<Module,Boolean> modulesToAdd=new HashMap<Module,Boolean>();
    for (    Editor editor : myModule2Editors.get(module)) {
      for (      DependencyEntry dependencyEntry : editor.getDependencies().getEntries()) {
        if (dependencyEntry instanceof BuildConfigurationEntry) {
          final Module dependencyModule=findModuleWithBC((BuildConfigurationEntry)dependencyEntry);
          if (dependencyModule != null && dependencyModule != module) {
            final Boolean transitiveFlag=modulesToAdd.get(dependencyModule);
            modulesToAdd.put(dependencyModule,Boolean.TRUE == transitiveFlag || BCUtils.isTransitiveDependency(dependencyEntry.getDependencyType().getLinkageType()));
          }
        }
      }
    }
    List<OrderEntry> moduleOrderEntriesToRemove=ContainerUtil.filter(modifiableModel.getOrderEntries(),new Condition<OrderEntry>(){
      @Override public boolean value(      OrderEntry orderEntry){
        if (orderEntry instanceof ModuleOrderEntry) {
          Module m=((ModuleOrderEntry)orderEntry).getModule();
          final Boolean transitive=modulesToAdd.get(m);
          if (transitive != null) {
            ((ModuleOrderEntry)orderEntry).setExported(transitive);
            modulesToAdd.remove(m);
            return false;
          }
 else {
            return true;
          }
        }
        return false;
      }
    }
);
    for (    OrderEntry orderEntry : moduleOrderEntriesToRemove) {
      modifiableModel.removeOrderEntry(orderEntry);
    }
    for (    Map.Entry<Module,Boolean> e : modulesToAdd.entrySet()) {
      modifiableModel.addModuleOrderEntry(e.getKey()).setExported(e.getValue());
    }
  }
  Collection<Module> modulesWithChangedModifiableModel=ContainerUtil.findAll(myModule2Editors.keySet(),new Condition<Module>(){
    @Override public boolean value(    Module module){
      return myProvider.getModuleModifiableModel(module).isChanged();
    }
  }
);
  if (!modulesWithChangedModifiableModel.isEmpty()) {
    myProvider.commitModifiableModels();
    myModulesModelChangeEventDispatcher.getMulticaster().modulesModelsChanged(modulesWithChangedModifiableModel);
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      for (      Module module : myModule2Editors.keySet()) {
        Function<Editor,FlexIdeBuildConfigurationImpl> f=new Function<Editor,FlexIdeBuildConfigurationImpl>(){
          @Override public FlexIdeBuildConfigurationImpl fun(          Editor editor){
            return editor.commit();
          }
        }
;
        FlexIdeBuildConfigurationImpl[] current=ContainerUtil.map2Array(myModule2Editors.get(module),FlexIdeBuildConfigurationImpl.class,f);
        ((FlexBuildConfigurationManagerImpl)FlexBuildConfigurationManager.getInstance(module)).setBuildConfigurations(current);
      }
      if (myProject != null) {
        FlexBuildConfigurationManagerImpl.resetHighlighting(myProject);
      }
    }
  }
);
}
