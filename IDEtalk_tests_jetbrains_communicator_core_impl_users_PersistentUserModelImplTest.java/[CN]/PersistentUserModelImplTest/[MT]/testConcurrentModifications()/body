{
  Runnable createUserCommand=new Runnable(){
    @Override public void run(){
      User user=myUserModel.createUser("bob" + System.nanoTime(),MockTransport.NAME);
      myUserModel.addUser(user);
    }
  }
;
  Runnable createGroupCommand=new Runnable(){
    @Override public void run(){
      myUserModel.addGroup("group" + System.nanoTime());
    }
  }
;
  Runnable removeUserCommand=new Runnable(){
    @Override public void run(){
      User[] allUsers=myUserModel.getAllUsers();
      if (allUsers.length > 0) {
        myUserModel.removeUser(allUsers[0]);
      }
    }
  }
;
  Runnable removeGroupCommand=new Runnable(){
    @Override public void run(){
      String[] groups=myUserModel.getGroups();
      if (groups.length > 0) {
        myUserModel.removeGroup(groups[0]);
      }
    }
  }
;
  Collection<Thread> threads=new ArrayList<Thread>();
  for (int i=0; i < 20; i++) {
    threads.add(new Thread(createCycle(createGroupCommand)));
    threads.add(new Thread(createCycle(createUserCommand)));
    threads.add(new Thread(createCycle(removeUserCommand)));
    threads.add(new Thread(createCycle(removeGroupCommand)));
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  System.out.println("myUserModel.getAllUsers().length = " + myUserModel.getAllUsers().length);
  System.out.println("myUserModel.getGroups().length = " + myUserModel.getGroups().length);
}
