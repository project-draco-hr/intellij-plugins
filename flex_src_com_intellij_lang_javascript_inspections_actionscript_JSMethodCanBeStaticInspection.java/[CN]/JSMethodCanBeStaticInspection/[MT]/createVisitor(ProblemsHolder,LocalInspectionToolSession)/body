{
  return new JSElementVisitor(){
    Condition<PsiElement>[] addins;
    @Override public void visitJSFunctionDeclaration(    final JSFunction function){
      final PsiElement parent=JSResolveUtil.findParent(function);
      if (!(parent instanceof JSClass))       return;
      final JSClass clazz=(JSClass)parent;
      if (clazz.isInterface())       return;
      final ASTNode nameIdentifier=function.findNameIdentifier();
      if (nameIdentifier == null)       return;
      final JSAttributeList attributeList=function.getAttributeList();
      if (attributeList == null || attributeList.hasModifier(JSAttributeList.ModifierType.STATIC) || attributeList.hasModifier(JSAttributeList.ModifierType.OVERRIDE)) {
        return;
      }
      if (function.isConstructor())       return;
      if (!attributeList.hasModifier(JSAttributeList.ModifierType.FINAL) && attributeList.getAccessType() != JSAttributeList.AccessType.PRIVATE) {
        final JSAttributeList classAttributeList=clazz.getAttributeList();
        if (classAttributeList != null && classAttributeList.findAttributeByName("Abstract") != null) {
          return;
        }
      }
      if (addins == null) {
        addins=Extensions.getRootArea().<Condition<PsiElement>>getExtensionPoint("com.intellij.cantBeStatic").getExtensions();
      }
      for (      Condition<PsiElement> addin : addins) {
        if (addin.value(function))         return;
      }
      boolean isEmpty=false;
      final JSSourceElement[] body=function.getBody();
      if (body.length == 0) {
        isEmpty=true;
      }
 else       if (body[0] instanceof JSBlockStatement) {
        isEmpty=body[0].getNode().findChildByType(JSElementTypes.SOURCE_ELEMENTS) == null;
      }
      if (isEmpty)       return;
      final Ref<Boolean> dependsOnInstance=new Ref<Boolean>();
      function.acceptChildren(new JSRecursiveElementVisitor(){
        @Override public void visitJSThisExpression(        JSThisExpression node){
          dependsOnInstance.set(Boolean.TRUE);
        }
        @Override public void visitJSSuperExpression(        JSSuperExpression superExpression){
          dependsOnInstance.set(Boolean.TRUE);
        }
        @Override public void visitJSReferenceExpression(        JSReferenceExpression node){
          if (node.getQualifier() == null && !JSResolveUtil.isSelfReference(node)) {
            final PsiElement resolve=node.resolve();
            if (resolve instanceof ImplicitJSVariableImpl && ("hostComponent".equals(((ImplicitJSVariableImpl)resolve).getName()) || "outerDocument".equals(((ImplicitJSVariableImpl)resolve).getName()))) {
              dependsOnInstance.set(Boolean.TRUE);
            }
 else             if (resolve instanceof JSAttributeListOwner && !(resolve instanceof JSClass)) {
              final JSAttributeList resolvedMemberAttrList=((JSAttributeListOwner)resolve).getAttributeList();
              if (resolvedMemberAttrList != null && !resolvedMemberAttrList.hasModifier(JSAttributeList.ModifierType.STATIC) && (!(resolve instanceof JSFunction) || !((JSFunction)resolve).isConstructor()) && resolve != function) {
                final PsiElement resolvedMemberParent=JSResolveUtil.findParent(resolve);
                if (resolvedMemberParent instanceof JSClass) {
                  dependsOnInstance.set(Boolean.TRUE);
                }
              }
            }
 else             if (resolve instanceof JSNamedElementProxy && ((JSNamedElementProxy)resolve).getType() == JSNamedElementIndexItemBase.NamedItemType.AttributeValue) {
              dependsOnInstance.set(Boolean.TRUE);
            }
          }
          super.visitJSReferenceExpression(node);
        }
        @Override public void visitJSFunctionExpression(        JSFunctionExpression node){
          checkFunForExternals((JSFunctionBaseImpl)node);
        }
        private void checkFunForExternals(        JSFunctionBaseImpl node){
          THashSet<String> usedExternalVars=new THashSet<String>();
          node.addReferencedExternalNames(usedExternalVars);
          if (usedExternalVars.size() > 0)           dependsOnInstance.set(Boolean.TRUE);
        }
        @Override public void visitJSFunctionDeclaration(        JSFunction node){
          checkFunForExternals((JSFunctionBaseImpl)node);
        }
        @Override public void visitElement(        PsiElement element){
          if (dependsOnInstance.get() != null)           return;
          super.visitElement(element);
        }
      }
);
      if (dependsOnInstance.get() == null && !JSInheritanceUtil.participatesInHierarchy(function)) {
        LocalQuickFix[] fixes=holder.isOnTheFly() ? new LocalQuickFix[]{new MakeMethodStaticFix()} : LocalQuickFix.EMPTY_ARRAY;
        holder.registerProblem(nameIdentifier.getPsi(),JSBundle.message("js.method.can.be.static"),fixes);
      }
    }
  }
;
}
