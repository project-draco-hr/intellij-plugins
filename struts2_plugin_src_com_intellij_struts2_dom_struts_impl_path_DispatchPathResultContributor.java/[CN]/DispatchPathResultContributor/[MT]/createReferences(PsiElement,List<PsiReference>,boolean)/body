{
  final FileReferenceSet set=FileReferenceSet.createSet(psiElement,soft,false,true);
  if (set == null) {
    return true;
  }
  final WebFacet webFacet=WebUtil.getWebFacet(psiElement);
  if (webFacet == null) {
    return false;
  }
  final String packageNamespace=getNamespace(psiElement);
  if (packageNamespace == null) {
    return false;
  }
  final WebDirectoryUtil directoryUtil=WebDirectoryUtil.getWebDirectoryUtil(psiElement.getProject());
  set.addCustomization(FileReferenceSet.DEFAULT_PATH_EVALUATOR_OPTION,new Function<PsiFile,Collection<PsiFileSystemItem>>(){
    public Collection<PsiFileSystemItem> fun(    final PsiFile file){
      final List<PsiFileSystemItem> basePathRoots=new ArrayList<PsiFileSystemItem>();
      final List<WebRoot> webRoots=webFacet.getWebRoots(true);
      for (      final WebRoot webRoot : webRoots) {
        final String webRootPath=webRoot.getRelativePath();
        final WebDirectoryElement webRootBase=directoryUtil.findWebDirectoryElementByPath(webRootPath,webFacet);
        ContainerUtil.addIfNotNull(webRootBase,basePathRoots);
      }
      if (!Comparing.equal(packageNamespace,StrutsPackage.DEFAULT_NAMESPACE)) {
        final WebDirectoryElement packageBase=directoryUtil.findWebDirectoryElementByPath(packageNamespace,webFacet);
        ContainerUtil.addIfNotNull(packageBase,basePathRoots);
      }
      return basePathRoots;
    }
  }
);
  Collections.addAll(references,set.getAllReferences());
  return false;
}
