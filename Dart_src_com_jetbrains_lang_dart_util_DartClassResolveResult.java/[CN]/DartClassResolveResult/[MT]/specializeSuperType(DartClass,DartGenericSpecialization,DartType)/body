{
  final DartTypeArguments targetTypeArguments=type.getTypeArguments();
  if (targetTypeArguments == null || dartClass == null || dartClass.getTypeParameters() == null) {
    return;
  }
  final DartClassResolveResult typeTargetClassResolve=DartResolveUtil.resolveClassByType(type);
  final DartClass typeTargetClass=typeTargetClassResolve.getDartClass();
  if (typeTargetClass == null) {
    return;
  }
  final DartTypeParameters typeTargetClassTypeParameters=typeTargetClass.getTypeParameters();
  List<DartType> list=targetTypeArguments.getTypeList().getTypeList();
  if (typeTargetClassTypeParameters == null || typeTargetClassTypeParameters.getTypeParameterList().size() != list.size()) {
    return;
  }
  for (int i=0, size=list.size(); i < size; i++) {
    final DartType argumentType=list.get(i);
    final PsiElement argumentTarget=argumentType.resolveReference();
    if (argumentTarget == null || dartClass.getTypeParameters() != PsiTreeUtil.getParentOfType(argumentTarget,DartTypeParameters.class)) {
      continue;
    }
    final String superGenericName=typeTargetClassTypeParameters.getTypeParameterList().get(i).getComponentName().getText();
    final DartClassResolveResult resolveResult=specialization.get(typeTargetClass,superGenericName);
    if (resolveResult == null || resolveResult.getDartClass() == null) {
      specialization.put(typeTargetClass,superGenericName,specialization.get(dartClass,argumentTarget.getText()));
      specializeSupers(typeTargetClass,specialization);
    }
  }
}
