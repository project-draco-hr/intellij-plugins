{
  final List<VirtualFile> result=new ArrayList<VirtualFile>();
  FrameworkInstanceDefinition definition=getRunConfiguration().getInstanceToUse();
  FrameworkIntegratorRegistry registry=ServiceManager.getService(getProject(),FrameworkIntegratorRegistry.class);
  if (definition != null) {
    FrameworkIntegrator integrator=registry.findIntegratorByInstanceDefinition(definition);
    if (integrator != null) {
      FrameworkInstanceManager frameworkInstanceManager=integrator.getFrameworkInstanceManager();
      final Pattern starterClasspathPattern=getFrameworkStarterClasspathPattern();
      frameworkInstanceManager.collectLibraries(definition,new JarFileLibraryCollector(){
        @Override protected void collectFrameworkJars(        @NotNull Collection<VirtualFile> jarFiles,        @NotNull FrameworkInstanceLibrarySourceFinder sourceFinder){
          for (          VirtualFile virtualFile : jarFiles) {
            if (starterClasspathPattern == null || starterClasspathPattern.matcher(virtualFile.getName()).matches()) {
              result.add(virtualFile);
            }
          }
        }
      }
);
    }
  }
  return result;
}
