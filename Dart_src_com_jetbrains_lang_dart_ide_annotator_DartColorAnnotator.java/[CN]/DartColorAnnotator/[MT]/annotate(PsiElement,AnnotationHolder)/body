{
  if (holder.isBatchMode())   return;
  final DartSdk sdk=DartSdk.getGlobalDartSdk();
  if (DartTokenTypesSets.BUILT_IN_IDENTIFIERS.contains(element.getNode().getElementType())) {
    if (element.getNode().getTreeParent().getElementType() != DartTokenTypes.ID) {
      createInfoAnnotation(holder,element,DartSyntaxHighlighterColors.DART_KEYWORD);
      return;
    }
  }
  if (DartTokenTypes.MUL == element.getNode().getElementType()) {
    final ASTNode previous=element.getNode().getTreePrev();
    if (previous != null && (previous.getElementType() == DartTokenTypes.SYNC || previous.getElementType() == DartTokenTypes.ASYNC)) {
      createInfoAnnotation(holder,element,DartSyntaxHighlighterColors.DART_KEYWORD);
    }
  }
  if (element.getNode().getElementType() == DartTokenTypes.REGULAR_STRING_PART) {
    highlightEscapeSequences(element,holder);
    return;
  }
  if (element instanceof DartMetadata) {
    final DartArguments arguments=((DartMetadata)element).getArguments();
    final int endOffset=arguments == null ? element.getTextRange().getEndOffset() : arguments.getTextRange().getStartOffset();
    final TextRange range=TextRange.create(element.getTextRange().getStartOffset(),endOffset);
    createInfoAnnotation(holder,range,DartSyntaxHighlighterColors.DART_METADATA);
    return;
  }
  if (element instanceof DartSymbolLiteralExpression) {
    createInfoAnnotation(holder,element,DartSyntaxHighlighterColors.SYMBOL_LITERAL);
    return;
  }
  if (element instanceof DartReference && element.getParent() instanceof DartType && "dynamic".equals(element.getText())) {
    createInfoAnnotation(holder,element,DartSyntaxHighlighterColors.DART_BUILTIN);
    return;
  }
  highlightIfDeclarationOrReference(element,holder,sdk);
}
