{
  final Runnable descriptorCreator=new Runnable(){
    public void run(){
      final String folderPath=FlexUtils.getContentOrModuleFolderPath(myModule);
      final String mainClass=myMainClassComputable.compute();
      final String airVersion=myAirVersionComputable.compute();
      final boolean androidEnabled=myAndroidEnabledComputable.compute();
      final boolean iosEnabled=myIOSEnabledComputable.compute();
      final CreateAirDescriptorTemplateDialog dialog=new CreateAirDescriptorTemplateDialog(myModule.getProject(),folderPath,mainClass,airVersion,androidEnabled,iosEnabled);
      dialog.show();
      if (dialog.isOK()) {
        final String descriptorPath=dialog.getDescriptorPath();
        setUseCustomDescriptor(descriptorPath);
        if (androidEnabled && iosEnabled && dialog.isBothAndroidAndIosSelected()) {
          final int choice=Messages.showYesNoDialog(myModule.getProject(),FlexBundle.message("use.same.descriptor.for.android.and.ios"),CreateAirDescriptorTemplateDialog.TITLE,Messages.getQuestionIcon());
          if (choice == Messages.YES) {
            myCreatedDescriptorConsumer.consume(descriptorPath);
          }
        }
      }
    }
  }
;
  myAirDescriptorForm=new AirDescriptorForm(myModule.getProject(),descriptorCreator);
  myFilesToPackageForm=new FilesToPackageForm(myModule.getProject());
  mySigningOptionsForm=new SigningOptionsForm(myModule.getProject(),new Computable.PredefinedValueComputable<Module>(myModule),new Computable.PredefinedValueComputable<Sdk>(null),EmptyRunnable.INSTANCE);
  mySigningOptionsForm.setUseTempCertificateCheckBoxVisible(!isIOS);
  mySigningOptionsForm.setProvisioningProfileApplicable(isIOS);
  mySigningOptionsForm.setCreateCertificateButtonApplicable(false);
}
