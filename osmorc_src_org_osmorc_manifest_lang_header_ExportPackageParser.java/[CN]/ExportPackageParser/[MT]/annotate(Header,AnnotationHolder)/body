{
  if (super.annotate(header,holder)) {
    return true;
  }
  boolean annotated=false;
  for (  HeaderValue value : header.getHeaderValues()) {
    if (value instanceof Clause) {
      Directive uses=((Clause)value).getDirective(Constants.USES_DIRECTIVE);
      if (uses != null) {
        HeaderValuePart valuePart=uses.getValueElement();
        if (valuePart != null) {
          String text=valuePart.getText();
          int offset=valuePart.getTextOffset();
          int start=0;
          while (start < text.length() && Character.isWhitespace(text.charAt(start)))           start++;
          if (text.startsWith("\""))           start++;
          while (start < text.length()) {
            int end=text.indexOf(',',start);
            if (end < 0)             end=text.endsWith("\"") ? text.length() - 1 : text.length();
            TextRange range=new TextRange(start,end);
            start=end + 1;
            String packageName=range.substring(text).replaceAll("\\s","");
            if (StringUtil.isEmptyOrSpaces(packageName)) {
              TextRange highlight=range.shiftRight(offset);
              holder.createErrorAnnotation(highlight,ManifestBundle.message("header.reference.invalid"));
              annotated=true;
              continue;
            }
            PsiDirectory[] directories=resolvePackage(header,packageName);
            if (directories.length == 0) {
              TextRange highlight=adjust(range,text).shiftRight(offset);
              holder.createErrorAnnotation(highlight,JavaErrorMessages.message("cannot.resolve.package",packageName));
              annotated=true;
            }
          }
        }
      }
    }
  }
  return annotated;
}
