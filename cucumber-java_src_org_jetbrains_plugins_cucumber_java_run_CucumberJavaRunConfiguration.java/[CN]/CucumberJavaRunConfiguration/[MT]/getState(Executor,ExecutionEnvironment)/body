{
  final JavaCommandLineState state=new JavaApplicationCommandLineState(this,env){
    protected JavaParameters createJavaParameters() throws ExecutionException {
      final JavaParameters params=new JavaParameters();
      final JavaRunConfigurationModule module=getConfigurationModule();
      final int classPathType=JavaParameters.JDK_AND_CLASSES_AND_TESTS;
      final String jreHome=CucumberJavaRunConfiguration.this.ALTERNATIVE_JRE_PATH_ENABLED ? ALTERNATIVE_JRE_PATH : null;
      JavaParametersUtil.configureModule(module,params,classPathType,jreHome);
      JavaParametersUtil.configureConfiguration(params,CucumberJavaRunConfiguration.this);
      String path=PathUtil.getJarPathForClass(this.getClass()).replace("cucumber-java.jar","SMFormatter.jar");
      params.getClassPath().add(path);
      params.setMainClass(MAIN_CLASS_NAME);
      for (      RunConfigurationExtension ext : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
        ext.updateJavaParameters(CucumberJavaRunConfiguration.this,params,getRunnerSettings());
      }
      return params;
    }
    @Nullable protected ConsoleView createConsole(    @NotNull final Executor executor,    ProcessHandler processHandler) throws ExecutionException {
      final ConsoleView testRunnerConsole;
      final String testFrameworkName="cucumber";
      final CucumberJavaRunConfiguration runConfiguration=CucumberJavaRunConfiguration.this;
      final SMTRunnerConsoleProperties consoleProperties=new SMTRunnerConsoleProperties(runConfiguration,testFrameworkName,executor);
      testRunnerConsole=SMTestRunnerConnectionUtil.createAndAttachConsole(testFrameworkName,processHandler,consoleProperties,getRunnerSettings(),getConfigurationSettings());
      return testRunnerConsole;
    }
    @Override public ExecutionResult execute(    @NotNull Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      final ProcessHandler processHandler=startProcess();
      final ConsoleView console=createConsole(executor,processHandler);
      return new DefaultExecutionResult(console,processHandler,createActions(console,processHandler,executor));
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuilderFactory.getInstance().createBuilder(getProject()));
  return state;
}
