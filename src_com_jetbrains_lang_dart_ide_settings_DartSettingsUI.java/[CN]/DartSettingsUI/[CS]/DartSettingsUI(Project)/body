{
  myProject=project;
  myPathChooser.getButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false);
      final VirtualFile file=FileChooser.chooseFile(descriptor,myMainPanel,null,null);
      if (file != null && getExecutablePathByFolderPath(file.getPath(),"dart") == null) {
        Messages.showOkCancelDialog(myProject,DartBundle.message("dart.sdk.bad.home.path.to.dartvm"),DartBundle.message("dart.sdk.name"),icons.DartIcons.Dart_16);
      }
 else       if (file != null && getExecutablePathByFolderPath(file.getPath(),"dart") != null) {
        myPathChooser.setText(FileUtil.toSystemIndependentName(file.getPath()));
        updateUI();
        if (!SystemInfo.isWindows && getSettings().getAnalyzer() == null) {
          Messages.showErrorDialog(myProject,DartBundle.message("dart.sdk.bad.analyzer.path",getSettings().getAnalyzerPath()),DartBundle.message("dart.warning"));
        }
      }
    }
  }
);
  mySetupScopeLabel.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && isDartSDKConfigured()) {
        JSLibraryManager libraryManager=ServiceManager.getService(myProject,JSLibraryManager.class);
        final JSLibraryMappings mappings=ServiceManager.getService(project,JSLibraryMappings.class);
        ShowSettingsUtil.getInstance().editConfigurable(project,new ScriptingContextsConfigurable(project,mappings));
        AccessToken writeToken=ApplicationManager.getApplication().acquireWriteActionLock(getClass());
        libraryManager.commitChanges();
        writeToken.finish();
      }
 else       if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && !isDartSDKConfigured() && isDartSDKPathValid()) {
        updateOrCreateDartLibrary();
        updateUI();
      }
    }
  }
);
}
