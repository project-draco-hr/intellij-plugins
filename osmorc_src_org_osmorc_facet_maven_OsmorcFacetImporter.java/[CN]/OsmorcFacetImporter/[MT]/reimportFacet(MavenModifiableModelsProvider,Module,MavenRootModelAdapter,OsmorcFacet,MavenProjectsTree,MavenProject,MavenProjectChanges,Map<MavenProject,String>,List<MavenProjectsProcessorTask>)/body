{
  OsmorcFacetConfiguration conf=osmorcFacet.getConfiguration();
  if (conf.isDoNotSynchronizeWithMaven()) {
    return;
  }
  MavenPlugin p=mavenProject.findPlugin(myPluginGroupID,myPluginArtifactID);
  MavenId id=mavenProject.getMavenId();
  conf.setBundleSymbolicName(id.getGroupId() + "." + id.getArtifactId());
  conf.setBundleVersion(ImporterUtil.cleanupVersion(id.getVersion()));
  if (p != null) {
    logger.debug("Plugin found.");
    conf.setBundleSymbolicName(computeSymbolicName(mavenProject));
    conf.setBundleVersion("instructions." + Constants.BUNDLE_VERSION);
    conf.setBundleActivator("instructions." + Constants.BUNDLE_ACTIVATOR);
    if (StringUtil.isEmptyOrSpaces(conf.getBundleVersion())) {
      String version=mavenProject.getMavenId().getVersion();
      conf.setBundleVersion(ImporterUtil.cleanupVersion(version));
    }
    Map<String,String> props=new LinkedHashMap<String,String>();
    Map<String,String> modelMap=mavenProject.getModelMap();
    String description=modelMap.get("description");
    if (!StringUtil.isEmptyOrSpaces(description)) {
      props.put(Constants.BUNDLE_DESCRIPTION,description);
    }
    String licenses=modelMap.get("licenses");
    if (!StringUtil.isEmptyOrSpaces(licenses)) {
      props.put("Bundle-License",licenses);
    }
    String vendor=modelMap.get("organization.name");
    if (!StringUtil.isEmpty(vendor)) {
      props.put(Constants.BUNDLE_VENDOR,vendor);
    }
    String docUrl=modelMap.get("organization.url");
    if (!StringUtil.isEmptyOrSpaces(docUrl)) {
      props.put(Constants.BUNDLE_DOCURL,docUrl);
    }
    Element instructionsNode=getConfig(mavenProject,"instructions");
    if (instructionsNode != null) {
      @SuppressWarnings({"unchecked"}) List<Element> children=instructionsNode.getChildren();
      boolean useExistingManifest=false;
      for (      Element child : children) {
        String name=child.getName();
        String value=child.getValue();
        if (IncludeExistingManifest.equals(name)) {
          conf.setManifestLocation(value);
          conf.setManifestGenerationMode(OsmorcFacetConfiguration.ManifestGenerationMode.Manually);
          conf.setUseProjectDefaultManifestFileLocation(false);
          useExistingManifest=true;
        }
        if (StringUtil.startsWithChar(name,'_')) {
          name="-" + name.substring(1);
        }
        if (null == value) {
          value="";
        }
 else {
          value=value.replaceAll("\\p{Blank}*[\r\n]\\p{Blank}*","");
        }
        if (value != null && !value.isEmpty() && !Constants.BUNDLE_SYMBOLICNAME.equals(name) && !Constants.BUNDLE_VERSION.equals(name) && !Constants.BUNDLE_ACTIVATOR.equals(name) && !IncludeExistingManifest.equals(name)) {
          props.put(name,value);
        }
      }
      if (!useExistingManifest) {
        conf.setManifestLocation("");
        conf.setManifestGenerationMode(OsmorcFacetConfiguration.ManifestGenerationMode.OsmorcControlled);
        conf.setUseProjectDefaultManifestFileLocation(true);
      }
      if (!props.containsKey(Constants.BUNDLE_NAME)) {
        props.put(Constants.BUNDLE_NAME,computeBundleName(mavenProject));
      }
    }
    ImporterUtil.postprocessAdditionalProperties(props,mavenProject);
    conf.importAdditionalProperties(props,true);
    String jarFileName=mavenProject.getFinalName() + ".jar";
switch (conf.getOutputPathType()) {
case OsgiOutputPath:
      conf.setJarFileLocation(jarFileName,OsmorcFacetConfiguration.OutputPathType.OsgiOutputPath);
    break;
case SpecificOutputPath:
  conf.setJarFileLocation(new File(conf.getJarFilePath(),jarFileName).getPath(),OsmorcFacetConfiguration.OutputPathType.SpecificOutputPath);
break;
default :
conf.setJarFileLocation(jarFileName,OsmorcFacetConfiguration.OutputPathType.CompilerOutputPath);
}
}
}
