{
  if (!recursion_guard_(builder_,level_,"map_literal_entry_recover_0_0"))   return false;
  boolean result_=false;
  Marker marker_=builder_.mark();
  result_=consumeToken(builder_,NEQ);
  if (!result_)   result_=consumeToken(builder_,NEQ_EQ);
  if (!result_)   result_=consumeToken(builder_,IS);
  if (!result_)   result_=consumeToken(builder_,REM);
  if (!result_)   result_=consumeToken(builder_,AND_AND);
  if (!result_)   result_=consumeToken(builder_,AND);
  if (!result_)   result_=consumeToken(builder_,LPAREN);
  if (!result_)   result_=consumeToken(builder_,RPAREN);
  if (!result_)   result_=consumeToken(builder_,MUL);
  if (!result_)   result_=consumeToken(builder_,PLUS);
  if (!result_)   result_=consumeToken(builder_,COMMA);
  if (!result_)   result_=consumeToken(builder_,MINUS);
  if (!result_)   result_=consumeToken(builder_,DOT);
  if (!result_)   result_=consumeToken(builder_,DIV);
  if (!result_)   result_=consumeToken(builder_,COLON);
  if (!result_)   result_=consumeToken(builder_,SEMICOLON);
  if (!result_)   result_=consumeToken(builder_,LT);
  if (!result_)   result_=consumeToken(builder_,LT_LT);
  if (!result_)   result_=consumeToken(builder_,LT_EQ);
  if (!result_)   result_=consumeToken(builder_,EQ_EQ);
  if (!result_)   result_=consumeToken(builder_,EQ_EQ_EQ);
  if (!result_)   result_=consumeToken(builder_,EXPRESSION_BODY_DEF);
  if (!result_)   result_=consumeToken(builder_,GT);
  if (!result_)   result_=consumeToken(builder_,GT_EQ);
  if (!result_)   result_=consumeToken(builder_,QUEST);
  if (!result_)   result_=consumeToken(builder_,LBRACKET);
  if (!result_)   result_=consumeToken(builder_,RBRACKET);
  if (!result_)   result_=consumeToken(builder_,XOR);
  if (!result_)   result_=consumeToken(builder_,NATIVE);
  if (!result_)   result_=consumeToken(builder_,LBRACE);
  if (!result_)   result_=consumeToken(builder_,OR);
  if (!result_)   result_=consumeToken(builder_,OR_OR);
  if (!result_)   result_=consumeToken(builder_,RBRACE);
  if (!result_)   result_=consumeToken(builder_,INT_DIV);
  if (!result_)   result_=shiftRightOperator(builder_,level_ + 1);
  if (!result_)   result_=map_literal_entry_recover_0_0_35(builder_,level_ + 1);
  if (!result_) {
    marker_.rollbackTo();
  }
 else {
    marker_.drop();
  }
  return result_;
}
