{
  if (!recursion_guard_(builder_,level_,"logicAndExpression"))   return false;
  if (!nextTokenIs(builder_,AND_AND))   return false;
  boolean result_=false;
  Marker left_marker_=(Marker)builder_.getLatestDoneMarker();
  if (!invalid_left_marker_guard_(builder_,left_marker_,"logicAndExpression"))   return false;
  Marker marker_=builder_.mark();
  result_=consumeToken(builder_,AND_AND);
  result_=result_ && compareExpressionWrapper(builder_,level_ + 1);
  if (result_) {
    marker_.drop();
    left_marker_.precede().done(LOGIC_AND_EXPRESSION);
  }
 else {
    marker_.rollbackTo();
  }
  return result_;
}
