{
  if (!recursion_guard_(builder_,level_,"assignmentOperator"))   return false;
  if (!nextTokenIs(builder_,REM_EQ) && !nextTokenIs(builder_,AND_EQ) && !nextTokenIs(builder_,MUL_EQ)&& !nextTokenIs(builder_,PLUS_EQ)&& !nextTokenIs(builder_,MINUS_EQ)&& !nextTokenIs(builder_,DIV_EQ)&& !nextTokenIs(builder_,LT_LT_EQ)&& !nextTokenIs(builder_,EQ)&& !nextTokenIs(builder_,GT_GT_EQ)&& !nextTokenIs(builder_,GT_GT_GT_EQ)&& !nextTokenIs(builder_,XOR_EQ)&& !nextTokenIs(builder_,OR_EQ)&& !nextTokenIs(builder_,INT_DIV_EQ)&& replaceVariants(builder_,13,"<assignment operator>"))   return false;
  boolean result_=false;
  Marker marker_=builder_.mark();
  enterErrorRecordingSection(builder_,level_,_SECTION_GENERAL_,"<assignment operator>");
  result_=consumeToken(builder_,EQ);
  if (!result_)   result_=consumeToken(builder_,MUL_EQ);
  if (!result_)   result_=consumeToken(builder_,DIV_EQ);
  if (!result_)   result_=consumeToken(builder_,INT_DIV_EQ);
  if (!result_)   result_=consumeToken(builder_,REM_EQ);
  if (!result_)   result_=consumeToken(builder_,PLUS_EQ);
  if (!result_)   result_=consumeToken(builder_,MINUS_EQ);
  if (!result_)   result_=consumeToken(builder_,LT_LT_EQ);
  if (!result_)   result_=consumeToken(builder_,GT_GT_GT_EQ);
  if (!result_)   result_=consumeToken(builder_,GT_GT_EQ);
  if (!result_)   result_=consumeToken(builder_,AND_EQ);
  if (!result_)   result_=consumeToken(builder_,XOR_EQ);
  if (!result_)   result_=consumeToken(builder_,OR_EQ);
  if (result_) {
    marker_.done(ASSIGNMENT_OPERATOR);
  }
 else {
    marker_.rollbackTo();
  }
  result_=exitErrorRecordingSection(builder_,level_,result_,false,_SECTION_GENERAL_,null);
  return result_;
}
