{
  final List<Location> locations=new ArrayList<Location>();
  if (psiFile instanceof DartFile) {
    PsiElementProcessor<PsiElement> collector=new PsiElementProcessor<PsiElement>(){
      @Override public boolean execute(      @NotNull final PsiElement element){
        if (element instanceof DartCallExpression) {
          DartCallExpression expression=(DartCallExpression)element;
          if (DartUnitRunConfigurationProducer.isTest(expression) || DartUnitRunConfigurationProducer.isGroup(expression)) {
            if (nodes.get(nodes.size() - 1).equals(getTestLabel(expression))) {
              boolean matches=true;
              for (int i=nodes.size() - 2; i >= 0 && matches; --i) {
                expression=getGroup(expression);
                if (expression == null || !nodes.get(i).equals(getTestLabel(expression))) {
                  matches=false;
                }
              }
              if (matches) {
                locations.add(new PsiLocation<PsiElement>(project,element));
                return false;
              }
            }
          }
        }
        return true;
      }
      @Nullable private DartCallExpression getGroup(      final DartCallExpression expression){
        return (DartCallExpression)PsiTreeUtil.findFirstParent(expression,true,new Condition<PsiElement>(){
          @Override public boolean value(          final PsiElement element){
            return element instanceof DartCallExpression && DartUnitRunConfigurationProducer.isGroup((DartCallExpression)element);
          }
        }
);
      }
    }
;
    PsiTreeUtil.processElements(psiFile,collector);
  }
  return locations;
}
