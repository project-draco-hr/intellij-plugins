{
  final List<Location> locations=new ArrayList<Location>();
  if (psiFile instanceof DartFile) {
    PsiElementProcessor<PsiElement> collector=new PsiElementProcessor<PsiElement>(){
      @Override public boolean execute(      @NotNull final PsiElement element){
        if (element instanceof DartCallExpression) {
          DartCallExpression expression=(DartCallExpression)element;
          if (isLabeled(expression,"test")) {
            if (nameMatches(expression,nodes[nodes.length - 1])) {
              boolean matches=true;
              for (int i=nodes.length - 2; i >= 0 && matches; --i) {
                expression=getGroup(expression);
                if (expression == null || !nameMatches(expression,nodes[i])) {
                  matches=false;
                }
              }
              if (matches) {
                locations.add(new PsiLocation<PsiElement>(project,element));
                return false;
              }
            }
          }
        }
        return true;
      }
      private DartCallExpression getGroup(      final DartCallExpression expression){
        return (DartCallExpression)PsiTreeUtil.findFirstParent(expression,true,new Condition<PsiElement>(){
          @Override public boolean value(          final PsiElement element){
            return element instanceof DartCallExpression && isLabeled((DartCallExpression)element,"group");
          }
        }
);
      }
      private boolean nameMatches(      final DartCallExpression expression,      final String name){
        final DartArguments args=expression.getArguments();
        final DartArgumentList argumentList=args.getArgumentList();
        if (argumentList != null) {
          final PsiElement firstArg=argumentList.getFirstChild();
          if (firstArg instanceof DartStringLiteralExpression) {
            final PsiElement textElement=firstArg.getFirstChild().getNextSibling();
            if (textElement != null) {
              return textElement.getText().equals(name);
            }
          }
        }
        return false;
      }
      private boolean isLabeled(      final DartCallExpression element,      String label){
        final PsiElement child=element.getFirstChild();
        return child != null && child.getText().equals(label);
      }
    }
;
    PsiTreeUtil.processElements(psiFile,collector);
  }
  return locations;
}
