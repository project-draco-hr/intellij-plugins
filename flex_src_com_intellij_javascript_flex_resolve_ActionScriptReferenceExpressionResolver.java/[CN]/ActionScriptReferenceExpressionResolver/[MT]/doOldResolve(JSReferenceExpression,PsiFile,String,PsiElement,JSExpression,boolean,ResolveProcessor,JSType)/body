{
  final WalkUpResolveProcessor processor=new WalkUpResolveProcessor(referencedName,null,containingFile,ref,BaseJSSymbolProcessor.MatchMode.Strict);
  final JSTypeSource source;
  processor.setAccessingStaticOrInstance(qualifierType != null && (source=qualifierType.getSource()) != null ? source.isStaticOrInstance() : JSTypeSource.StaticOrInstance.UNKNOWN);
  boolean inDefinition=false;
  boolean allowOnlyCompleteMatches=localResolve && localProcessor.isEncounteredDynamicClasses();
  if (parent instanceof JSDefinitionExpression) {
    inDefinition=true;
    if (localResolve && localProcessor.processingEncounteredAnyTypeAccess())     allowOnlyCompleteMatches=false;
 else     allowOnlyCompleteMatches=true;
  }
 else   if (qualifier instanceof JSThisExpression && localProcessor.processingEncounteredAnyTypeAccess()) {
    processor.allowPartialResults();
  }
  if (inDefinition || allowOnlyCompleteMatches) {
    processor.setAddOnlyCompleteMatches(allowOnlyCompleteMatches);
  }
  processor.setSkipDefinitions(inDefinition);
  if (localProcessor != null)   processor.addLocalResults(localProcessor.getResultsAsResolveResults());
  JavaScriptIndex instance=JavaScriptIndex.getInstance(containingFile.getProject());
  instance.processAllSymbols(processor);
  ResolveResult[] results=processor.getResults();
  if (results.length == 0) {
    if (inDefinition) {
      return new ResolveResult[]{new JSResolveResult(parent)};
    }
 else {
      if (processor.getLimitingScope() != null) {
        processor.resetLimitingScope();
        instance.processAllSymbols(processor);
        results=processor.getResults();
      }
    }
  }
  return results;
}
