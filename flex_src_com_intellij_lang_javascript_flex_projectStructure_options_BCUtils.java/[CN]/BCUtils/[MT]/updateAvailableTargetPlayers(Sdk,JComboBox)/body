{
  if (currentSdk != null && currentSdk.getSdkType() instanceof FlexmojosSdkType)   return;
  final String sdkHome=currentSdk == null ? null : currentSdk.getHomePath();
  final String playerFolderPath=sdkHome == null ? null : sdkHome + "/frameworks/libs/player";
  if (playerFolderPath != null) {
    final VirtualFile playerDir=ApplicationManager.getApplication().runWriteAction(new NullableComputable<VirtualFile>(){
      public VirtualFile compute(){
        final VirtualFile playerFolder=LocalFileSystem.getInstance().refreshAndFindFileByPath(playerFolderPath);
        if (playerFolder != null && playerFolder.isDirectory()) {
          playerFolder.refresh(false,true);
          return playerFolder;
        }
        return null;
      }
    }
);
    if (playerDir != null) {
      final Collection<String> availablePlayers=new ArrayList<String>(2);
      FlexSdkUtils.processPlayerglobalSwcFiles(playerDir,new Processor<VirtualFile>(){
        public boolean process(        final VirtualFile playerglobalSwcFile){
          availablePlayers.add(playerglobalSwcFile.getParent().getName());
          return true;
        }
      }
);
      final Object selectedItem=targetPlayerCombo.getSelectedItem();
      final String[] availablePlayersArray=ArrayUtil.toStringArray(availablePlayers);
      targetPlayerCombo.setModel(new DefaultComboBoxModel(availablePlayersArray));
      if (selectedItem != null && availablePlayers.contains(selectedItem)) {
        targetPlayerCombo.setSelectedItem(selectedItem);
      }
 else {
        targetPlayerCombo.setSelectedItem(TargetPlayerUtils.getMaximumVersion(availablePlayersArray));
      }
    }
  }
 else {
    targetPlayerCombo.setModel(new DefaultComboBoxModel(ArrayUtil.EMPTY_STRING_ARRAY));
  }
}
