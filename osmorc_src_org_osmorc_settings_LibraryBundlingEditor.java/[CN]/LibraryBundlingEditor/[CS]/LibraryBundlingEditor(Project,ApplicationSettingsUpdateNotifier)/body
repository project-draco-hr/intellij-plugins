{
  this.project=project;
  this.applicationSettingsUpdateNotifier=applicationSettingsUpdateNotifier;
  addRuleButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      List<LibraryBundlificationRule> list=getApplicationSettingsWorkingCopy().getLibraryBundlificationRules();
      LibraryBundlificationRule newRule=new LibraryBundlificationRule();
      list.add(newRule);
      selectedRule.fireIntervalAdded(list.size() - 1,list.size() - 1);
      selectedRule.setSelection(newRule);
      notifyChanged();
    }
  }
);
  removeRuleButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      List<LibraryBundlificationRule> list=getApplicationSettingsWorkingCopy().getLibraryBundlificationRules();
      if (list.size() == 1) {
        LibraryBundlificationRule newRule=new LibraryBundlificationRule();
        list.set(0,newRule);
        selectedRule.fireContentsChanged(0,1);
        selectedRule.setSelection(newRule);
      }
 else {
        int oldSelectionIndex=selectedRule.getSelectionIndex();
        list.remove(selectedRule.getValue());
        selectedRule.fireIntervalRemoved(list.size(),list.size());
        final int newSelectionIndex=oldSelectionIndex > 0 ? oldSelectionIndex - 1 : oldSelectionIndex;
        if (newSelectionIndex == oldSelectionIndex) {
          selectedRule.clearSelection();
        }
        selectedRule.setSelectionIndex(newSelectionIndex);
      }
      notifyChanged();
    }
  }
);
  duplicateButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      LibraryBundlificationRule rule=selectedRule.getSelection();
      if (rule != null) {
        LibraryBundlificationRule newRule=rule.copy();
        List<LibraryBundlificationRule> list=getApplicationSettingsWorkingCopy().getLibraryBundlificationRules();
        int selectedIndex=selectedRule.getSelectionIndex();
        list.add(selectedIndex,newRule);
        selectedRule.fireIntervalAdded(selectedIndex,selectedIndex);
        notifyChanged();
      }
    }
  }
);
  upButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      List<LibraryBundlificationRule> list=getApplicationSettingsWorkingCopy().getLibraryBundlificationRules();
      int selectionIndex=selectedRule.getSelectionIndex();
      if (selectionIndex > 0) {
        LibraryBundlificationRule ruleToMove=list.get(selectionIndex);
        list.set(selectionIndex,list.get(selectionIndex - 1));
        list.set(selectionIndex - 1,ruleToMove);
        selectedRule.fireContentsChanged(selectionIndex - 1,selectionIndex);
        selectedRule.setSelectionIndex(selectionIndex - 1);
        notifyChanged();
      }
    }
  }
);
  downButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      List<LibraryBundlificationRule> list=getApplicationSettingsWorkingCopy().getLibraryBundlificationRules();
      int selectionIndex=selectedRule.getSelectionIndex();
      if (selectionIndex < list.size() - 1) {
        LibraryBundlificationRule ruleToMove=list.get(selectionIndex);
        list.set(selectionIndex,list.get(selectionIndex + 1));
        list.set(selectionIndex + 1,ruleToMove);
        selectedRule.fireContentsChanged(selectionIndex,selectionIndex + 1);
        selectedRule.setSelectionIndex(selectionIndex + 1);
        notifyChanged();
      }
    }
  }
);
}
