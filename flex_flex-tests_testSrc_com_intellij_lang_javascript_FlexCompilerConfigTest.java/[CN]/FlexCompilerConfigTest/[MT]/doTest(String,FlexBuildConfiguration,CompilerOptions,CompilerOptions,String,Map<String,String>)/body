{
  final Sdk testSdk=WriteCommandAction.runWriteCommandAction(null,new Computable<Sdk>(){
    public Sdk compute(){
      final Sdk testSdk=createTestSdk(sdkVersion);
      ProjectJdkTable.getInstance().addJdk(testSdk);
      return testSdk;
    }
  }
);
  try {
    final Constructor<CompilerConfigGenerator> constructor=CompilerConfigGenerator.class.getDeclaredConstructor(Module.class,FlexBuildConfiguration.class,CompilerOptions.class,CompilerOptions.class);
    constructor.setAccessible(true);
    final CompilerConfigGenerator configGenerator=constructor.newInstance(getModule(),bc,moduleLevelOptions,projectLevelOptions);
    final Method method=CompilerConfigGenerator.class.getDeclaredMethod("generateConfigFileText");
    method.setAccessible(true);
    String text=(String)method.invoke(configGenerator);
    if (bc.isTempBCForCompilation()) {
      text=FlexCompilerConfigFileUtilBase.mergeWithCustomConfigFile(text,bc.getCompilerOptions().getAdditionalConfigFilePath(),true,false);
    }
    VirtualFile expectedFile=getVirtualFile(getTestName(false) + suffix + ".xml");
    String expectedText=StringUtil.convertLineSeparators(VfsUtilCore.loadText(expectedFile));
    assertEquals(expectedFile.getName(),replaceMacros(expectedText,bc.getSdk(),additionalMacros),text);
  }
  finally {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        ProjectJdkTable.getInstance().removeJdk(testSdk);
      }
    }
);
  }
}
