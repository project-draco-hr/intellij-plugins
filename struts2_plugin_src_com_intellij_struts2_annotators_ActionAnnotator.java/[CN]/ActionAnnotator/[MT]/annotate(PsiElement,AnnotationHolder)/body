{
  if (!(psiElement instanceof PsiIdentifier)) {
    return;
  }
  final PsiElement parentPsiElement=psiElement.getParent();
  if (!(parentPsiElement instanceof PsiClass)) {
    return;
  }
  if (psiElement.getContainingFile().getFileType() != StdFileTypes.JAVA) {
    return;
  }
  final PsiClass clazz=(PsiClass)parentPsiElement;
  if (clazz.isInterface() || clazz.isAnnotationType() || !clazz.hasModifierProperty(PsiModifier.PUBLIC)|| clazz.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  final Module module=ModuleUtil.findModuleForPsiElement(clazz);
  if (module == null || StrutsFacet.getInstance(module) == null) {
    return;
  }
  final StrutsManager strutsManager=StrutsManager.getInstance(psiElement.getProject());
  final StrutsModel strutsModel=strutsManager.getCombinedModel(module);
  if (strutsModel == null) {
    return;
  }
  final List<Action> actions=strutsModel.findActionsByClass(clazz);
  if (!actions.isEmpty()) {
    NavigationGutterIconBuilder.create(StrutsIcons.ACTION,NavigationGutterIconBuilder.DEFAULT_DOM_CONVERTOR).setPopupTitle(StrutsBundle.message("annotators.action.goto.declaration")).setTargets(actions).setTooltipTitle(StrutsBundle.message("annotators.action.goto.tooltip")).setCellRenderer(ACTION_RENDERER).install(holder,clazz.getNameIdentifier());
  }
}
