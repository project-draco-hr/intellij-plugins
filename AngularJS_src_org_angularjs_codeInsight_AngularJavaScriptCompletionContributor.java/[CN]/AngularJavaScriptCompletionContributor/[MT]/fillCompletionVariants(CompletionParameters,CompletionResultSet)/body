{
  if (AngularJSCompletionContributor.getElementLanguage(parameters).isKindOf(JavascriptLanguage.INSTANCE)) {
    if (parameters.getOriginalPosition() != null && parameters.getOriginalPosition().getParent() instanceof JSLiteralExpression) {
      final JSLiteralExpression literal=(JSLiteralExpression)parameters.getOriginalPosition().getParent();
      if (isControllerPropertyValue(literal)) {
        final String prefix=result.getPrefixMatcher().getPrefix();
        if (StringUtil.isEmptyOrSpaces(prefix))         return;
        final String[] parts=prefix.split(" ");
        result.addElement(LookupElementBuilder.create(parts[0] + AngularJSIndexingHandler.AS_CONNECTOR_WITH_SPACES));
        return;
      }
    }
    final PsiElement originalPosition=parameters.getOriginalPosition();
    if (AngularJSReferencesContributor.UI_VIEW_PATTERN.accepts(originalPosition)) {
      final FileBasedIndex instance=FileBasedIndex.getInstance();
      final Project project=originalPosition.getProject();
      final Collection<String> keys=instance.getAllKeys(AngularUiRouterViewsIndex.UI_ROUTER_VIEWS_CACHE_INDEX,project);
      for (      String key : keys) {
        if (StringUtil.isEmptyOrSpaces(key)) {
          continue;
        }
        final LookupElementBuilder builder=LookupElementBuilder.create(key).withTailText(" (angular-ui-router ui-view)",true);
        final LookupElement item=PrioritizedLookupElement.withPriority(builder,JSLookupPriority.LOCAL_SCOPE_MAX_PRIORITY);
        result.addElement(item);
      }
    }
  }
}
