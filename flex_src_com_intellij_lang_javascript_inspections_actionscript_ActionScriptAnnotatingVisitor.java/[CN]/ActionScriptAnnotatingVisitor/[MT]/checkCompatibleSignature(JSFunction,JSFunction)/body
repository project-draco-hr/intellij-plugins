{
  JSParameterList nodeParameterList=fun.getParameterList();
  JSParameterList overrideParameterList=override.getParameterList();
  final JSParameter[] parameters=nodeParameterList != null ? nodeParameterList.getParameterVariables() : JSParameter.EMPTY_ARRAY;
  final JSParameter[] overrideParameters=overrideParameterList != null ? overrideParameterList.getParameterVariables() : JSParameter.EMPTY_ARRAY;
  SignatureMatchResult result=parameters.length != overrideParameters.length ? SignatureMatchResult.PARAMETERS_DIFFERS : SignatureMatchResult.COMPATIBLE_SIGNATURE;
  if (result == SignatureMatchResult.COMPATIBLE_SIGNATURE) {
    for (int i=0; i < parameters.length; ++i) {
      if (!compatibleType(overrideParameters[i].getTypeString(),parameters[i].getTypeString(),overrideParameterList,nodeParameterList) || overrideParameters[i].hasInitializer() != parameters[i].hasInitializer()) {
        result=SignatureMatchResult.PARAMETERS_DIFFERS;
        break;
      }
    }
  }
  if (result == SignatureMatchResult.COMPATIBLE_SIGNATURE) {
    if (!compatibleType(override.getReturnTypeString(),fun.getReturnTypeString(),override,fun)) {
      result=SignatureMatchResult.RETURN_TYPE_DIFFERS;
    }
  }
  if (result == SignatureMatchResult.COMPATIBLE_SIGNATURE) {
    if (override.getKind() != fun.getKind())     result=SignatureMatchResult.FUNCTION_KIND_DIFFERS;
  }
  return result;
}
