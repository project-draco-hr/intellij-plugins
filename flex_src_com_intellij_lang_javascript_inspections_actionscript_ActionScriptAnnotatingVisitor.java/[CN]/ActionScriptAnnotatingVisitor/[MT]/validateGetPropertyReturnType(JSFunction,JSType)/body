{
  if (type instanceof JSVoidType) {
    final String typeString=type != null ? type.getTypeText(JSType.TypeTextFormat.PRESENTABLE) : "empty";
    myHolder.createErrorAnnotation(type != null ? function.getReturnTypeElement() : getPlaceForNamedElementProblem(function),JSBundle.message("javascript.validation.message.get.method.should.be.valid.type",typeString));
  }
 else {
    PsiElement element=JSResolveUtil.findParent(function);
    if (element instanceof JSClass && !isBindable((JSClass)element)) {
      JSFunction setter=((JSClass)element).findFunctionByNameAndKind(function.getName(),JSFunction.FunctionKind.SETTER);
      if (setter != null) {
        JSParameterList setterParameterList=setter.getParameterList();
        JSParameter[] setterParameters=setterParameterList != null ? setterParameterList.getParameters() : JSParameter.EMPTY_ARRAY;
        JSType setterType;
        if (setterParameters.length == 1 && !((setterType=setterParameters[0].getType()) instanceof JSAnyType) && !(type instanceof JSAnyType) && !JSTypeUtils.areTypesCompatible(setterType,type,null,function)) {
          PsiElement typeElement=function.getReturnTypeElement();
          myHolder.createErrorAnnotation(typeElement != null ? typeElement : getPlaceForNamedElementProblem(function),JSBundle.message("javascript.validation.message.get.method.type.is.different.from.setter",setterType != null ? setterType.getTypeText(JSType.TypeTextFormat.PRESENTABLE) : "empty"));
        }
        checkAccessorAccessTypeMatch(function,setter,"javascript.validation.message.get.method.access.type.is.different.from.setter");
      }
    }
  }
}
