{
  super.visitJSBinaryExpression(node);
  IElementType sign=node.getOperationSign();
  JSExpression lOperand=node.getLOperand();
  if (lOperand == null)   return;
  final JSExpression rOperand=node.getROperand();
  if (rOperand == null)   return;
  if (sign == JSTokenTypes.AS_KEYWORD || sign == JSTokenTypes.IS_KEYWORD) {
    if (rOperand instanceof JSReferenceExpression) {
      ResolveResult[] results=((JSReferenceExpression)rOperand).multiResolve(false);
      PsiElement resolve;
      if (results.length > 0 && ((resolve=results[0].getElement()) instanceof JSVariable || resolve instanceof JSFunction)) {
        checkIfProperTypeReference(rOperand);
      }
    }
 else {
      checkIfProperTypeReference(rOperand);
    }
  }
 else   if (JSTokenTypes.MULTIPLICATIVE_OPERATIONS.contains(sign) || JSTokenTypes.SHIFT_OPERATIONS.contains(sign) || sign == JSTokenTypes.MINUS) {
    final JSType numberType=JSNamedType.createType(NUMBER_CLASS_NAME,JSTypeSourceFactory.createTypeSource(lOperand,true),JSNamedType.StaticOrInstance.INSTANCE);
    myTypeChecker.checkExpressionIsAssignableToType(lOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null);
    myTypeChecker.checkExpressionIsAssignableToType(rOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null);
  }
}
