{
  if (VOID_TYPE_NAME.equals(typeString)) {
    myHolder.createErrorAnnotation(typeString != null ? function.getReturnTypeElement() : nameIdentifier.getPsi(),JSBundle.message("javascript.validation.message.get.method.should.be.valid.type",typeString != null ? typeString : "empty"));
  }
 else {
    PsiElement element=JSResolveUtil.findParent(function);
    if (element instanceof JSClass && !isBindable((JSClass)element)) {
      JSFunction setter=((JSClass)element).findFunctionByNameAndKind(function.getName(),JSFunction.FunctionKind.SETTER);
      if (setter != null) {
        JSParameterList setterParameterList=setter.getParameterList();
        JSParameter[] setterParameters=setterParameterList != null ? setterParameterList.getParameters() : JSParameter.EMPTY_ARRAY;
        String setterType;
        if (setterParameters.length == 1 && !JSCommonTypeNames.ANY_TYPE.equals(setterType=setterParameters[0].getTypeString()) && !JSCommonTypeNames.ANY_TYPE.equals(typeString) && !compatibleType(setterType,typeString,setterParameters[0],function)) {
          PsiElement typeElement=function.getReturnTypeElement();
          myHolder.createErrorAnnotation(typeElement != null ? typeElement : function.findNameIdentifier().getPsi(),JSBundle.message("javascript.validation.message.get.method.type.is.different.from.setter",setterType != null ? setterType : "empty"));
        }
        checkAccessorAccessTypeMatch(function,setter,"javascript.validation.message.get.method.access.type.is.different.from.setter");
      }
    }
  }
}
