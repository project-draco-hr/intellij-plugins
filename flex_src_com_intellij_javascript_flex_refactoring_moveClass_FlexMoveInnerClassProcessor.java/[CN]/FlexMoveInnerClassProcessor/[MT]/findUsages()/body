{
  final Collection<UsageInfo> result=Collections.synchronizedCollection(new ArrayList<UsageInfo>());
  ReferencesSearch.search(myElement,new LocalSearchScope(myElement.getContainingFile())).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      final PsiElement element=reference.getElement();
      if (!(element instanceof JSReferenceExpression)) {
        return true;
      }
      if (JSResolveUtil.isSelfReference(element)) {
        return true;
      }
      result.add(new UsageInfo(element));
      return true;
    }
  }
);
  if (myElement instanceof JSClass) {
    JSRefactoringUtil.addConstuctorUsages((JSClass)myElement,true,result);
  }
  TextOccurrencesUtil.findNonCodeUsages(myElement,myElement.getName(),mySearchInComments,mySearchTextOccurences,StringUtil.getQualifiedName(myPackageName,myClassName),result);
  return UsageViewUtil.removeDuplicatedUsages(result.toArray(new UsageInfo[result.size()]));
}
