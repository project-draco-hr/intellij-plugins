{
  List<Library> libraries=getFrameworkLibraries(frameworkInstanceDefinition);
  for (  Library library : libraries) {
    String[] urls=library.getUrls(OrderRootType.CLASSES);
    for (    String url : urls) {
      if (useUpdateConfigurator) {
        if (url.contains("org.eclipse.equinox.common_")) {
          SelectedBundle bundle=createSelectedFrameworkBundle(url);
          bundle.setStartLevel(2);
          bundle.setStartAfterInstallation(true);
          bundlesToDeploy.add(bundle);
        }
 else         if (url.contains("org.eclipse.update.configurator_")) {
          SelectedBundle bundle=createSelectedFrameworkBundle(url);
          bundle.setStartLevel(3);
          bundle.setStartAfterInstallation(true);
          bundlesToDeploy.add(bundle);
        }
 else         if (url.contains("org.eclipse.core.runtime_")) {
          SelectedBundle bundle=createSelectedFrameworkBundle(url);
          bundle.setStartLevel(4);
          bundle.setStartAfterInstallation(true);
          bundlesToDeploy.add(bundle);
        }
      }
 else {
        if (url.contains("org.eclipse.core.runtime_")) {
          SelectedBundle bundle=createSelectedFrameworkBundle(url);
          bundle.setStartLevel(4);
          bundle.setStartAfterInstallation(true);
          bundlesToDeploy.add(bundle);
        }
 else         if (!url.contains("org.eclipse.update.configurator_") && !url.contains("org.eclipse.osgi_")) {
          SelectedBundle bundle=createSelectedFrameworkBundle(url);
          bundle.setStartLevel(4);
          bundle.setStartAfterInstallation(false);
          bundlesToDeploy.add(bundle);
        }
      }
    }
  }
}
