{
  Map<String,AnnotationBackedDescriptor> map;
  Map<String,Map<String,AnnotationBackedDescriptor>> packageToInternalDescriptors;
synchronized (CodeContext.class) {
    map=myDescriptors;
    packageToInternalDescriptors=myPackageToInternalDescriptors;
    if (map != null && packageToInternalDescriptors != null)     return;
    map=new THashMap<>();
    packageToInternalDescriptors=new THashMap<>();
    Set<PsiElement> processedElements=null;
    if (element instanceof XmlBackedJSClassImpl) {
      element=element.getParent().getContainingFile();
    }
    if (element instanceof XmlFile && MxmlJSClass.isFxgFile((PsiFile)element)) {
      element=XmlBackedJSClassFactory.getXmlBackedClass((XmlFile)element);
    }
    while (element instanceof XmlFile) {
      final XmlDocument document=((XmlFile)element).getDocument();
      final XmlTag rootTag=document != null ? document.getRootTag() : null;
      final XmlElementDescriptor descriptor=rootTag != null ? rootTag.getDescriptor() : null;
      if (processedElements == null)       processedElements=new THashSet<>();
      processedElements.add(element);
      element=descriptor != null ? descriptor.getDeclaration() : null;
      if (processedElements.contains(element))       break;
      collectMxmlAttributes(map,packageToInternalDescriptors,rootTag);
    }
    if (element instanceof JSNamedElement) {
      JSNamedElement jsClass=(JSNamedElement)element;
      jsClass=(JSNamedElement)JSResolveUtil.unwrapProxy(jsClass);
      if (visited == null || !visited.contains(jsClass)) {
        if (!MxmlJSClass.XML_TAG_NAME.equals(jsClass.getName()) && !MxmlJSClass.XMLLIST_TAG_NAME.equals(jsClass.getName())) {
          JSReferenceList extendsList=jsClass instanceof JSClass ? ((JSClass)jsClass).getExtendsList() : null;
          if (extendsList != null) {
            final JSClass clazz=(JSClass)jsClass;
            if (visited == null) {
              visited=new THashSet<>();
            }
            visited.add(clazz);
            for (            JSClass superClazz : clazz.getSuperClasses()) {
              appendSuperClassDescriptors(map,packageToInternalDescriptors,superClazz,visited);
            }
          }
 else           if (!OBJECT_CLASS_NAME.equals(jsClass.getName()) && CodeContext.isStdNamespace(context.namespace)) {
            appendSuperClassDescriptors(map,packageToInternalDescriptors,JSResolveUtil.unwrapProxy(ActionScriptClassResolver.findClassByQNameStatic(OBJECT_CLASS_NAME,jsClass)),visited);
          }
        }
        collectMyAttributes(jsClass,map,packageToInternalDescriptors);
      }
    }
    myDescriptors=map;
    myPackageToInternalDescriptors=packageToInternalDescriptors;
  }
}
