{
  if (!isOnTheFly)   return ProblemDescriptor.EMPTY_ARRAY;
  if (file.getLanguage() != DartLanguage.INSTANCE && !PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName())) {
    return ProblemDescriptor.EMPTY_ARRAY;
  }
  final Module module=ModuleUtilCore.findModuleForPsiElement(file);
  if (module == null)   return ProblemDescriptor.EMPTY_ARRAY;
  final DartSdk sdk=DartSdk.getDartSdk(file.getProject());
  if (sdk == null) {
    return createProblemDescriptors(file,manager,DartBundle.message("dart.sdk.is.not.configured"),new OpenDartSettingsQuickFix(DartBundle.message("setup.dart.sdk")));
  }
  if (!DartSdkGlobalLibUtil.isDartSdkGlobalLibAttached(module,sdk.getGlobalLibName())) {
    final String message=DartSdkGlobalLibUtil.isIdeWithMultipleModuleSupport() ? DartBundle.message("dart.support.is.not.enabled.for.module.0",module.getName()) : DartBundle.message("dart.support.is.not.enabled.for.project");
    return createProblemDescriptors(file,manager,message,new EnableDartSupportQuickFix(module,sdk.getGlobalLibName()),new OpenDartSettingsQuickFix(DartBundle.message("open.dart.settings")));
  }
  if (StringUtil.compareVersionNumbers(sdk.getVersion(),DartAnalysisServerService.MIN_SDK_VERSION) < 0) {
    final String message=DartBundle.message("old.dart.sdk.configured",DartAnalysisServerService.MIN_SDK_VERSION,sdk.getVersion());
    return createProblemDescriptors(file,manager,message,new OpenWebPageFix(DartBundle.message("download.dart.sdk"),"http://www.dartlang.org"),new OpenDartSettingsQuickFix(DartBundle.message("open.dart.settings")));
  }
  return ProblemDescriptor.EMPTY_ARRAY;
}
