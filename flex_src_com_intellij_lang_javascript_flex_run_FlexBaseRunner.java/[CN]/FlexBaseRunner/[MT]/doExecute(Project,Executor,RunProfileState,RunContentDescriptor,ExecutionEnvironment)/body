{
  FileDocumentManager.getInstance().saveAllDocuments();
  final RunProfile runProfile=env.getRunProfile();
  final boolean isDebug=this instanceof FlexDebugRunner;
  try {
    if (runProfile instanceof RunProfileWithCompileBeforeLaunchOption) {
      checkMakeBeforeRunEnabled(project,runProfile);
    }
    if (runProfile instanceof RemoteFlashRunConfiguration) {
      final BCBasedRunnerParameters params=((RemoteFlashRunConfiguration)runProfile).getRunnerParameters();
      final Pair<Module,FlexBuildConfiguration> moduleAndBC=params.checkAndGetModuleAndBC(project);
      return launchDebugProcess(moduleAndBC.first,moduleAndBC.second,params,executor,contentToReuse,env);
    }
    if (runProfile instanceof FlexUnitRunConfiguration) {
      final FlexUnitRunnerParameters params=((FlexUnitRunConfiguration)runProfile).getRunnerParameters();
      final Pair<Module,FlexBuildConfiguration> moduleAndConfig=params.checkAndGetModuleAndBC(project);
      final Module module=moduleAndConfig.first;
      final FlexBuildConfiguration bc=moduleAndConfig.second;
      if (bc.getTargetPlatform() == TargetPlatform.Web) {
        FlashPlayerTrustUtil.updateTrustedStatus(module,bc,isDebug,params.isTrusted());
        return launchWebFlexUnit(project,executor,contentToReuse,env,params,bc.getActualOutputFilePath());
      }
 else {
        return launchAirFlexUnit(project,executor,state,contentToReuse,env,params);
      }
    }
    if (runProfile instanceof FlashRunConfiguration) {
      final FlashRunnerParameters params=((FlashRunConfiguration)runProfile).getRunnerParameters();
      params.setDeviceInfo(null);
      final Pair<Module,FlexBuildConfiguration> moduleAndConfig=params.checkAndGetModuleAndBC(project);
      final Module module=moduleAndConfig.first;
      final FlexBuildConfiguration bc=moduleAndConfig.second;
      if (bc.isSkipCompile()) {
        showBCCompilationSkippedWarning(module,bc);
      }
      if (isDebug && SystemInfo.isMac && bc.getTargetPlatform() == TargetPlatform.Web) {
        checkDebuggerFromSdk4(project,runProfile,params,bc);
      }
      if (bc.getTargetPlatform() == TargetPlatform.Web && !params.isLaunchUrl()) {
        FlashPlayerTrustUtil.updateTrustedStatus(module,bc,isDebug,params.isRunTrusted());
      }
      return launchFlexConfig(module,bc,params,executor,state,contentToReuse,env);
    }
  }
 catch (  RuntimeConfigurationError e) {
    throw new ExecutionException(e.getMessage());
  }
  return null;
}
