{
  FileDocumentManager.getInstance().saveAllDocuments();
  final RunProfile runProfile=env.getRunProfile();
  final boolean isDebug=this instanceof FlexDebugRunner;
  try {
    if (runProfile instanceof RemoteFlashRunConfiguration) {
      final BCBasedRunnerParameters params=((RemoteFlashRunConfiguration)runProfile).getRunnerParameters();
      final Pair<Module,FlexIdeBuildConfiguration> moduleAndBC=params.checkAndGetModuleAndBC(project);
      return launchDebugProcess(moduleAndBC.first,moduleAndBC.second,params,executor,contentToReuse,env);
    }
    if (runProfile instanceof NewFlexUnitRunConfiguration) {
      final NewFlexUnitRunnerParameters params=((NewFlexUnitRunConfiguration)runProfile).getRunnerParameters();
      final Pair<Module,FlexIdeBuildConfiguration> moduleAndConfig=params.checkAndGetModuleAndBC(project);
      final Module module=moduleAndConfig.first;
      final FlexIdeBuildConfiguration bc=moduleAndConfig.second;
      if (bc.getTargetPlatform() == TargetPlatform.Web) {
        final String outputFilePath=bc.getOutputFilePath(true);
        try {
          final String canonicalPath=new File(PathUtil.getParentPath(outputFilePath)).getCanonicalPath();
          FlashPlayerTrustUtil.updateTrustedStatus(module.getProject(),params.isTrusted(),false,canonicalPath);
        }
 catch (        IOException e) {
        }
        return launchWebFlexUnit(project,executor,contentToReuse,env,params,outputFilePath);
      }
 else {
        return launchAirFlexUnit(project,executor,state,contentToReuse,env,params);
      }
    }
    if (runProfile instanceof FlashRunConfiguration) {
      final FlashRunnerParameters params=((FlashRunConfiguration)runProfile).getRunnerParameters();
      final Pair<Module,FlexIdeBuildConfiguration> moduleAndConfig=params.checkAndGetModuleAndBC(project);
      final Module module=moduleAndConfig.first;
      final FlexIdeBuildConfiguration bc=moduleAndConfig.second;
      if (bc.getTargetPlatform() == TargetPlatform.Web && !params.isLaunchUrl()) {
        try {
          final String canonicalPath=new File(PathUtil.getParentPath(bc.getOutputFilePath(true))).getCanonicalPath();
          FlashPlayerTrustUtil.updateTrustedStatus(module.getProject(),params.isRunTrusted(),isDebug,canonicalPath);
        }
 catch (        IOException e) {
        }
      }
      return launchFlexIdeConfig(module,bc,params,executor,state,contentToReuse,env);
    }
  }
 catch (  RuntimeConfigurationError e) {
    throw new ExecutionException(e.getMessage());
  }
  final FlexRunnerParameters flexRunnerParameters=(((FlexRunConfiguration)runProfile)).getRunnerParameters();
  final Module module=ModuleManager.getInstance(project).findModuleByName(flexRunnerParameters.getModuleName());
  final Sdk flexSdk=module == null ? null : FlexUtils.getSdkForActiveBC(module);
  if (flexSdk == null) {
    throw new CantRunException(FlexBundle.message("cannot.find.flex.sdk"));
  }
  final boolean ok=isRunAsAir(flexRunnerParameters) ? checkAirParams((AirRunnerParameters)flexRunnerParameters,flexSdk,isDebug) : checkFlexParams(module,flexRunnerParameters);
  if (ok) {
    if (isDebug) {
      checkDebugInfoEnabled((FlexRunConfiguration)runProfile);
    }
    if (needToCheckThatCompilationEnabled(flexRunnerParameters)) {
      checkIfCompilationEnabled(module,(FlexRunConfiguration)runProfile,isDebug);
    }
  }
  return null;
}
