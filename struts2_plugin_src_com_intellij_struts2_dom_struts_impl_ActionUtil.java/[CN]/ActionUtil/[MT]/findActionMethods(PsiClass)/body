{
  final Module module=ModuleUtil.findModuleForPsiElement(actionClass);
  if (module == null) {
    return Collections.emptyList();
  }
  final GlobalSearchScope scope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module,false);
  final PsiElementFactory psiElementFactory=JavaPsiFacade.getInstance(actionClass.getProject()).getElementFactory();
  final PsiClassType stringType=psiElementFactory.createTypeByFQClassName(CommonClassNames.JAVA_LANG_STRING,scope);
  final PsiClassType resultType=psiElementFactory.createTypeByFQClassName("com.opensymphony.xwork2.Result",scope);
  final List<PsiMethod> actionMethods=new SmartList<PsiMethod>();
  for (  final PsiMethod psiMethod : actionClass.getAllMethods()) {
    if (psiMethod.isConstructor()) {
      continue;
    }
    final PsiModifierList modifiers=psiMethod.getModifierList();
    if (!modifiers.hasModifierProperty(PsiModifier.PUBLIC) || modifiers.hasModifierProperty(PsiModifier.STATIC) || modifiers.hasModifierProperty(PsiModifier.ABSTRACT)) {
      continue;
    }
    if (psiMethod.getParameterList().getParametersCount() != 0) {
      continue;
    }
    if (Comparing.equal(psiMethod.getName(),"toString")) {
      continue;
    }
    if (PropertyUtil.isSimplePropertyGetter(psiMethod) && actionClass.findFieldByName(PropertyUtil.getPropertyName(psiMethod),true) != null) {
      continue;
    }
    final PsiType type=psiMethod.getReturnType();
    if (type != null && type instanceof PsiClassType && (type.equals(stringType) || type.equals(resultType))) {
      actionMethods.add(psiMethod);
    }
  }
  return actionMethods;
}
