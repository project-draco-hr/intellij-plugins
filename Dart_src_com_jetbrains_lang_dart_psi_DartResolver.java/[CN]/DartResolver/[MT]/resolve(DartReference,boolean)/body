{
  if (reference instanceof DartThisExpression) {
    return toResult(PsiTreeUtil.getParentOfType(reference,DartClass.class));
  }
  if (reference instanceof DartParameterNameReferenceExpression) {
    final DartCallExpression callExpression=PsiTreeUtil.getParentOfType(reference,DartCallExpression.class);
    final DartExpression expression=callExpression != null ? callExpression.getExpression() : null;
    final PsiElement target=expression instanceof DartReference ? ((DartReference)expression).resolve() : null;
    final DartFormalParameterList parameters=PsiTreeUtil.getChildOfType(target != null ? target.getParent() : null,DartFormalParameterList.class);
    return toResult(DartResolveUtil.findParameterByName(parameters,reference.getText()));
  }
  if (DartResolveUtil.aloneOrFirstInChain(reference)) {
    return resolveSimpleReference(reference);
  }
  final DartReference leftReference=DartResolveUtil.getLeftReference(reference);
  final DartReference[] references=PsiTreeUtil.getChildrenOfType(reference,DartReference.class);
  if (references != null && references.length == 2) {
    final List<DartComponentName> names=DartResolveUtil.findComponentsInLibraryByPrefix(reference,references[0].getCanonicalText(),references[1].getCanonicalText());
    if (!names.isEmpty()) {
      return toResult(names);
    }
    return toResult(references[1].resolve());
  }
 else   if (leftReference != null) {
    final DartClassResolveResult classResolveResult=leftReference.resolveDartClass();
    final DartClass dartClass=classResolveResult.getDartClass();
    if (dartClass != null) {
      final String name=reference.getCanonicalText();
      final DartComponent subComponent=leftReference instanceof DartType ? dartClass.findNamedConstructor(name) : filterAccess(reference,dartClass.findMembersByName(name));
      return toResult(subComponent == null ? null : subComponent.getComponentName());
    }
    final List<DartComponentName> names=DartResolveUtil.findComponentsInLibraryByPrefix(reference,leftReference.getCanonicalText(),reference.getCanonicalText());
    if (!names.isEmpty()) {
      return toResult(names);
    }
  }
  return null;
}
