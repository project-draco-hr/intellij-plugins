{
  final THashSet<String> overloadedMasked=new THashSet<String>(FlexDefinitionProcessor.OVERLOADED.length);
  for (  String origin : FlexDefinitionProcessor.OVERLOADED) {
    int index=origin.indexOf(':') + 1;
    overloadedMasked.add(origin.substring(0,index) + FlexDefinitionProcessor.OVERLOADED_AND_BACKED_CLASS_MARK + origin.substring(index + 1));
  }
  Pair<CharArrayReader,ByteArrayInputStream> data=getInjection();
  final Set<CharSequence> ownDefinitions=LibraryUtil.getDefinitions(data.first);
  NanoXmlUtil.parse(data.first,new CatalogXmlBuilder(definitionMap,new Condition<String>(){
    @Override public boolean value(    String name){
      return globalContains.value(name) || (name.startsWith("com.intellij.") && !ownDefinitions.contains(name));
    }
  }
,new Condition<String>(){
    @Override public boolean value(    String name){
      return globalContains.value(name) || overloadedMasked.contains(name);
    }
  }
));
  abcMerger.process(data.second);
}
