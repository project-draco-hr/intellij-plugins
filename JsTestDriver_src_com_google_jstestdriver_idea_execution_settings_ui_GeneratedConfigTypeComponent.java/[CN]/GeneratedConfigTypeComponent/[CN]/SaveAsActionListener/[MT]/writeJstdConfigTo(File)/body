{
  ResultWithError<JstdGeneratedConfigStructure,String> configStructureResult=buildConfigStructureResult();
  String errorMessage=configStructureResult.getError();
  if (errorMessage != null) {
    showFailMessage(errorMessage);
    return;
  }
  File outputDir=outputFile.getParentFile();
  if (!outputDir.exists()) {
    showFailMessage("Directory " + outputDir.getAbsolutePath() + " does not exists.");
    return;
  }
  if (!outputDir.isDirectory()) {
    showFailMessage(outputDir.getAbsolutePath() + " should be a directory.");
    return;
  }
  if (outputFile.exists()) {
    if (outputFile.isFile()) {
      int retCode=Messages.showYesNoDialog(myProject,outputFile.getAbsolutePath() + " already exists.\nDo you want to replace it?","Confirm Save As",Messages.getWarningIcon());
      if (retCode == 1) {
        return;
      }
    }
 else {
      showFailMessage(outputFile + " exists, but it is not a file.");
      return;
    }
  }
  final JstdGeneratedConfigStructure configStructure=configStructureResult.getResult();
  final String content=configStructure.asFileContent();
  final VirtualFile outputDirVirtualFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(outputDir);
  if (outputDirVirtualFile == null) {
    throw new RuntimeException("Can't find VirtualFile for outputDir!");
  }
  try {
    final AtomicReference<IOException> refToIoException=new AtomicReference<IOException>();
    final VirtualFile outputFileVirtualFile=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
      @Override public VirtualFile compute(){
        try {
          return outputDirVirtualFile.findOrCreateChildData(null,outputFile.getName());
        }
 catch (        IOException e) {
          refToIoException.set(e);
          return null;
        }
      }
    }
);
    if (outputFileVirtualFile == null) {
      IOException ioe=refToIoException.get();
      if (ioe != null) {
        throw ioe;
      }
      showUnableToWriteTo(outputFile);
      return;
    }
    final Document document=FileDocumentManager.getInstance().getDocument(outputFileVirtualFile);
    if (document == null) {
      showUnableToWriteTo(outputFile);
      return;
    }
    CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
      @Override public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            document.replaceString(0,document.getTextLength(),content);
            PsiDocumentManager.getInstance(myProject).commitDocument(document);
          }
        }
);
      }
    }
,"SaveAsGeneratedJstdConfig",null,document);
    showSuccessMessage(outputFile);
  }
 catch (  IOException e) {
    VirtualFile outputVirtualFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(outputFile);
    if (outputVirtualFile == null || !outputVirtualFile.exists()) {
      showFailMessage("Unable to create " + outputFile.getAbsolutePath());
    }
 else {
      showUnableToWriteTo(outputFile);
    }
  }
}
