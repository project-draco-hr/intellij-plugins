{
  JSExpressionStatement expressionStatement=CastUtils.tryCast(psiElement,JSExpressionStatement.class);
  if (expressionStatement != null) {
    JSCallExpression callExpression=CastUtils.tryCast(expressionStatement.getExpression(),JSCallExpression.class);
    if (callExpression != null) {
      JSReferenceExpression referenceExpression=CastUtils.tryCast(callExpression.getMethodExpression(),JSReferenceExpression.class);
      if (referenceExpression != null && "module".equals(referenceExpression.getReferencedName())) {
        ResolveResult[] resolveResults=referenceExpression.multiResolve(false);
        boolean qunitAdapterFound=false;
        for (        ResolveResult resolveResult : resolveResults) {
          PsiElement resolvedElement=resolveResult.getElement();
          PsiFile resolvedElementPsiFile;
          if (resolvedElement != null && (resolvedElementPsiFile=resolvedElement.getContainingFile()) != null) {
            VirtualFile virtualFile=resolvedElementPsiFile.getVirtualFile();
            if (virtualFile != null && "QUnitAdapter.js".equals(virtualFile.getName())) {
              qunitAdapterFound=true;
              break;
            }
          }
        }
        if (qunitAdapterFound) {
          return callExpression;
        }
      }
    }
  }
  return null;
}
