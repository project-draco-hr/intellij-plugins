{
  if (myFilePathsWithUnsentChanges.contains(filePath))   return;
  final DartAnalysisServerService service=DartAnalysisServerService.getInstance();
  final VirtualFile file=LocalFileSystem.getInstance().findFileByPath(filePath);
  final List<DartRegion> newImplementedClasses=new ArrayList<>(implementedClasses.size());
  for (  ImplementedClass implementedClass : implementedClasses) {
    final int offset=service.getConvertedOffset(file,implementedClass.getOffset());
    final int length=service.getConvertedOffset(file,implementedClass.getOffset() + implementedClass.getLength()) - offset;
    newImplementedClasses.add(new DartRegion(offset,length));
  }
  final List<DartRegion> newImplementedMembers=new ArrayList<>(implementedMembers.size());
  for (  ImplementedMember implementedMember : implementedMembers) {
    final int offset=service.getConvertedOffset(file,implementedMember.getOffset());
    final int length=service.getConvertedOffset(file,implementedMember.getOffset() + implementedMember.getLength()) - offset;
    newImplementedMembers.add(new DartRegion(offset,length));
  }
  boolean hasChanges=false;
  final List<DartRegion> oldClasses=myImplementedClassData.get(filePath);
  if (oldClasses == null || !oldClasses.equals(newImplementedClasses)) {
    hasChanges=true;
    myImplementedClassData.put(filePath,newImplementedClasses);
  }
  final List<DartRegion> oldMembers=myImplementedMemberData.get(filePath);
  if (oldMembers == null || !oldMembers.equals(newImplementedMembers)) {
    hasChanges=true;
    myImplementedMemberData.put(filePath,newImplementedMembers);
  }
  if (hasChanges) {
    forceFileAnnotation(file,false);
  }
}
