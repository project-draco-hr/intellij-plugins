{
  super(false,treeNodeNameUpdater);
  myModule=module;
  myConfiguration=configuration;
  myTreeNodeNameUpdater=treeNodeNameUpdater;
  myName=configuration.getName();
  final BuildConfigurationNature nature=configuration.getNature();
  myDependenciesConfigurable=new DependenciesConfigurable(configuration,module.getProject(),configEditor);
  myCompilerOptionsConfigurable=new CompilerOptionsConfigurable(module,configuration.getNature(),myDependenciesConfigurable,configuration.getCompilerOptions());
  myAirDesktopPackagingConfigurable=nature.isDesktopPlatform() && nature.isApp() ? new AirDesktopPackagingConfigurable(module,configuration.getAirDesktopPackagingOptions()) : null;
  myAndroidPackagingConfigurable=nature.isMobilePlatform() && nature.isApp() ? new AndroidPackagingConfigurable(module,configuration.getAndroidPackagingOptions()) : null;
  myIOSPackagingConfigurable=nature.isMobilePlatform() && nature.isApp() ? new IOSPackagingConfigurable(module,configuration.getIosPackagingOptions()) : null;
  myNameField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      setDisplayName(myNameField.getText());
      if (treeNodeNameUpdater != null) {
        treeNodeNameUpdater.run();
      }
    }
  }
);
  TargetPlatform.initCombo(myTargetPlatformCombo);
  OutputType.initCombo(myOutputTypeCombo);
  myOutputFolderField.addBrowseFolderListener(null,null,module.getProject(),FileChooserDescriptorFactory.createSingleFolderDescriptor());
  myUseHTMLWrapperCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      updateControls();
      IdeFocusManager.getInstance(module.getProject()).requestFocus(myWrapperTemplateTextWithBrowse.getTextField(),true);
    }
  }
);
  final String title="Select folder with HTML wrapper template";
  final String description="Folder must contain 'index.template.html' file which must contain '${swf}' macro.";
  myWrapperTemplateTextWithBrowse.addBrowseFolderListener(title,description,module.getProject(),FileChooserDescriptorFactory.createSingleFolderDescriptor());
  myCreateHtmlWrapperTemplateButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final FlexSdk sdk=myDependenciesConfigurable.getCurrentSdk();
      if (sdk == null) {
        Messages.showInfoMessage(myModule.getProject(),FlexBundle.message("sdk.needed.to.create.wrapper"),CreateHtmlWrapperTemplateDialog.TITLE);
      }
 else {
        String path=myWrapperTemplateTextWithBrowse.getText().trim();
        if (path.isEmpty()) {
          final String[] contentRootUrls=ModuleRootManager.getInstance(module).getContentRootUrls();
          if (contentRootUrls.length > 0) {
            path=VfsUtil.urlToPath(contentRootUrls[0]) + "/" + CreateHtmlWrapperTemplateDialog.HTML_TEMPLATE_FOLDER_NAME;
          }
 else {
            path=PathUtil.getParentPath(module.getModuleFilePath()) + "/" + CreateHtmlWrapperTemplateDialog.HTML_TEMPLATE_FOLDER_NAME;
          }
        }
        final CreateHtmlWrapperTemplateDialog dialog=new CreateHtmlWrapperTemplateDialog(module,sdk,path);
        dialog.show();
        if (dialog.isOK()) {
          myWrapperTemplateTextWithBrowse.setText(FileUtil.toSystemDependentName(dialog.getWrapperFolderPath()));
        }
      }
    }
  }
);
  myOptimizeForCombo.setModel(new CollectionComboBoxModel(Arrays.asList(""),""));
  myOptimizeForCombo.setRenderer(new ListCellRendererWrapper(myOptimizeForCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if ("".equals(value)) {
        setText("<no optimization>");
      }
    }
  }
);
}
