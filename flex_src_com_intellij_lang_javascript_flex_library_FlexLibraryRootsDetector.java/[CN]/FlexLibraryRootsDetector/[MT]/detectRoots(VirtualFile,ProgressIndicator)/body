{
  Collection<DetectedLibraryRoot> roots=super.detectRoots(rootCandidate,progressIndicator);
  boolean swcsFoldersFound=ContainerUtil.find(roots,new Condition<DetectedLibraryRoot>(){
    @Override public boolean value(    final DetectedLibraryRoot root){
      LibraryRootType libraryRootType=root.getTypes().get(0);
      return libraryRootType.getType() == OrderRootType.CLASSES && libraryRootType.isJarDirectory();
    }
  }
) != null;
  final List<LibraryRootType> types=Arrays.asList(new LibraryRootType(OrderRootType.CLASSES,false),new LibraryRootType(OrderRootType.SOURCES,false));
  if (swcsFoldersFound) {
    Collections.reverse(types);
  }
  return ContainerUtil.map(roots,new Function<DetectedLibraryRoot,DetectedLibraryRoot>(){
    @Override public DetectedLibraryRoot fun(    final DetectedLibraryRoot root){
      if (root.getTypes().get(0).getType() == OrderRootType.SOURCES) {
        return new DetectedLibraryRoot(root.getFile(),types);
      }
      return root;
    }
  }
);
}
