{
  final Set<DartClass> classSet=new THashSet<DartClass>();
  final LinkedList<DartClass> namesQueue=new LinkedList<DartClass>();
  namesQueue.add(dartClass);
  while (!namesQueue.isEmpty()) {
    final DartClass currentClass=namesQueue.pollFirst();
    final String currentClassName=currentClass.getName();
    if (currentClassName == null || !classSet.add(currentClass)) {
      continue;
    }
    final Collection<VirtualFile> files=FileBasedIndex.getInstance().getContainingFiles(DART_INHERITANCE_INDEX,currentClassName,GlobalSearchScope.allScope(context.getProject()));
    for (    VirtualFile virtualFile : files) {
      PsiFile psiFile=dartClass.getManager().findFile(virtualFile);
      for (      PsiElement root : DartResolveUtil.findDartRoots(psiFile)) {
        for (        DartClass subClass : DartResolveUtil.findClassesByParent(currentClass,root)) {
          if (!consumer.process(subClass)) {
            return true;
          }
          namesQueue.add(subClass);
        }
      }
    }
  }
  return true;
}
