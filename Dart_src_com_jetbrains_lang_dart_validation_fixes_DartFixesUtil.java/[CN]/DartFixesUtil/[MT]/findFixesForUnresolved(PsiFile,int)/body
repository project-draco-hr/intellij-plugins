{
  final DartReference reference=PsiTreeUtil.getParentOfType(file.findElementAt(startOffset),DartReference.class);
  final String name=reference != null ? reference.getText() : null;
  if (reference == null || name == null) {
    return Collections.emptyList();
  }
  final boolean isLValue=DartResolveUtil.isLValue(reference);
  final DartReference leftReference=DartResolveUtil.getLeftReference(reference);
  final List<BaseCreateFix> result=new ArrayList<BaseCreateFix>();
  if (leftReference != null) {
    final PsiElement leftTarget=leftReference.resolve();
    final DartComponentType leftTargetType=DartComponentType.typeOf(leftTarget != null ? leftTarget.getParent() : null);
    result.add(new CreateDartGetterSetterAction(name,!isLValue,leftTargetType == DartComponentType.CLASS));
    result.add(new CreateFieldAction(name,leftTargetType == DartComponentType.CLASS));
    if (DartResolveUtil.aloneOrFirstInChain(reference)) {
      result.add(new CreateGlobalDartGetterSetterAction(name,false));
    }
  }
  if (DartResolveUtil.aloneOrFirstInChain(reference) && StringUtil.isCapitalized(name)) {
    result.add(new CreateDartClassAction(name));
  }
  if (DartResolveUtil.aloneOrFirstInChain(reference) && !StringUtil.isCapitalized(name)) {
    final DartComponent parentComponent=PsiTreeUtil.getParentOfType(reference,DartComponent.class);
    if (reference.getParent() instanceof DartCallExpression) {
      result.add(new CreateGlobalDartFunctionAction(name));
      if (PsiTreeUtil.getParentOfType(reference,DartClass.class) != null) {
        result.add(new CreateDartMethodAction(name,parentComponent != null && parentComponent.isStatic()));
      }
    }
 else {
      result.add(new CreateDartGetterSetterAction(name,!isLValue,parentComponent != null && parentComponent.isStatic()));
      result.add(new CreateGlobalDartGetterSetterAction(name,!isLValue));
      result.add(new CreateFieldAction(name,parentComponent != null && parentComponent.isStatic()));
      result.add(new CreateGlobalVariableAction(name));
      result.add(new CreateLocalVariableAction(name));
    }
  }
  if (DartResolveUtil.aloneOrFirstInChain(reference) && !StringUtil.startsWithChar(name,'_')) {
    suggestImports(result,reference,name);
  }
  return result;
}
