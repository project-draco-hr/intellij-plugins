{
  indicator.setText(FlexUIDesignerBundle.message("open.document"));
  Client client=Client.getInstance();
  if (!client.flush()) {
    return false;
  }
  final Module module=ModuleUtil.findModuleForPsiElement(psiFile);
  if (unregisteredDocumentReferences != null && !client.registerDocumentReferences(unregisteredDocumentReferences,module,problemsHolder)) {
    return false;
  }
  final Semaphore semaphore=new Semaphore();
  final MessageBusConnection connection=ApplicationManager.getApplication().getMessageBus().connect(DesignerApplicationManager.getInstance().getApplication());
  connection.subscribe(SocketInputHandler.MESSAGE_TOPIC,new SocketInputHandler.DocumentOpenedListener(){
    @Override public void documentOpened(){
      semaphoreUp();
    }
    @Override public void errorOccured(){
      semaphoreUp();
    }
    private void semaphoreUp(){
      connection.disconnect();
      semaphore.up();
    }
  }
);
  semaphore.down();
  if (client.openDocument(module,psiFile,true,problemsHolder)) {
    if (!client.flush()) {
      return false;
    }
    indicator.setText(FlexUIDesignerBundle.message("loading.libraries"));
    semaphore.waitFor();
  }
 else {
    semaphore.up();
    connection.disconnect();
  }
  return true;
}
