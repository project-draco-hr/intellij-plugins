{
  indicator.setText(FlashUIDesignerBundle.message("open.document"));
  Client client=Client.getInstance();
  if (!client.flush()) {
    return false;
  }
  final Module module=ModuleUtil.findModuleForPsiElement(psiFile);
  if (projectDocumentReferenceCounter != null && !client.registerDocumentReferences(projectDocumentReferenceCounter.unregistered,module,problemsHolder)) {
    return false;
  }
  final Ref<Boolean> librariesLoaded=new Ref<Boolean>(false);
  final MessageBusConnection connection=ApplicationManager.getApplication().getMessageBus().connect(DesignerApplicationManager.getApplication());
  connection.subscribe(SocketInputHandler.MESSAGE_TOPIC,new SocketInputHandler.DocumentOpenedListener(){
    @Override public void documentOpened(){
      semaphoreUp();
    }
    @Override public void errorOccured(){
      semaphoreUp();
    }
    private void semaphoreUp(){
      connection.disconnect();
      librariesLoaded.set(true);
    }
  }
);
  if (client.openDocument(module,psiFile,true,problemsHolder)) {
    if (!client.flush()) {
      return false;
    }
    indicator.setText(FlashUIDesignerBundle.message("loading.libraries"));
    while (!librariesLoaded.get()) {
      try {
        Thread.sleep(5);
      }
 catch (      InterruptedException e) {
        return false;
      }
      indicator.checkCanceled();
    }
  }
 else {
    connection.disconnect();
  }
  return true;
}
