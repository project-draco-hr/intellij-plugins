{
  boolean needInitialRender=isApplicationClosed();
  DocumentInfo documentInfo=null;
  if (!needInitialRender) {
    Document[] unsavedDocuments=FileDocumentManager.getInstance().getUnsavedDocuments();
    if (unsavedDocuments.length > 0) {
      renderDocumentsAndCheckLocalStyleModification(unsavedDocuments);
    }
    documentInfo=DocumentFactoryManager.getInstance().getNullableInfo(psiFile);
    needInitialRender=documentInfo == null;
  }
  if (!needInitialRender) {
    if (handler == null) {
      return;
    }
    Application app=ApplicationManager.getApplication();
    if (app.isDispatchThread()) {
      final DocumentInfo finalDocumentInfo=documentInfo;
      app.executeOnPooledThread(new Runnable(){
        @Override public void run(){
          handler.run(finalDocumentInfo);
        }
      }
);
    }
 else {
      handler.run(documentInfo);
    }
    return;
  }
synchronized (initialRenderQueue) {
    AsyncResult<DocumentInfo> renderResult=initialRenderQueue.findResult(psiFile);
    if (renderResult == null) {
      renderResult=new AsyncResult<DocumentInfo>();
      if (renderRejectedCallback != null) {
        renderResult.notifyWhenRejected(renderRejectedCallback);
      }
      initialRenderQueue.add(new RenderAction<AsyncResult<DocumentInfo>>(psiFile.getProject(),psiFile.getViewProvider().getVirtualFile(),renderResult){
        @Override protected boolean isNeedEdt(){
          return true;
        }
        @Override protected void doRun(){
          if (project.isDisposed()) {
            return;
          }
          PsiFile psiFile=PsiManager.getInstance(project).findFile(file);
          if (!(psiFile instanceof XmlFile)) {
            return;
          }
          Module module=ModuleUtilCore.findModuleForFile(file,project);
          if (module != null) {
            renderDocument(module,(XmlFile)psiFile,debug,result);
          }
        }
      }
);
    }
    if (handler != null) {
      renderResult.doWhenDone(handler);
    }
    renderResult.doWhenDone(createDocumentRenderedNotificationDoneHandler(false));
  }
}
