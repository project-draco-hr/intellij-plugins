{
  FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
  DocumentFactoryManager documentFactoryManager=DocumentFactoryManager.getInstance();
  Client client=Client.getInstance();
  final List<DocumentInfo> documentInfos=new ArrayList<DocumentInfo>(documents.length);
  final List<Pair<ModuleInfo,List<LocalStyleHolder>>> changedLocalStyleHolders=new ArrayList<Pair<ModuleInfo,List<LocalStyleHolder>>>();
  for (  Document document : documents) {
    final VirtualFile file=fileDocumentManager.getFile(document);
    if (file == null) {
      continue;
    }
    boolean isMxml=JavaScriptSupportLoader.isFlexMxmFile(file);
    if (isMxml || file.getFileType() == CssFileType.INSTANCE) {
      collectChangedLocalStyleSources(changedLocalStyleHolders,file);
    }
    final DocumentInfo info=isMxml && !onlyStyle ? documentFactoryManager.getNullableInfo(file) : null;
    if (info == null) {
      continue;
    }
    if (info.documentModificationStamp == document.getModificationStamp()) {
      info.documentModificationStamp=-1;
      continue;
    }
    final Project project=ProjectUtil.guessProjectForFile(file);
    if (project == null) {
      continue;
    }
    final Module module=ModuleUtil.findModuleForFile(file,project);
    if (module == null) {
      continue;
    }
    final XmlFile psiFile;
    final AccessToken token=ReadAction.start();
    try {
      psiFile=(XmlFile)PsiDocumentManager.getInstance(project).getPsiFile(document);
      if (psiFile == null) {
        continue;
      }
    }
  finally {
      token.finish();
    }
    if (client.updateDocumentFactory(info.getId(),module,psiFile)) {
      info.documentModificationStamp=document.getModificationStamp();
      documentInfos.add(info);
    }
  }
  if (!changedLocalStyleHolders.isEmpty()) {
    final ProblemsHolder problemsHolder=new ProblemsHolder();
    final ProjectComponentReferenceCounter projectComponentReferenceCounter=new ProjectComponentReferenceCounter();
    final StringRegistry.StringWriter stringWriter=new StringRegistry.StringWriter();
    stringWriter.startChange();
    try {
      for (      Pair<ModuleInfo,List<LocalStyleHolder>> pair : changedLocalStyleHolders) {
        ModuleInfo moduleInfo=pair.first;
        moduleInfo.getLocalStyleHolders().clear();
        FlexLibrarySet flexLibrarySet=moduleInfo.getFlexLibrarySet();
        ModuleInfoUtil.collectLocalStyle(moduleInfo,flexLibrarySet.getVersion(),stringWriter,problemsHolder,projectComponentReferenceCounter,flexLibrarySet.assetCounterInfo.demanded);
        client.fillAssetClassPoolIfNeed(flexLibrarySet);
        client.updateLocalStyleHolders(changedLocalStyleHolders,stringWriter);
        if (projectComponentReferenceCounter.hasUnregistered()) {
          client.registerDocumentReferences(projectComponentReferenceCounter.unregistered,null,problemsHolder);
        }
      }
    }
 catch (    Throwable e) {
      stringWriter.rollback();
      LOG.error(e);
    }
    if (!problemsHolder.isEmpty()) {
      DocumentProblemManager.getInstance().report(null,problemsHolder);
    }
  }
  client.renderDocumentAndDependents(documentInfos,changedLocalStyleHolders,result);
}
