{
  TargetPlatform.initCombo(myTargetPlatformCombo);
  OutputType.initCombo(myOutputTypeCombo);
  final ActionListener listener=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      updateControls();
    }
  }
;
  myTargetPlatformCombo.addActionListener(listener);
  myOutputTypeCombo.addActionListener(listener);
  mySampleAppCheckBox.addActionListener(listener);
  myHtmlWrapperCheckBox.addActionListener(listener);
  myFlexSdkPanel.addListener(new ChangeListener(){
    public void stateChanged(    final ChangeEvent e){
      BCUtils.updateAvailableTargetPlayers(myFlexSdkPanel,myTargetPlayerCombo);
    }
  }
,myDisposable);
  myPureActionScriptCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final String sampleApp=mySampleAppTextField.getText().trim();
      if (sampleApp.endsWith(".as") || sampleApp.endsWith("mxml")) {
        mySettingModuleNameFromCode=true;
        mySampleAppTextField.setText(FileUtil.getNameWithoutExtension(sampleApp) + (myPureActionScriptCheckBox.isSelected() ? ".as" : ".mxml"));
        mySettingModuleNameFromCode=false;
      }
    }
  }
);
  mySampleAppTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!mySettingModuleNameFromCode) {
        myClassNameChangedByUser=true;
      }
    }
  }
);
}
