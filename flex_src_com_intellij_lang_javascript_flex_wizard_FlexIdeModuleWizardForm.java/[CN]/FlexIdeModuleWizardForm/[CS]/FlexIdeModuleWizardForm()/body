{
  mySdkLabel.setLabelFor(mySdkCombo.getChildComponent());
  TargetPlatform.initCombo(myTargetPlatformCombo);
  OutputType.initCombo(myOutputTypeCombo);
  final ActionListener listener=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      updateControls();
    }
  }
;
  myTargetPlatformCombo.addActionListener(listener);
  myOutputTypeCombo.addActionListener(listener);
  mySampleAppCheckBox.addActionListener(listener);
  myHtmlWrapperCheckBox.addActionListener(listener);
  myCheckPlayerVersionCheckBox.addActionListener(listener);
  mySdkCombo.addComboboxListener(new FlexSdkComboBoxWithBrowseButton.Listener(){
    public void stateChanged(){
      BCUtils.updateAvailableTargetPlayers(mySdkCombo.getSelectedSdk(),myTargetPlayerCombo);
      updateControls();
    }
  }
);
  myPureActionScriptCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final String sampleApp=mySampleAppTextField.getText().trim();
      if (sampleApp.endsWith(".as") || sampleApp.endsWith(".mxml")) {
        mySettingSampleAppNameFromCode=true;
        mySampleAppTextField.setText(FileUtil.getNameWithoutExtension(sampleApp) + (myPureActionScriptCheckBox.isSelected() ? ".as" : ".mxml"));
        mySettingSampleAppNameFromCode=false;
      }
    }
  }
);
  mySampleAppTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!mySettingSampleAppNameFromCode) {
        mySampleAppNameNameChangedByUser=true;
      }
    }
  }
);
}
