{
  String name=target.getFile();
  int offset=target.getOffset();
  VirtualFile vFile=LocalFileSystem.getInstance().findFileByPath(name);
  if (vFile != null) {
    final PsiFile targetFile=reference.getManager().findFile(vFile);
    if (targetFile != null) {
      final PsiElement[] result=new PsiElement[1];
      try {
        targetFile.accept(new DartRecursiveVisitor(){
          public void visitMethodDeclaration(          @NotNull DartMethodDeclaration element){
            if (element.getTextOffset() == offset) {
              result[0]=element;
              throw new ExitVisitor();
            }
            super.visitMethodDeclaration(element);
          }
          public void visitFunctionDeclarationWithBodyOrNative(          @NotNull DartFunctionDeclarationWithBodyOrNative element){
            if (element.getTextOffset() == offset) {
              result[0]=element;
              throw new ExitVisitor();
            }
            super.visitFunctionDeclarationWithBodyOrNative(element);
          }
          public void visitFunctionDeclarationWithBody(          @NotNull DartFunctionDeclarationWithBody element){
            if (element.getTextOffset() == offset) {
              result[0]=element;
              throw new ExitVisitor();
            }
            super.visitFunctionDeclarationWithBody(element);
          }
          public void visitSetterDeclaration(          @NotNull DartSetterDeclaration element){
            if (element.getTextOffset() == offset) {
              result[0]=element;
              throw new ExitVisitor();
            }
            super.visitSetterDeclaration(element);
          }
          public void visitGetterDeclaration(          @NotNull DartGetterDeclaration element){
            if (element.getTextOffset() == offset) {
              result[0]=element;
              throw new ExitVisitor();
            }
            super.visitGetterDeclaration(element);
          }
          public void visitFactoryConstructorDeclaration(          @NotNull DartFactoryConstructorDeclaration element){
            if (element.getTextOffset() == offset) {
              result[0]=element;
              throw new ExitVisitor();
            }
            super.visitFactoryConstructorDeclaration(element);
          }
          public void visitNamedConstructorDeclaration(          @NotNull DartNamedConstructorDeclaration element){
            if (element.getTextOffset() == offset) {
              result[0]=element;
              throw new ExitVisitor();
            }
            super.visitNamedConstructorDeclaration(element);
          }
        }
);
      }
 catch (      ExitVisitor ex) {
        return result[0];
      }
    }
  }
  return null;
}
