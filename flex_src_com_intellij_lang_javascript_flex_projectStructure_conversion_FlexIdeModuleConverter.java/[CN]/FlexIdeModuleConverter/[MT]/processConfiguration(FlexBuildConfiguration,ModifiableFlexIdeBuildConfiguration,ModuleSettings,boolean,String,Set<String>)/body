{
  if (oldConfiguration == null) {
    newBuildConfiguration.setOutputType(OutputType.Application);
  }
 else {
    if (FlexBuildConfiguration.LIBRARY.equals(oldConfiguration.OUTPUT_TYPE)) {
      newBuildConfiguration.setOutputType(OutputType.Library);
    }
 else {
      newBuildConfiguration.setOutputType(OutputType.Application);
    }
    if (newBuildConfiguration.getOutputType() == OutputType.Application) {
      newBuildConfiguration.setMainClass(oldConfiguration.MAIN_CLASS);
      myParams.addAppModuleAndBCName(module.getModuleName(),newBuildConfiguration.getName());
    }
    newBuildConfiguration.setOutputFileName(oldConfiguration.OUTPUT_FILE_NAME);
    newBuildConfiguration.setSkipCompile(!oldConfiguration.DO_BUILD);
  }
  String outputFolder;
  if (facet && oldConfiguration != null && oldConfiguration.USE_FACET_COMPILE_OUTPUT_PATH) {
    outputFolder=PathUtil.getCanonicalPath(module.expandPath(oldConfiguration.FACET_COMPILE_OUTPUT_PATH));
  }
 else {
    outputFolder=getOutputFolder(module);
  }
  newBuildConfiguration.setOutputFolder(outputFolder);
  Collection<Element> orderEntriesToRemove=new ArrayList<Element>();
  Collection<Element> orderEntriesToAdd=new ArrayList<Element>();
  for (  Element orderEntry : module.getOrderEntries()) {
    String orderEntryType=orderEntry.getAttributeValue(OrderEntryFactory.ORDER_ENTRY_TYPE_ATTR);
    if (ModuleLibraryOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      Element library=orderEntry.getChild(LibraryImpl.ELEMENT);
      if (facet && AutogeneratedLibraryUtils.isAutogeneratedLibrary(library)) {
        orderEntriesToRemove.add(orderEntry);
        continue;
      }
      library.setAttribute(LibraryImpl.LIBRARY_TYPE_ATTR,FlexLibraryType.FLEX_LIBRARY.getKindId());
      Element libraryProperties=new Element(LibraryImpl.PROPERTIES_ELEMENT);
      library.getChildren().add(0,libraryProperties);
      String libraryId=FlexLibraryIdGenerator.generateId();
      XmlSerializer.serializeInto(new FlexLibraryProperties(libraryId),libraryProperties);
      ModifiableModuleLibraryEntry moduleLibraryEntry=ConversionHelper.createModuleLibraryEntry(libraryId);
      convertDependencyType(orderEntry,moduleLibraryEntry.getDependencyType());
      newBuildConfiguration.getDependencies().getModifiableEntries().add(moduleLibraryEntry);
    }
 else     if (ModuleOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      String moduleName=orderEntry.getAttributeValue(ModuleOrderEntryImpl.MODULE_NAME_ATTR);
      Collection<String> bcNames=myParams.getBcNamesForDependency(moduleName);
      for (      String bcName : bcNames) {
        ModifiableBuildConfigurationEntry bcEntry=ConversionHelper.createBuildConfigurationEntry(moduleName,bcName);
        convertDependencyType(orderEntry,bcEntry.getDependencyType());
        newBuildConfiguration.getDependencies().getModifiableEntries().add(bcEntry);
      }
      if (bcNames.isEmpty()) {
        orderEntriesToRemove.add(orderEntry);
      }
    }
 else     if (ModuleJdkOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      if (!facet) {
        String sdkName=orderEntry.getAttributeValue(ModuleJdkOrderEntryImpl.JDK_NAME_ATTR);
        String sdkType=orderEntry.getAttributeValue(ModuleJdkOrderEntryImpl.JDK_TYPE_ATTR);
        Element entryToAdd=processSdkEntry(newBuildConfiguration,sdkName,sdkType,null);
        ContainerUtil.addIfNotNull(entryToAdd,orderEntriesToAdd);
      }
      orderEntriesToRemove.add(orderEntry);
    }
 else     if (InheritedJdkOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      if (!facet) {
        Element entryToAdd=processSdkEntry(newBuildConfiguration,myParams.projectSdkName,myParams.projectSdkType,null);
        ContainerUtil.addIfNotNull(entryToAdd,orderEntriesToAdd);
      }
      orderEntriesToRemove.add(orderEntry);
    }
  }
  if (facetSdkName != null) {
    Element entryToAdd=processSdkEntry(newBuildConfiguration,facetSdkName,null,sdkLibrariesIds);
    ContainerUtil.addIfNotNull(entryToAdd,orderEntriesToAdd);
  }
  if (!orderEntriesToRemove.isEmpty()) {
    module.getOrderEntries().removeAll(orderEntriesToRemove);
  }
  final Element rootManagerElement=module.getComponentElement(ModuleSettings.MODULE_ROOT_MANAGER_COMPONENT);
  if (rootManagerElement != null) {
    for (    Element entryToAdd : orderEntriesToAdd) {
      rootManagerElement.addContent(entryToAdd);
    }
  }
  if (newBuildConfiguration.getTargetPlatform() == TargetPlatform.Web) {
    final SdkEntry sdkEntry=newBuildConfiguration.getDependencies().getSdkEntry();
    if (sdkEntry != null) {
      final String sdkHome=PathUtil.getCanonicalPath(module.expandPath(sdkEntry.getHomePath()));
      newBuildConfiguration.getDependencies().setTargetPlayer(TargetPlayerUtils.getTargetPlayer(oldConfiguration.TARGET_PLAYER_VERSION,sdkHome));
    }
  }
}
