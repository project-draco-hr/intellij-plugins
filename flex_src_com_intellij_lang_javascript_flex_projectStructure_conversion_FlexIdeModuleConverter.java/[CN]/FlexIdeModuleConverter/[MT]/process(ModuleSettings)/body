{
  FlexBuildConfigurationManagerImpl configurationManager=ConversionHelper.createBuildConfigurationManager();
  if (FlexModuleType.MODULE_TYPE_ID.equals(moduleSettings.getModuleType())) {
    ModifiableFlexIdeBuildConfiguration newConfiguration=(ModifiableFlexIdeBuildConfiguration)configurationManager.getBuildConfigurations()[0];
    newConfiguration.setName(moduleSettings.getModuleName());
    Element oldConfigurationElement=moduleSettings.getComponentElement(FlexBuildConfiguration.COMPONENT_NAME);
    FlexBuildConfiguration oldConfiguration=oldConfigurationElement != null ? XmlSerializer.deserialize(oldConfigurationElement,FlexBuildConfiguration.class) : null;
    processConfiguration(oldConfiguration,newConfiguration,moduleSettings,false,null,null);
  }
 else {
    List<Element> flexFacets=new ArrayList<Element>(moduleSettings.getFacetElements(FlexFacet.ID.toString()));
    Set<String> sdkLibrariesIds=new HashSet<String>();
    for (int i=0; i < flexFacets.size(); i++) {
      Element facet=flexFacets.get(i);
      ModifiableFlexIdeBuildConfiguration newConfiguration;
      if (i == 0) {
        newConfiguration=(ModifiableFlexIdeBuildConfiguration)configurationManager.getBuildConfigurations()[0];
      }
 else {
        newConfiguration=ConversionHelper.createBuildConfiguration(configurationManager);
      }
      newConfiguration.setName(facet.getAttributeValue(FacetManagerImpl.NAME_ATTRIBUTE));
      Element oldConfigurationElement=facet.getChild(FacetManagerImpl.CONFIGURATION_ELEMENT);
      if (oldConfigurationElement != null) {
        FlexBuildConfiguration oldConfiguration=XmlSerializer.deserialize(oldConfigurationElement,FlexBuildConfiguration.class);
        final String facetSdkName=oldConfigurationElement.getAttributeValue(FlexFacetConfigurationImpl.FLEX_SDK_ATTR_NAME);
        processConfiguration(oldConfiguration,newConfiguration,moduleSettings,true,facetSdkName,sdkLibrariesIds);
      }
 else {
        processConfiguration(null,newConfiguration,moduleSettings,true,null,sdkLibrariesIds);
      }
    }
    moduleSettings.setModuleType(FlexModuleType.MODULE_TYPE_ID);
    moduleSettings.getComponentElement(FacetManagerImpl.COMPONENT_NAME).getChildren(FacetManagerImpl.FACET_ELEMENT).removeAll(flexFacets);
  }
  Element componentElement=JDomConvertingUtil.findOrCreateComponentElement(moduleSettings.getRootElement(),FlexBuildConfigurationManagerImpl.COMPONENT_NAME);
  Element e=XmlSerializer.serialize(configurationManager.getState(),new SkipDefaultValuesSerializationFilters());
  addContent(e,componentElement);
}
