{
  FlexBuildConfigurationManagerImpl configurationManager=ConversionHelper.createBuildConfigurationManager();
  Collection<Element> orderEntriesToAdd=new ArrayList<Element>();
  if (isFlexModule(moduleSettings)) {
    ModifiableFlexIdeBuildConfiguration newConfiguration=(ModifiableFlexIdeBuildConfiguration)configurationManager.getBuildConfigurations()[0];
    newConfiguration.setName(generateModuleBcName(moduleSettings));
    Element oldConfigurationElement=moduleSettings.getComponentElement(FlexBuildConfiguration.COMPONENT_NAME);
    FlexBuildConfiguration oldConfiguration=oldConfigurationElement != null ? XmlSerializer.deserialize(oldConfigurationElement,FlexBuildConfiguration.class) : null;
    processConfiguration(oldConfiguration,newConfiguration,moduleSettings,false,null,null,orderEntriesToAdd);
  }
 else {
    List<Element> flexFacets=getFlexFacets(moduleSettings);
    Set<String> sdkLibrariesIds=new HashSet<String>();
    for (int i=0; i < flexFacets.size(); i++) {
      Element facet=flexFacets.get(i);
      ModifiableFlexIdeBuildConfiguration newConfiguration;
      if (i == 0) {
        newConfiguration=(ModifiableFlexIdeBuildConfiguration)configurationManager.getBuildConfigurations()[0];
      }
 else {
        newConfiguration=ConversionHelper.createBuildConfiguration(configurationManager);
      }
      newConfiguration.setName(generateFacetBcName(facet));
      Element oldConfigurationElement=facet.getChild(FacetManagerImpl.CONFIGURATION_ELEMENT);
      if (oldConfigurationElement != null) {
        FlexBuildConfiguration oldConfiguration=XmlSerializer.deserialize(oldConfigurationElement,FlexBuildConfiguration.class);
        final String facetSdkName=oldConfigurationElement.getAttributeValue(FlexFacetConfigurationImpl.FLEX_SDK_ATTR_NAME);
        processConfiguration(oldConfiguration,newConfiguration,moduleSettings,true,facetSdkName,sdkLibrariesIds,orderEntriesToAdd);
      }
 else {
        processConfiguration(null,newConfiguration,moduleSettings,true,null,sdkLibrariesIds,orderEntriesToAdd);
      }
    }
    moduleSettings.setModuleType(FlexModuleType.MODULE_TYPE_ID);
    moduleSettings.getComponentElement(FacetManagerImpl.COMPONENT_NAME).getChildren(FacetManagerImpl.FACET_ELEMENT).removeAll(flexFacets);
  }
  Element rootManagerElement=JDomConvertingUtil.findOrCreateComponentElement(moduleSettings.getRootElement(),ModuleSettings.MODULE_ROOT_MANAGER_COMPONENT);
  rootManagerElement.addContent(orderEntriesToAdd);
  Element componentElement=JDomConvertingUtil.findOrCreateComponentElement(moduleSettings.getRootElement(),FlexBuildConfigurationManagerImpl.COMPONENT_NAME);
  addContent(ConversionHelper.serialize(configurationManager),componentElement);
  ignoreInapplicableFacets(moduleSettings);
}
