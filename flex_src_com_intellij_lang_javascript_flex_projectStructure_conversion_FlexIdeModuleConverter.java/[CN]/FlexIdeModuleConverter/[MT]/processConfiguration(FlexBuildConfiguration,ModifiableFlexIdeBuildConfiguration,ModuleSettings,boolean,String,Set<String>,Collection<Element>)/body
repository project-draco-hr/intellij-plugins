{
  if (oldConfiguration == null) {
    newBuildConfiguration.setOutputType(OutputType.Application);
  }
 else {
    if (FlexBuildConfiguration.LIBRARY.equals(oldConfiguration.OUTPUT_TYPE)) {
      newBuildConfiguration.setOutputType(OutputType.Library);
    }
 else {
      newBuildConfiguration.setOutputType(OutputType.Application);
    }
    if (newBuildConfiguration.getOutputType() == OutputType.Application) {
      newBuildConfiguration.setMainClass(oldConfiguration.MAIN_CLASS);
      myParams.addAppModuleAndBCName(module.getModuleName(),newBuildConfiguration.getName());
    }
    newBuildConfiguration.setOutputFileName(oldConfiguration.OUTPUT_FILE_NAME);
    newBuildConfiguration.setSkipCompile(!oldConfiguration.DO_BUILD);
    final Map<String,String> options=new THashMap<String,String>(newBuildConfiguration.getCompilerOptions().getAllOptions());
    if (oldConfiguration.USE_LOCALE_SETTINGS) {
      options.put("compiler.locale",oldConfiguration.LOCALE.replace(',',CompilerOptionInfo.LIST_ENTRIES_SEPARATOR));
    }
    if (!oldConfiguration.CONDITIONAL_COMPILATION_DEFINITION_LIST.isEmpty()) {
      final StringBuilder b=new StringBuilder();
      for (      FlexBuildConfiguration.ConditionalCompilationDefinition def : oldConfiguration.CONDITIONAL_COMPILATION_DEFINITION_LIST) {
        if (b.length() > 0)         b.append(CompilerOptionInfo.LIST_ENTRIES_SEPARATOR);
        b.append(def.NAME).append(CompilerOptionInfo.LIST_ENTRY_PARTS_SEPARATOR).append(def.VALUE);
      }
      options.put("compiler.define",b.toString());
    }
    if (!oldConfiguration.NAMESPACE_AND_MANIFEST_FILE_INFO_LIST.isEmpty()) {
      final StringBuilder b=new StringBuilder();
      for (      FlexBuildConfiguration.NamespaceAndManifestFileInfo info : oldConfiguration.NAMESPACE_AND_MANIFEST_FILE_INFO_LIST) {
        if (b.length() > 0)         b.append(CompilerOptionInfo.LIST_ENTRIES_SEPARATOR);
        b.append(info.NAMESPACE).append(CompilerOptionInfo.LIST_ENTRY_PARTS_SEPARATOR).append(info.MANIFEST_FILE_PATH);
      }
      options.put("compiler.namespaces.namespace",b.toString());
    }
    if (!oldConfiguration.PATH_TO_SERVICES_CONFIG_XML.isEmpty()) {
      options.put("compiler.services",oldConfiguration.PATH_TO_SERVICES_CONFIG_XML);
      options.put("compiler.context-root",oldConfiguration.CONTEXT_ROOT);
    }
    newBuildConfiguration.getCompilerOptions().setAllOptions(options);
  }
  String outputFolder;
  if (facet && oldConfiguration != null && oldConfiguration.USE_FACET_COMPILE_OUTPUT_PATH) {
    outputFolder=PathUtil.getCanonicalPath(module.expandPath(oldConfiguration.FACET_COMPILE_OUTPUT_PATH));
  }
 else {
    outputFolder=getOutputFolder(module);
  }
  newBuildConfiguration.setOutputFolder(outputFolder);
  Collection<Element> orderEntriesToRemove=new ArrayList<Element>();
  for (  Element orderEntry : module.getOrderEntries()) {
    String orderEntryType=orderEntry.getAttributeValue(OrderEntryFactory.ORDER_ENTRY_TYPE_ATTR);
    if (ModuleLibraryOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      Element library=orderEntry.getChild(LibraryImpl.ELEMENT);
      if (!isApplicableLibrary(library)) {
        orderEntriesToRemove.add(orderEntry);
        continue;
      }
      if (facet && AutogeneratedLibraryUtils.isAutogeneratedLibrary(library)) {
        orderEntriesToRemove.add(orderEntry);
        continue;
      }
      Element libraryProperties;
      if (facet && FlexLibraryType.FLEX_LIBRARY.getKindId().equals(library.getAttributeValue(LibraryImpl.LIBRARY_TYPE_ATTR))) {
        Element newEntry=(Element)orderEntry.clone();
        orderEntriesToAdd.add(newEntry);
        library=orderEntry.getChild(LibraryImpl.ELEMENT);
        libraryProperties=library.getChild(LibraryImpl.PROPERTIES_ELEMENT);
      }
 else {
        library.setAttribute(LibraryImpl.LIBRARY_TYPE_ATTR,FlexLibraryType.FLEX_LIBRARY.getKindId());
        libraryProperties=new Element(LibraryImpl.PROPERTIES_ELEMENT);
        library.getChildren().add(0,libraryProperties);
      }
      String libraryId=FlexLibraryIdGenerator.generateId();
      XmlSerializer.serializeInto(new FlexLibraryProperties(libraryId),libraryProperties);
      ModifiableModuleLibraryEntry moduleLibraryEntry=ConversionHelper.createModuleLibraryEntry(libraryId);
      convertDependencyType(orderEntry,moduleLibraryEntry.getDependencyType());
      newBuildConfiguration.getDependencies().getModifiableEntries().add(moduleLibraryEntry);
    }
 else     if ("library".equals(orderEntryType)) {
      String libraryName=orderEntry.getAttributeValue("name");
      String libraryLevel=orderEntry.getAttributeValue("level");
      if (myParams.libraryExists(libraryName,libraryLevel)) {
        myParams.changeLibraryTypeToFlex(libraryName,libraryLevel);
        ModifiableSharedLibraryEntry sharedLibraryEntry=ConversionHelper.createSharedLibraryEntry(libraryName,libraryLevel);
        convertDependencyType(orderEntry,sharedLibraryEntry.getDependencyType());
        newBuildConfiguration.getDependencies().getModifiableEntries().add(sharedLibraryEntry);
      }
 else {
        orderEntriesToRemove.add(orderEntry);
      }
    }
 else     if (ModuleOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      String moduleName=orderEntry.getAttributeValue(ModuleOrderEntryImpl.MODULE_NAME_ATTR);
      Collection<String> bcNames=myParams.getBcNamesForDependency(moduleName);
      for (      String bcName : bcNames) {
        ModifiableBuildConfigurationEntry bcEntry=ConversionHelper.createBuildConfigurationEntry(moduleName,bcName);
        convertDependencyType(orderEntry,bcEntry.getDependencyType());
        newBuildConfiguration.getDependencies().getModifiableEntries().add(bcEntry);
      }
      if (bcNames.isEmpty()) {
        orderEntriesToRemove.add(orderEntry);
      }
    }
 else     if (ModuleJdkOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      if (!facet) {
        String sdkName=orderEntry.getAttributeValue(ModuleJdkOrderEntryImpl.JDK_NAME_ATTR);
        String sdkType=orderEntry.getAttributeValue(ModuleJdkOrderEntryImpl.JDK_TYPE_ATTR);
        Element entryToAdd=processSdkEntry(newBuildConfiguration,sdkName,sdkType,null);
        ContainerUtil.addIfNotNull(entryToAdd,orderEntriesToAdd);
      }
      orderEntriesToRemove.add(orderEntry);
    }
 else     if (InheritedJdkOrderEntryImpl.ENTRY_TYPE.equals(orderEntryType)) {
      if (!facet) {
        Element entryToAdd=processSdkEntry(newBuildConfiguration,myParams.projectSdkName,myParams.projectSdkType,null);
        ContainerUtil.addIfNotNull(entryToAdd,orderEntriesToAdd);
      }
      orderEntriesToRemove.add(orderEntry);
    }
  }
  if (facetSdkName != null) {
    Element entryToAdd=processSdkEntry(newBuildConfiguration,facetSdkName,null,sdkLibrariesIds);
    ContainerUtil.addIfNotNull(entryToAdd,orderEntriesToAdd);
  }
  if (!orderEntriesToRemove.isEmpty()) {
    module.getOrderEntries().removeAll(orderEntriesToRemove);
  }
  if (newBuildConfiguration.getTargetPlatform() == TargetPlatform.Web) {
    final SdkEntry sdkEntry=newBuildConfiguration.getDependencies().getSdkEntry();
    if (sdkEntry != null) {
      final String sdkHome=PathUtil.getCanonicalPath(module.expandPath(sdkEntry.getHomePath()));
      final String targetPlayer=TargetPlayerUtils.getTargetPlayer(oldConfiguration == null ? null : oldConfiguration.TARGET_PLAYER_VERSION,sdkHome);
      newBuildConfiguration.getDependencies().setTargetPlayer(targetPlayer);
    }
  }
}
