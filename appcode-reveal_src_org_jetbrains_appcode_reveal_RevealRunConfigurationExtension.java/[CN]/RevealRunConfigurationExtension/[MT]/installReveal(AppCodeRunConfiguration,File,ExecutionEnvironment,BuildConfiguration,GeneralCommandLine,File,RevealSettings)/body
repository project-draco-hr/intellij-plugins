{
  File appBundle=Reveal.getDefaultRevealApplicationBundle();
  if (appBundle == null || !appBundle.exists())   throw new ExecutionException("Reveal application bundle not found");
  ;
  File libReveal=Reveal.getRevealLib(appBundle,getSdk(configuration));
  if (libReveal == null || !libReveal.exists())   throw new ExecutionException("Reveal library not found");
  Reveal.LOG.info("Reveal lib found at " + libReveal);
  if (hasBundledRevealLib(buildConfiguration,libReveal)) {
    return new File(commandLine.getExePath(),libReveal.getName());
  }
  BuildDestination destination=buildConfiguration.getDestination();
  if (!destination.isDevice()) {
    return libReveal;
  }
  if (!settings.autoInstall) {
    if (!settings.askToEnableAutoInstall)     return null;
    final int[] response=new int[1];
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        response[0]=Messages.showYesNoDialog("Project is not configured with Reveal library.<br><br>" + "Would you like to enable automatic library upload for this run configuration?","Reveal",Messages.YES_BUTTON,Messages.NO_BUTTON,Messages.getQuestionIcon(),new DialogWrapper.DoNotAskOption(){
          @Override public boolean isToBeShown(){
            return true;
          }
          @Override public void setToBeShown(          boolean value,          int exitCode){
            settings.askToEnableAutoInstall=value;
          }
          @Override public boolean canBeHidden(){
            return true;
          }
          @Override public boolean shouldSaveOptionsOnCancel(){
            return false;
          }
          @NotNull @Override public String getDoNotShowMessage(){
            return CommonBundle.message("dialog.options.do.not.show");
          }
        }
);
      }
    }
);
    if (response[0] != Messages.YES)     return null;
    settings.autoInstall=true;
    settings.askToEnableAutoInstall=true;
    setRevealSettings(configuration,settings);
  }
  UsageTrigger.trigger("appcode.reveal.installOnDevice");
  AMDevice device=destination.getDeviceSafe();
  return installOnDevice(libReveal,buildConfiguration,mainExecutable,commandLine,device,getBundleID(environment,product));
}
