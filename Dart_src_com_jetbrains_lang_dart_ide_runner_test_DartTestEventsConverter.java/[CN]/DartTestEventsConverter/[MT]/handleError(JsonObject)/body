{
  String message=getErrorMessage(obj);
  if (message.startsWith(FAILED_TO_LOAD)) {
    JsonElement elem=obj.get(JSON_TEST_ID);
    if (elem != null && elem.isJsonPrimitive() && (myTestData.get(elem.getAsInt()) == null || !myTestData.get(elem.getAsInt()).hasValidParent())) {
      return failedToLoad(message,elem.getAsInt());
    }
  }
  Test test=getTest(obj);
  final ServiceMessageBuilder testError=ServiceMessageBuilder.testFailed(test.getBaseName());
  String failureMessage=message;
  int firstExpectedIndex=message.indexOf(EXPECTED);
  if (firstExpectedIndex >= 0) {
    Matcher matcher=EXPECTED_ACTUAL_RESULT.matcher(message);
    if (matcher.find(firstExpectedIndex + EXPECTED.length())) {
      String expectedText=matcher.group(1);
      String actualText=matcher.group(2);
      testError.addAttribute("expected",expectedText);
      testError.addAttribute("actual",actualText);
      if (firstExpectedIndex == 0) {
        failureMessage="Comparison failed";
      }
 else {
        failureMessage=message.substring(0,firstExpectedIndex);
      }
    }
  }
  if (!getBoolean(obj,JSON_IS_FAILURE))   testError.addAttribute("error","true");
  testError.addAttribute("message",failureMessage + NEWLINE);
  long duration=getTestMillis(obj) - myStartMillis;
  testError.addAttribute("duration",Long.toString(duration));
  final ServiceMessageBuilder testStdErr=ServiceMessageBuilder.testStdErr(test.getBaseName());
  testStdErr.addAttribute("out",getStackTrace(obj));
  final ServiceMessageBuilder testFinished=ServiceMessageBuilder.testFinished(test.getBaseName());
  testFinished.addAttribute("duration",Long.toString(duration));
  return finishMessage(testError,test.getId(),test.getValidParentId()) && finishMessage(testStdErr,test.getId(),test.getValidParentId());
}
