{
  if (!(file instanceof PsiJavaFile))   return false;
  final Project project=file.getProject();
  final VirtualFile vFile=ObjectUtils.assertNotNull(file.getVirtualFile());
  final OpenFileDescriptor descriptor=new OpenFileDescriptor(project,vFile);
  FileEditorManager.getInstance(project).getAllEditors(vFile);
  FileEditorManager.getInstance(project).openTextEditor(descriptor,true);
  final Editor editor=FileEditorManager.getInstance(project).getSelectedTextEditor();
  if (editor != null) {
    final TemplateManager templateManager=TemplateManager.getInstance(file.getProject());
    final TemplateState templateState=TemplateManagerImpl.getTemplateState(editor);
    final Template template=templateManager.getActiveTemplate(editor);
    if (templateState != null && template != null) {
      templateState.gotoEnd();
    }
  }
  final PsiMethod element=buildStepDefinitionByStep(step);
  PsiClass clazz=PsiTreeUtil.getChildOfType(file,PsiClass.class);
  if (clazz != null) {
    PsiMethod addedElement=(PsiMethod)clazz.add(element);
    addedElement=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(addedElement);
    JavaCodeStyleManager.getInstance(project).shortenClassReferences(addedElement);
  }
  return true;
}
