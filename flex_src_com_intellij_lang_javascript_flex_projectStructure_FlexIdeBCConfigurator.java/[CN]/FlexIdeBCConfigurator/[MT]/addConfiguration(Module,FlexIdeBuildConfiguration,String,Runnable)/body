{
  final Project project=module.getProject();
  final AddBuildConfigurationDialog dialog=new AddBuildConfigurationDialog(project,dialogTitle,getUsedNames(module),configuration.TARGET_PLATFORM,configuration.PURE_ACTION_SCRIPT,configuration.OUTPUT_TYPE);
  dialog.show();
  if (dialog.isOK()) {
    myModified=true;
    configuration.NAME=dialog.getName();
    configuration.TARGET_PLATFORM=dialog.getTargetPlatform();
    configuration.PURE_ACTION_SCRIPT=dialog.isPureActionScript();
    configuration.OUTPUT_TYPE=dialog.getOutputType();
    resetNonApplicableValuesToDefaults(configuration);
    final String outputFileName=configuration.OUTPUT_FILE_NAME;
    final String lowercase=outputFileName.toLowerCase();
    if (lowercase.endsWith(".swf") || lowercase.endsWith(".swc")) {
      final String extension=configuration.OUTPUT_TYPE == OutputType.Library ? ".swc" : ".swf";
      configuration.OUTPUT_FILE_NAME=outputFileName.substring(0,outputFileName.length() - ".sw_".length()) + extension;
    }
    final FlexIdeBCConfigurable configurable=new FlexIdeBCConfigurable(module,configuration,mySdksModel,treeNodeNameUpdater);
    NamedConfigurable<FlexIdeBuildConfiguration> wrapped=configurable.wrapInTabsIfNeeded();
    myModuleToConfigurablesMap.get(module).add(wrapped);
    myConfigurationsToModuleMap.put(configuration,module);
    final MasterDetailsComponent.MyNode node=new BuildConfigurationNode(wrapped);
    FlexIdeModuleStructureExtension.addConfigurationChildNodes(configurable,node);
    final ModuleStructureConfigurable moduleStructureConfigurable=ModuleStructureConfigurable.getInstance(project);
    moduleStructureConfigurable.addNode(node,moduleStructureConfigurable.findModuleNode(module));
    final Place place=new Place().putPath(ProjectStructureConfigurable.CATEGORY,moduleStructureConfigurable).putPath(MasterDetailsComponent.TREE_OBJECT,configuration);
    ProjectStructureConfigurable.getInstance(project).navigateTo(place,true);
  }
}
