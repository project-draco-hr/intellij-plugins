{
  final Project project=module.getProject();
  final AddBuildConfigurationDialog dialog=new AddBuildConfigurationDialog(project,dialogTitle,getUsedNames(module),configuration.TARGET_PLATFORM,configuration.PURE_ACTION_SCRIPT,configuration.OUTPUT_TYPE);
  dialog.show();
  if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
    myModified=true;
    configuration.NAME=dialog.getName();
    configuration.TARGET_PLATFORM=dialog.getTargetPlatform();
    configuration.PURE_ACTION_SCRIPT=dialog.isPureActionScript();
    configuration.OUTPUT_TYPE=dialog.getOutputType();
    final FlexIdeBCConfigurable configurable=new FlexIdeBCConfigurable(module,configuration,treeNodeNameUpdater,modifiableRootModel);
    final List<NamedConfigurable<FlexIdeBuildConfiguration>> configurables=myModuleToConfigurablesMap.get(module);
    configurables.add(configurable);
    myConfigurationsToModuleMap.put(configuration,module);
    final MasterDetailsComponent.MyNode node=new BuildConfigurationNode(configurable.wrapInTabsIfNeeded());
    FlexIdeModuleStructureExtension.addConfigurationChildNodes(project,configurable,node);
    final ModuleStructureConfigurable moduleStructureConfigurable=ModuleStructureConfigurable.getInstance(project);
    moduleStructureConfigurable.addNode(node,moduleStructureConfigurable.findModuleNode(module));
    final Place place=new Place().putPath(ProjectStructureConfigurable.CATEGORY,moduleStructureConfigurable).putPath(MasterDetailsComponent.TREE_OBJECT,configuration);
    ProjectStructureConfigurable.getInstance(project).navigateTo(place,true);
  }
}
