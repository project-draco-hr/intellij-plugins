{
  if (StringUtil.isEmptyOrSpaces(configFilePath))   return Collections.emptyList();
  final VirtualFile configFile=LocalFileSystem.getInstance().findFileByPath(configFilePath);
  if (configFile == null || configFile.isDirectory())   return Collections.emptyList();
  final FileDocumentManager documentManager=FileDocumentManager.getInstance();
  final com.intellij.openapi.editor.Document cachedDocument=documentManager.getCachedDocument(configFile);
  final Long currentTimestamp=cachedDocument != null ? cachedDocument.getModificationStamp() : configFile.getModificationCount();
  final Long cachedTimestamp=configFileToTimestamp.get(configFile);
  if (cachedTimestamp == null || !cachedTimestamp.equals(currentTimestamp)) {
    configFileToTimestamp.remove(configFile);
    configFileToConditionalCompilerDefinitions.remove(configFile);
    try {
      final Document document=cachedDocument == null ? JDOMUtil.loadDocument(configFile.getInputStream()) : JDOMUtil.loadDocument(cachedDocument.getCharsSequence());
      final Collection<Pair<String,String>> result=new ArrayList<Pair<String,String>>();
      final Element rootElement=document.getRootElement();
      if (rootElement.getName().equals(FlexCompilerConfigFileUtilBase.FLEX_CONFIG)) {
        for (        Element compilerElement : rootElement.getChildren(FlexCompilerConfigFileUtilBase.COMPILER,rootElement.getNamespace())) {
          for (          Element defineElement : compilerElement.getChildren(DEFINE,rootElement.getNamespace())) {
            final String name=defineElement.getChildText(NAME,rootElement.getNamespace());
            final String value=defineElement.getChildText(VALUE,rootElement.getNamespace());
            if (!StringUtil.isEmpty(name) && value != null) {
              result.add(Pair.create(name,value));
            }
          }
        }
      }
      configFileToTimestamp.put(configFile,currentTimestamp);
      configFileToConditionalCompilerDefinitions.put(configFile,result);
      return result;
    }
 catch (    JDOMException ignored) {
    }
catch (    IOException ignored) {
    }
    return Collections.emptyList();
  }
 else {
    return configFileToConditionalCompilerDefinitions.get(configFile);
  }
}
