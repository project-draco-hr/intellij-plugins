{
  final OgnlParenthesizedExpression parenthesizedExpression=parse("(3 + (4 * 5))");
  final OgnlExpression expression=parenthesizedExpression.getExpression();
  assertNotNull(expression);
  assertElementType(OgnlTypes.BINARY_EXPRESSION,expression);
  final OgnlBinaryExpression binaryExpression=(OgnlBinaryExpression)expression;
  assertElementType(OgnlTypes.LITERAL_EXPRESSION,binaryExpression.getLeft());
  assertEquals(OgnlTypes.PLUS,binaryExpression.getOperator());
  assertElementType(OgnlTypes.PARENTHESIZED_EXPRESSION,binaryExpression.getRight());
  final OgnlParenthesizedExpression nestedParenthesizedExpression=(OgnlParenthesizedExpression)binaryExpression.getRight();
  assertNotNull(nestedParenthesizedExpression);
  assertElementType(OgnlTypes.BINARY_EXPRESSION,nestedParenthesizedExpression.getExpression());
  final OgnlBinaryExpression nestedBinaryExpression=(OgnlBinaryExpression)nestedParenthesizedExpression.getExpression();
  assertNotNull(nestedBinaryExpression);
  assertElementType(OgnlTypes.LITERAL_EXPRESSION,nestedBinaryExpression.getLeft());
  assertEquals(OgnlTypes.MULTIPLY,nestedBinaryExpression.getOperator());
  assertElementType(OgnlTypes.LITERAL_EXPRESSION,nestedBinaryExpression.getRight());
  assertEquals(PsiType.INT,nestedBinaryExpression.getType());
}
