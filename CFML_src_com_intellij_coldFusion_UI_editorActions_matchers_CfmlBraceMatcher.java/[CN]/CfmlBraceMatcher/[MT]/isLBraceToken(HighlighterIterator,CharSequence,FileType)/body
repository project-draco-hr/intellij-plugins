{
  final IElementType tokenType=iterator.getTokenType();
  PairedBraceMatcher matcher=LanguageBraceMatching.INSTANCE.forLanguage(tokenType.getLanguage());
  if (matcher != null) {
    BracePair[] pairs=matcher.getPairs();
    for (    BracePair pair : pairs) {
      if (pair.getLeftBraceType() == tokenType)       return true;
    }
  }
  if (!tokenType.getLanguage().equals(CfmlLanguage.INSTANCE)) {
    FileType tokenFileType=iterator.getTokenType().getLanguage().getAssociatedFileType();
    if (tokenFileType != null && tokenFileType != CfmlFileType.INSTANCE) {
      for (      FileTypeExtensionPoint<BraceMatcher> ext : Extensions.getExtensions(BraceMatcher.EP_NAME)) {
        if (ext.filetype != null && ext.filetype.equals(tokenFileType.getName())) {
          return ext.getInstance().isLBraceToken(iterator,fileText,tokenFileType instanceof XmlFileType ? StdFileTypes.HTML : tokenFileType);
        }
      }
    }
  }
  for (  BracePair pair : PAIRS) {
    if (pair.getLeftBraceType() == tokenType) {
      return true;
    }
  }
  return tokenType.equals(CfmlTokenTypes.OPENER) && (!CfmlUtil.isEndTagRequired(getTagName(fileText,iterator),null) || findEndTag(fileText,iterator));
}
