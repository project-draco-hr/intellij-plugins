{
  if (myEntries.isEmpty()) {
    return EMPTY;
  }
  return ContainerUtil.mapNotNull(myEntries.toArray(new DependencyEntry[myEntries.size()]),new Function<DependencyEntry,EntryInfo>(){
    @Override public EntryInfo fun(    DependencyEntry entry){
      EntryInfo entryInfo=new EntryInfo();
      entryInfo.DEPENDENCY_TYPE_ELEMENT=new Element(DEPENDENCY_TYPE_ELEMENT_NAME);
      entry.myDependencyType.writeExternal(entryInfo.DEPENDENCY_TYPE_ELEMENT);
      if (entry instanceof BuildConfigurationEntry) {
        BuildConfigurationEntry buildConfigurationEntry=(BuildConfigurationEntry)entry;
        entryInfo.MODULE_NAME=buildConfigurationEntry.getModuleName();
        entryInfo.BC_NAME=buildConfigurationEntry.getBcName();
        return entryInfo;
      }
 else       if (entry instanceof ModuleLibraryEntry) {
        entryInfo.LIBRARY_ELEMENT=new Element("library");
        try {
          ((ModuleLibraryEntry)entry).writeExternal(entryInfo.LIBRARY_ELEMENT);
        }
 catch (        WriteExternalException e) {
          LOG.error(e);
          return null;
        }
        return entryInfo;
      }
 else {
        throw new IllegalArgumentException("unknown type: " + entry.getClass());
      }
    }
  }
,new EntryInfo[0]);
}
