{
  final Collection<Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem>> problems=new ArrayList<Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem>>();
  for (  final Pair<Module,FlexBuildConfiguration> moduleAndBC : modulesAndBCsToCompile) {
    final Module module=moduleAndBC.first;
    final FlexBuildConfiguration bc=moduleAndBC.second;
    final Consumer<FlashProjectStructureProblem> errorConsumer=new Consumer<FlashProjectStructureProblem>(){
      public void consume(      final FlashProjectStructureProblem problem){
        problems.add(Trinity.create(module,bc,problem));
      }
    }
;
    checkConfiguration(module,bc,false,errorConsumer);
    final RunConfiguration runConfig=CompileStepBeforeRun.getRunConfiguration(scope);
    if (bc.getNature().isApp() && runConfig instanceof FlashRunConfiguration) {
      final FlashRunnerParameters params=((FlashRunConfiguration)runConfig).getRunnerParameters();
      if (module.getName().equals(params.getModuleName()) && bc.getName().equals(params.getBCName())) {
        if (bc.getNature().isDesktopPlatform()) {
          FlashRunnerParameters.checkAirVersionIfCustomDescriptor(module,bc.getSdk(),bc.getAirDesktopPackagingOptions(),errorConsumer,false,"does not matter");
        }
 else         if (bc.getNature().isMobilePlatform()) {
switch (params.getMobileRunTarget()) {
case Emulator:
switch (params.getAppDescriptorForEmulator()) {
case Android:
              FlashRunnerParameters.checkAirVersionIfCustomDescriptor(module,bc.getSdk(),bc.getAndroidPackagingOptions(),errorConsumer,false,"does not matter");
            break;
case IOS:
          FlashRunnerParameters.checkAirVersionIfCustomDescriptor(module,bc.getSdk(),bc.getIosPackagingOptions(),errorConsumer,false,"does not matter");
        break;
    }
  break;
case AndroidDevice:
checkPackagingOptions(module,bc.getSdk(),bc.getAndroidPackagingOptions(),false,PathUtil.getParentPath(bc.getActualOutputFilePath()),errorConsumer);
break;
case iOSSimulator:
checkPackagingOptions(module,bc.getSdk(),bc.getIosPackagingOptions(),true,PathUtil.getParentPath(bc.getActualOutputFilePath()),errorConsumer);
break;
case iOSDevice:
checkPackagingOptions(module,bc.getSdk(),bc.getIosPackagingOptions(),false,PathUtil.getParentPath(bc.getActualOutputFilePath()),errorConsumer);
break;
}
}
}
}
}
checkSimilarOutputFiles(modulesAndBCsToCompile,new Consumer<Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem>>(){
public void consume(final Trinity<Module,FlexBuildConfiguration,FlashProjectStructureProblem> trinity){
problems.add(trinity);
}
}
);
return problems;
}
