{
  final Map<Module,ModifiableRootModel> models=new HashMap<Module,ModifiableRootModel>();
  return new FlexProjectConfigurationEditor(project,new FlexProjectConfigurationEditor.ProjectModifiableModelProvider(){
    @Override public Module[] getModules(){
      return modules;
    }
    @Override public ModifiableRootModel getModuleModifiableModel(    Module module){
      ModifiableRootModel result=models.get(module);
      if (result == null) {
        result=ModuleRootManager.getInstance(module).getModifiableModel();
        models.put(module,result);
        final ModifiableRootModel result_=result;
        Disposer.register(parentDisposable,new Disposable(){
          @Override public void dispose(){
            if (!result_.isDisposed())             result_.dispose();
          }
        }
);
      }
      return result;
    }
    @Override public void addListener(    FlexIdeBCConfigurator.Listener listener,    Disposable parentDisposable){
    }
    @Override public void commitModifiableModels() throws ConfigurationException {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          for (          ModifiableRootModel model : models.values()) {
            model.commit();
          }
        }
      }
);
    }
    public Library findSourceLibraryForLiveName(    final String name,    final String level){
      return findSourceLibrary(name,level);
    }
    public Library findSourceLibrary(    final String name,    final String level){
      return getLibrariesModifiableModel(level).getLibraryByName(name);
    }
    public LibraryTableBase.ModifiableModelEx getLibrariesModifiableModel(    final String level){
      if (LibraryTablesRegistrar.APPLICATION_LEVEL.equals(level)) {
        return (LibraryTableBase.ModifiableModelEx)ApplicationLibraryTable.getApplicationTable().getModifiableModel();
      }
 else {
        throw new UnsupportedOperationException();
      }
    }
    public Sdk[] getAllSdks(){
      return FlexProjectConfigurationEditor.getPersistedFlexSdks();
    }
  }
);
}
