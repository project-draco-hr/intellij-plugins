{
  final PsiElement at=file.findElementAt(editor.getCaretModel().getOffset());
  final DartComponent inComponent=PsiTreeUtil.getParentOfType(at,DartComponent.class);
  final DartComponent inClass=PsiTreeUtil.getParentOfType(at,DartClass.class);
  if (inClass == null || inComponent == null || inComponent.getComponentName() == null) {
    return;
  }
  final DartComponentType inComponentType=DartComponentType.typeOf(inComponent);
  final String filePath=file.getVirtualFile().getPath();
  final int offset=inComponent.getComponentName().getTextOffset();
  final List<TypeHierarchyItem> items=DartAnalysisServerService.getInstance().search_getTypeHierarchy(filePath,offset,true);
  final List<DartComponent> supers=Lists.newArrayList();
  boolean first=true;
  for (  TypeHierarchyItem item : items) {
    if (first) {
      first=false;
      continue;
    }
    final Element itemElement;
    if (inComponentType == DartComponentType.CLASS) {
      itemElement=item.getClassElement();
      if (itemElement != null && "Object".equals(itemElement.getName())) {
        continue;
      }
    }
 else {
      itemElement=item.getMemberElement();
    }
    if (itemElement == null) {
      continue;
    }
    final Location itemLocation=itemElement.getLocation();
    final DartComponent itemComponent=DartServerOverrideMarkerProvider.findDartComponent(project,itemLocation.getFile(),itemLocation.getOffset());
    if (itemComponent != null) {
      supers.add(itemComponent);
    }
  }
  final String title;
  if (inComponentType == DartComponentType.CLASS) {
    title="Superclasses of " + inComponent.getName();
  }
 else {
    title="Overridden members of superclasses";
  }
  final NavigatablePsiElement[] targets=DartResolveUtil.getComponentNames(supers).toArray(new NavigatablePsiElement[supers.size()]);
  PsiElementListNavigator.openTargets(editor,targets,title,null,new DefaultPsiElementCellRenderer());
}
