{
  final LibraryCollector libraryCollector=new LibraryCollector();
  final StringRegistry.StringWriter stringWriter=new StringRegistry.StringWriter(16384);
  stringWriter.startChange();
  final ProblemsHolder problemsHolder=new ProblemsHolder();
  try {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        libraryCollector.collect(module,new LibraryStyleInfoCollector(project,module,stringWriter,problemsHolder));
      }
    }
);
  }
 catch (  Throwable e) {
    stringWriter.rollbackChange();
    throw new InitException(e,"error.collect.libraries");
  }
  final LibrarySet externalLibrarySet;
  final InfoList<Project,ProjectInfo> registeredProjects=client.getRegisteredProjects();
  if (!registeredProjects.contains(project)) {
    String librarySetId=project.getLocationHash();
    try {
      externalLibrarySet=new LibrarySet(librarySetId,ApplicationDomainCreationPolicy.ONE,new SwcDependenciesSorter(appDir).sort(libraryCollector.getExternalLibraries(),librarySetId,libraryCollector.getFlexSdkVersion()));
    }
 catch (    Throwable e) {
      throw new InitException(e,"error.sort.libraries");
    }
    registeredProjects.add(new ProjectInfo(project,externalLibrarySet));
    client.openProject(project);
    client.registerLibrarySet(externalLibrarySet,stringWriter);
  }
 else {
    stringWriter.finishChange();
    externalLibrarySet=registeredProjects.getInfo(project).getLibrarySet();
  }
  ModuleInfo moduleInfo=new ModuleInfo(module);
  stringWriter.startChange();
  try {
    ModuleInfoUtil.collectLocalStyleHolders(moduleInfo,libraryCollector.getFlexSdkVersion(),stringWriter,problemsHolder);
  }
 catch (  Throwable e) {
    stringWriter.rollbackChange();
    throw new InitException(e,"error.collect.local.style.holders");
  }
  if (!problemsHolder.isEmpty()) {
    DocumentProblemManager.getInstance().report(module.getProject(),problemsHolder);
  }
  client.registerModule(project,moduleInfo,new String[]{externalLibrarySet.getId()},stringWriter);
}
