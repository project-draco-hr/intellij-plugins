{
  DesignerApplicationUtil.AdlRunConfiguration adlRunConfiguration;
  try {
    adlRunConfiguration=DesignerApplicationUtil.findSuitableFlexSdk();
    if (adlRunConfiguration == null) {
      final String message=FlexUIDesignerBundle.message("error.suitable.fdk.not.found",SystemInfo.isLinux ? FlexUIDesignerBundle.message("error.suitable.fdk.not.found.linux") : "");
      Messages.showErrorDialog(project,message,FlexUIDesignerBundle.message(debug ? "action.FlexUIDesigner.RunDesignView.text" : "action.FlexUIDesigner.DebugDesignView.text"));
      final ProjectJdksEditor editor=new ProjectJdksEditor(null,project,WindowManager.getInstance().suggestParentWindow(project));
      editor.show();
      if (editor.isOK()) {
        adlRunConfiguration=DesignerApplicationUtil.findSuitableFlexSdk();
      }
      if (adlRunConfiguration == null) {
        documentOpening=false;
        return;
      }
    }
    if (DebugPathManager.IS_DEV) {
      final String fudHome=DebugPathManager.getFudHome();
      final List<String> arguments=new ArrayList<String>();
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        arguments.add("-p");
        arguments.add(fudHome + "/test-app-plugin/target/test-1.0-SNAPSHOT.swf");
      }
      arguments.add("-cdd");
      arguments.add(fudHome + "/flex-injection/target");
      adlRunConfiguration.arguments=arguments;
    }
    if (appDir == null) {
      appDir=new File(PathManager.getSystemPath(),"flexUIDesigner");
    }
    server=new Server(new PendingOpenDocumentTask(project,module,psiFile),this);
  }
 catch (  Throwable e) {
    LOG.error(e);
    documentOpening=false;
    return;
  }
  DesignerApplicationUtil.AdlRunTask task=new DesignerApplicationUtil.AdlRunTask(adlRunConfiguration){
    @Override public void run(){
      try {
        copyAppFiles();
        adlProcessHandler=DesignerApplicationUtil.runAdl(runConfiguration,appDir.getPath() + "/" + DESCRIPTOR_XML,server.listen(),new Consumer<Integer>(){
          @Override public void consume(          Integer integer){
            adlProcessHandler=null;
            if (onAdlExit != null) {
              ApplicationManager.getApplication().invokeLater(onAdlExit);
            }
            documentOpening=false;
          }
        }
);
      }
 catch (      IOException e) {
        LOG.error(e);
        try {
          server.close();
        }
 catch (        IOException ignored) {
        }
      }
 finally {
        documentOpening=false;
      }
    }
  }
;
  if (debug) {
    adlRunConfiguration.debug=true;
    try {
      DesignerApplicationUtil.runDebugger(module,task);
    }
 catch (    ExecutionException e) {
      LOG.error(e);
    }
  }
 else {
    task.run();
  }
}
