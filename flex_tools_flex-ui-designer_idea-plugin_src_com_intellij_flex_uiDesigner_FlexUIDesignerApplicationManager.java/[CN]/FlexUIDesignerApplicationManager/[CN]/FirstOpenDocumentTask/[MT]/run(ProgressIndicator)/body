{
  this.indicator=indicator;
  AdlRunConfiguration adlRunConfiguration;
  try {
    indicator.setText(FlexUIDesignerBundle.message("copy.app.files"));
    DesignerApplicationUtil.copyAppFiles();
    adlRunConfiguration=DesignerApplicationUtil.findSuitableFlexSdk();
    if (adlRunConfiguration == null) {
      String message=FlexUIDesignerBundle.message(SystemInfo.isLinux ? "no.sdk.to.launch.designer.linux" : "no.sdk.to.launch.designer");
      notifyUser(debug,message,module.getProject(),new Consumer<String>(){
        @Override public void consume(        String id){
          if ("edit".equals(id)) {
            if (PlatformUtils.isFlexIde()) {
              if (ProjectSettingsService.getInstance(myProject).canOpenModuleDependenciesSettings()) {
                ProjectSettingsService.getInstance(myProject).openModuleDependenciesSettings(module,null);
              }
            }
 else {
              new ProjectJdksEditor(null,module.getProject(),WindowManager.getInstance().suggestParentWindow(module.getProject())).show();
            }
          }
 else {
            LOG.error("unexpected id: " + id);
          }
        }
      }
);
      indicator.cancel();
      return;
    }
    indicator.checkCanceled();
    runInitializeLibrariesAndModuleThread();
    appParentDisposable=new ParentDisposable();
    final List<String> arguments=new ArrayList<String>();
    arguments.add(String.valueOf(new MessageSocketManager(this,DesignerApplicationUtil.APP_DIR).listen()));
    arguments.add(String.valueOf(new ErrorSocketManager().listen()));
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      DesignerApplicationUtil.addTestPlugin(arguments);
    }
    adlRunConfiguration.arguments=arguments;
  }
 catch (  Throwable e) {
    LOG.error(e);
    return;
  }
  final AdlRunTask task=new AdlRunTask(adlRunConfiguration){
    @Override public void run(){
      checkCanceled();
      if (projectManagerListener == null) {
        attachApplicationLevelListeners();
      }
      try {
        adlProcessHandler=runAdl(runConfiguration,DesignerApplicationUtil.APP_DIR.getPath() + "/" + DesignerApplicationUtil.DESCRIPTOR_XML,new Consumer<Integer>(){
          @Override public void consume(          Integer exitCode){
            adlProcessHandler=null;
            LOG.error(DesignerApplicationUtil.describeAdlExit(exitCode,runConfiguration));
            adlExitCode=exitCode;
            if (libraryAndModuleInitialized) {
              cancel();
            }
          }
        }
);
      }
 catch (      IOException e) {
        LOG.error(e);
        cancel();
      }
    }
  }
;
  if (debug) {
    adlRunConfiguration.debug=true;
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        try {
          DesignerApplicationUtil.runDebugger(module,task);
        }
 catch (        ExecutionException e) {
          LOG.error(e);
        }
      }
    }
);
  }
 else {
    task.run();
  }
  semaphore.down();
  semaphore.waitFor();
  openDocument();
  if (isHeadless()) {
    if (indicator.isCanceled()) {
      onCancel();
    }
 else {
      onSuccess();
    }
  }
}
