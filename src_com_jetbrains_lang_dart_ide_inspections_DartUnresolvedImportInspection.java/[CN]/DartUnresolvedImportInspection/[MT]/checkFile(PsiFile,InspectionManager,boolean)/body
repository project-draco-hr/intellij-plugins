{
  final List<ProblemDescriptor> result=new ArrayList<ProblemDescriptor>();
  for (  PsiElement root : DartResolveUtil.findDartRoots(file)) {
    root.acceptChildren(new DartRecursiveVisitor(){
      @Override public void visitPathOrLibraryReference(      @NotNull DartPathOrLibraryReference pathOrLibraryReference){
        String pathOrLibraryReferenceText=StringUtil.unquoteString(pathOrLibraryReference.getText());
        if (URLUtil.containsScheme(pathOrLibraryReferenceText) || !pathOrLibraryReferenceText.endsWith(".dart")) {
          return;
        }
        for (        PsiReference reference : pathOrLibraryReference.getReferences()) {
          if (reference instanceof FileReference && reference.resolve() == null) {
            result.add(manager.createProblemDescriptor(reference.getElement(),reference.getRangeInElement(),getDisplayName(),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly,((FileReference)reference).getQuickFixes()));
          }
        }
      }
    }
);
  }
  return result.isEmpty() ? super.checkFile(file,manager,isOnTheFly) : ArrayUtil.toObjectArray(result,ProblemDescriptor.class);
}
