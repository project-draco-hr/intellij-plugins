{
  return new DataIndexer<String,Void,FileContent>(){
    @NotNull @Override public Map<String,Void> map(    FileContent inputData){
      JSFile jsFile=ObjectUtils.tryCast(inputData.getPsiFile(),JSFile.class);
      if (jsFile == null) {
        return Collections.emptyMap();
      }
      JasmineFileStructureBuilder jasmineFileStructureBuilder=JasmineFileStructureBuilder.getInstance();
      JasmineFileStructure jasmineFileStructure=jasmineFileStructureBuilder.fetchCachedTestFileStructure(jsFile);
      QUnitFileStructure qunitFileStructure=QUnitFileStructureBuilder.getInstance().fetchCachedTestFileStructure(jsFile);
      DefaultQUnitModuleStructure defaultQUnitModuleStructure=qunitFileStructure.getDefaultModuleStructure();
      if (!jasmineFileStructure.hasJasmineSymbols() && defaultQUnitModuleStructure.getTestCount() == 0) {
        return Collections.emptyMap();
      }
      Map<String,Void> testNames=new HashMap<String,Void>();
      for (      JasmineSuiteStructure suiteStructure : jasmineFileStructure.getSuites()) {
        addAllDescendantSuites(testNames,suiteStructure,"");
      }
      for (      QUnitTestMethodStructure testMethodStructure : defaultQUnitModuleStructure.getTestMethodStructures()) {
        testNames.put(getQUnitTestNameKey(testMethodStructure.getNameWithJstdPrefix()),null);
      }
      return testNames;
    }
  }
;
}
