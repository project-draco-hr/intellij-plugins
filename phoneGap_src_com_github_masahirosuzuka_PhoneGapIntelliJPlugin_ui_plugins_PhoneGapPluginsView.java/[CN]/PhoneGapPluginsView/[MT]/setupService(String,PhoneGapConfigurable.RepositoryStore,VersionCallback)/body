{
  packagesNotificationPanel.removeAllLinkHandlers();
  packagesNotificationPanel.hide();
  callback.forVersion("");
  if (StringUtil.isEmpty(path)) {
    return;
  }
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      final Ref<PhoneGapPackageManagementService> service=new Ref<PhoneGapPackageManagementService>();
      final Ref<String> error=new Ref<String>();
      final Ref<String> warning=new Ref<String>();
      final Ref<String> version=new Ref<String>();
      try {
        PhoneGapCommandLine commandLine=new PhoneGapCommandLine(path,myProject.getBasePath());
        if (commandLine.isCorrectExecutable()) {
          version.set(commandLine.version());
          ProcessOutput output=commandLine.pluginListRaw();
          if (StringUtil.isEmpty(output.getStderr())) {
            service.set(new PhoneGapPackageManagementService(commandLine,repositoryStore));
            if (commandLine.isOld()) {
              warning.set(PhoneGapBundle.message("phonegap.plugins.executable.version.error"));
            }
          }
 else {
            error.set("Project root directory is not " + commandLine.getPlatformName() + " project");
          }
        }
 else {
          error.set(PhoneGapBundle.message("phonegap.plugins.executable.error"));
        }
      }
 catch (      Exception e) {
        error.set(PhoneGapBundle.message("phonegap.plugins.executable.error"));
      }
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          myPanel.updatePackages(service.get());
          if (error.get() != null) {
            packagesNotificationPanel.showError(error.get(),null,null);
          }
          if (warning.get() != null) {
            packagesNotificationPanel.showWarning(warning.get());
          }
          callback.forVersion(version.get());
        }
      }
);
    }
  }
);
}
