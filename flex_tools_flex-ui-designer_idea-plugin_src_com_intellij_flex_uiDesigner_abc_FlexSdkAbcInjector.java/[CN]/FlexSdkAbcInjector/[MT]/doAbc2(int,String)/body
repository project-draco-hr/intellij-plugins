{
  if (flexInjected) {
    return false;
  }
  boolean isStyleProtoChain=name.equals(STYLE_PROTO_CHAIN);
  if (isStyleProtoChain) {
    final int oldPosition=buffer.position();
    buffer.position(buffer.position() + 4 + name.length()+ 1);
    parseCPoolAndRenameStyleProtoChain();
    buffer.position(oldPosition + 4 + 10);
    buffer.put((byte)'F');
    buffer.position(oldPosition);
  }
  if (isStyleProtoChain ? flexSdkVersion.equals("4.5") : (flexSdkVersion.equals("4.1") && name.equals("mx.styles:CSSStyleDeclaration"))) {
    flexInjected=true;
    buffer.limit(buffer.position() + length);
    buffer.position(lastWrittenPosition);
    channel.write(buffer);
    lastWrittenPosition=buffer.limit();
    buffer.limit(buffer.capacity());
    if (injectionUrlConnection == null) {
      final FileChannel injection=new FileInputStream(new File(DebugPathManager.getFudHome() + "/flex-injection/target/" + ComplementSwfBuilder.generateInjectionName(flexSdkVersion))).getChannel();
      try {
        injection.transferTo(0,injection.size(),channel);
      }
  finally {
        injection.close();
      }
    }
 else {
      InputStream inputStream=injectionUrlConnection.getInputStream();
      try {
        channel.write(ByteBuffer.wrap(FileUtil.loadBytes(inputStream)));
      }
  finally {
        inputStream.close();
      }
    }
    if (requiredAssetsInfo.bitmapCount != 0) {
      ImageClassPoolGenerator.generate(channel,requiredAssetsInfo.bitmapCount);
    }
    return true;
  }
  return false;
}
