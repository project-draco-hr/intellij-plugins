{
  if (_selectedBundles == null) {
    ProgressManager.getInstance().run(new Task.Modal(project,"Preparing bundles...",false){
      public void run(      @NotNull ProgressIndicator progressIndicator){
        progressIndicator.setIndeterminate(false);
        final HashSet<SelectedBundle> selectedBundles=new HashSet<SelectedBundle>();
        ModuleManager moduleManager=ModuleManager.getInstance(project);
        int bundleCount=runConfiguration.getBundlesToDeploy().size();
        for (int i=0; i < bundleCount; i++) {
          final SelectedBundle selectedBundle=runConfiguration.getBundlesToDeploy().get(i);
          progressIndicator.setFraction(i / bundleCount);
          if (selectedBundle.isModule()) {
            try {
              final Module module=moduleManager.findModuleByName(selectedBundle.getName());
              if (module == null) {
                showErrorMessage("Module '" + selectedBundle.getName() + "' does no longer exist. Please check your run configuration.");
                _selectedBundles=null;
                return;
              }
              if (!OsmorcFacet.hasOsmorcFacet(module)) {
                showErrorMessage("Module '" + selectedBundle.getName() + "' has no OSGi facet, but should have. Please re-add the OSGi facet to this module.");
                _selectedBundles=null;
                return;
              }
              selectedBundle.setBundleUrl(new URL("file","/",BundleCompiler.getJarFileName(module)).toString());
              String[] depUrls=BundleCompiler.bundlifyLibraries(module,progressIndicator,DummyCompileContext.getInstance());
              for (              String depUrl : depUrls) {
                SelectedBundle dependency=new SelectedBundle("Dependency",depUrl,SelectedBundle.BundleType.PlainLibrary);
                selectedBundles.add(dependency);
              }
              selectedBundles.add(selectedBundle);
            }
 catch (            MalformedURLException e) {
              throw new IllegalStateException(e);
            }
          }
 else {
            if (selectedBundles.contains(selectedBundle)) {
              selectedBundles.remove(selectedBundle);
            }
            selectedBundles.add(selectedBundle);
          }
        }
        HashMap<String,SelectedBundle> finalList=new HashMap<String,SelectedBundle>();
        for (        SelectedBundle selectedBundle : selectedBundles) {
          String name=CachingBundleInfoProvider.getBundleSymbolicName(selectedBundle.getBundleUrl());
          String version=CachingBundleInfoProvider.getBundleVersions(selectedBundle.getBundleUrl());
          String key=name + version;
          if (!finalList.containsKey(key)) {
            finalList.put(key,selectedBundle);
          }
        }
        Collection<SelectedBundle> selectedBundleCollection=finalList.values();
        _selectedBundles=selectedBundleCollection.toArray(new SelectedBundle[selectedBundleCollection.size()]);
        Arrays.sort(_selectedBundles,new StartLevelComparator());
      }
    }
);
  }
  return _selectedBundles;
}
