{
  final Ref<List<SelectedBundle>> result=Ref.create();
  final Ref<ExecutionException> error=Ref.create();
  ProgressManager.getInstance().run(new Task.Modal(myRunConfiguration.getProject(),"Preparing bundles...",false){
    @Override public void run(    @NotNull ProgressIndicator progressIndicator){
      progressIndicator.setIndeterminate(false);
      try {
        Set<SelectedBundle> selectedBundles=new HashSet<SelectedBundle>();
        ModuleManager moduleManager=ModuleManager.getInstance(myRunConfiguration.getProject());
        int bundleCount=myRunConfiguration.getBundlesToDeploy().size();
        for (int i=0; i < bundleCount; i++) {
          progressIndicator.setFraction((double)i / bundleCount);
          SelectedBundle selectedBundle=myRunConfiguration.getBundlesToDeploy().get(i);
          if (selectedBundle.isModule()) {
            String name=selectedBundle.getName();
            Module module=moduleManager.findModuleByName(name);
            if (module == null) {
              throw new CantRunException("Module '" + name + "' no longer exists. Please check your run configuration.");
            }
            OsmorcFacet facet=OsmorcFacet.getInstance(module);
            if (facet == null) {
              throw new CantRunException("Module '" + name + "' has no OSGi facet. Please check your run configuration.");
            }
            selectedBundle.setBundlePath(facet.getConfiguration().getJarFileLocation());
            selectedBundles.add(selectedBundle);
            List<String> paths=new BundleCompiler().bundlifyLibraries(module,progressIndicator);
            for (            String path : paths) {
              selectedBundles.add(new SelectedBundle(SelectedBundle.BundleType.PlainLibrary,"Dependency",path));
            }
          }
 else {
            if (selectedBundles.contains(selectedBundle)) {
              selectedBundles.remove(selectedBundle);
            }
            selectedBundles.add(selectedBundle);
          }
        }
        Map<String,SelectedBundle> filteredBundles=new HashMap<String,SelectedBundle>();
        for (        SelectedBundle selectedBundle : selectedBundles) {
          String path=selectedBundle.getBundlePath();
          if (path != null) {
            String name=CachingBundleInfoProvider.getBundleSymbolicName(path);
            String version=CachingBundleInfoProvider.getBundleVersion(path);
            String key=name + version;
            if (!filteredBundles.containsKey(key)) {
              filteredBundles.put(key,selectedBundle);
            }
          }
        }
        List<SelectedBundle> sortedBundles=ContainerUtil.newArrayList(filteredBundles.values());
        Collections.sort(sortedBundles,START_LEVEL_COMPARATOR);
        result.set(sortedBundles);
      }
 catch (      CantRunException e) {
        error.set(e);
      }
catch (      OsgiBuildException e) {
        error.set(new CantRunException(e.getMessage()));
      }
catch (      Throwable t) {
        error.set(new CantRunException("Internal error: " + t.getMessage()));
      }
    }
  }
);
  if (!result.isNull()) {
    return result.get();
  }
 else {
    throw error.get();
  }
}
