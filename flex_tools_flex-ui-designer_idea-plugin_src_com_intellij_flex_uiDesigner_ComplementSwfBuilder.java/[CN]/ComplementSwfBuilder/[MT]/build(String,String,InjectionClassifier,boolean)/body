{
  final Condition<CharSequence> sparkInclusionNameFilter=new AbcNameFilterStartsWith("com.intellij.flex.uiDesigner.flex",true){
    @Override public boolean value(    CharSequence name){
      return super.value(name) && !StringUtil.equals(name,"com.intellij.flex.uiDesigner.flex:SpriteLoaderAsset");
    }
  }
;
  final Collection<CharSequence> commonDefinitions=new ArrayList<CharSequence>(1);
  commonDefinitions.add("com.intellij.flex.uiDesigner:SpecialClassForAdobeEngineers");
  final Condition<CharSequence> air4InclusionNameFilter=new AbcNameFilterByNameSet(FlexOverloadedClasses.AIR_SPARK_CLASSES,true);
  File source=getSourceFile(rootPath,flexVersion);
  final Condition<CharSequence> abcNameFilter;
  if (classifier == InjectionClassifier.framework) {
    abcNameFilter=new AbcNameFilterByNameSetAndStartsWith(commonDefinitions,new String[]{"mx.","spark."}){
      @Override public boolean value(      CharSequence name){
        return StringUtil.equals(name,FlexOverloadedClasses.STYLE_PROTO_CHAIN) || FlexOverloadedClasses.MX_CLASSES.contains(name) || (super.value(name) && !sparkInclusionNameFilter.value(name) && !air4InclusionNameFilter.value(name));
      }
    }
;
  }
 else {
    abcNameFilter=new AbcNameFilterByEquals(FlexOverloadedClasses.SKINNABLE_COMPONENT);
  }
  new AbcFilter(null).filter(source,createAbcFile(rootPath,flexVersion,classifier),abcNameFilter);
  if (buildComplement) {
    new AbcFilter(null).filter(source,new File(rootPath + "/complement-flex" + flexVersion+ ".swf"),sparkInclusionNameFilter);
    new AbcFilter(null).filter(source,new File(rootPath + "/complement-air4.swf"),air4InclusionNameFilter);
  }
}
