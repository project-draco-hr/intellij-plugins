{
  return PlatformPatterns.psiElement(JSLiteralExpression.class).and(new FilterPattern(new ElementFilter(){
    @Override public boolean isAcceptable(    Object element,    @Nullable PsiElement context){
      if (element instanceof JSLiteralExpression) {
        final PsiElement parent=((PsiElement)element).getParent();
        if (parent instanceof JSArgumentList && parent.getParent() instanceof JSCallExpression && ((JSArgumentList)parent).getArguments().length == 1) {
          if (PsiTreeUtil.isAncestor(((JSArgumentList)parent).getArguments()[0],(PsiElement)element,false)) {
            final JSExpression methodExpression=((JSCallExpression)parent.getParent()).getMethodExpression();
            if (methodExpression instanceof JSReferenceExpression && JSSymbolUtil.isAccurateReferenceExpressionName((JSReferenceExpression)methodExpression,"angular",AngularJSIndexingHandler.MODULE)) {
              return true;
            }
          }
        }
      }
      return false;
    }
    @Override public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
));
}
