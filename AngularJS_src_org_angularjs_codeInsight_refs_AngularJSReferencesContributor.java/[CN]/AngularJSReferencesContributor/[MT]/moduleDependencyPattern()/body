{
  return PlatformPatterns.psiElement(JSLiteralExpression.class).and(new FilterPattern(new ElementFilter(){
    @Override public boolean isAcceptable(    Object element,    @Nullable PsiElement context){
      if (element instanceof JSLiteralExpression) {
        PsiElement parent=((PsiElement)element).getParent();
        if (!(parent instanceof JSArrayLiteralExpression))         return false;
        parent=parent.getParent();
        if (parent instanceof JSArgumentList && parent.getParent() instanceof JSCallExpression && ((JSArgumentList)parent).getArguments().length > 1) {
          if (PsiTreeUtil.isAncestor(((JSArgumentList)parent).getArguments()[1],(PsiElement)element,false) && ((JSArgumentList)parent).getArguments()[1] instanceof JSArrayLiteralExpression) {
            final JSExpression methodExpression=((JSCallExpression)parent.getParent()).getMethodExpression();
            if (methodExpression instanceof JSReferenceExpression && ((JSReferenceExpression)methodExpression).getQualifier() != null && AngularJSIndexingHandler.MODULE.equals(((JSReferenceExpression)methodExpression).getReferenceName())) {
              return true;
            }
          }
        }
      }
      return false;
    }
    @Override public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
));
}
