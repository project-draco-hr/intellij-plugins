{
  return PlatformPatterns.psiElement(PsiElement.class).and(new FilterPattern(new ElementFilter(){
    @Override public boolean isAcceptable(    Object element,    @Nullable PsiElement context){
      if (element instanceof JSProperty && acceptablePropertyValue((JSProperty)element)) {
        final JSProperty property=(JSProperty)element;
        if (checkParentViewsObject(property.getParent()))         return AngularIndexUtil.hasAngularJS(property.getProject());
      }
 else       if (element instanceof JSLiteralExpression || element instanceof LeafPsiElement && ((LeafPsiElement)element).getNode().getElementType() == JSTokenTypes.STRING_LITERAL) {
        PsiElement current=moveUpChain((PsiElement)element,JSLiteralExpression.class,JSReferenceExpression.class,JSProperty.class);
        if (!(current instanceof JSProperty) || !acceptablePropertyValue((JSProperty)current))         return false;
        current=current.getParent();
        if (current != null && checkParentViewsObject(current))         return AngularIndexUtil.hasAngularJS(current.getProject());
      }
      return false;
    }
    private boolean acceptablePropertyValue(    JSProperty element){
      return element.getNameIdentifier() != null && StringUtil.isQuotedString(element.getNameIdentifier().getText()) && (element.getValue() instanceof JSObjectLiteralExpression || element.getValue() instanceof JSReferenceExpression || element.getValue() == null);
    }
    private PsiElement moveUpChain(    @Nullable final PsiElement element,    @NotNull final Class<? extends PsiElement>... clazz){
      PsiElement current=element;
      for (      Class<? extends PsiElement> aClass : clazz) {
        current=current != null && aClass.isInstance(current.getParent()) ? current.getParent() : current;
      }
      return current;
    }
    private boolean checkParentViewsObject(    final PsiElement mustBeObject){
      if (mustBeObject instanceof JSObjectLiteralExpression) {
        final PsiElement viewsProperty=mustBeObject.getParent();
        if (viewsProperty instanceof JSProperty && "views".equals(((JSProperty)viewsProperty).getName())) {
          return true;
        }
      }
      return false;
    }
    @Override public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
));
}
