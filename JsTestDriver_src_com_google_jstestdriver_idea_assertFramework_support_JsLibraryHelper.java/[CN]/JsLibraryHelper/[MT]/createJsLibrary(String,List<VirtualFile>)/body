{
  Computable<ScriptingLibraryModel> task=new Computable<ScriptingLibraryModel>(){
    @Override @Nullable public ScriptingLibraryModel compute(){
      try {
        ScriptingLibraryModel libraryModel=getScriptingLibraryModel(libraryName);
        if (libraryModel != null) {
          if (scriptingLibraryModelConsistsOf(libraryModel,sourceFiles)) {
            LOG.info("Library '" + libraryModel.getName() + "' will be reused, new library creation isn't needed.");
            return libraryModel;
          }
 else {
            myScriptingLibraryManager.removeLibrary(libraryModel);
            myScriptingLibraryManager.commitChanges();
            LOG.info("Library '" + libraryModel.getName() + "' has been removed (it's impossible to reuse).");
          }
        }
        libraryModel=myScriptingLibraryManager.createLibrary(libraryName,VfsUtil.toVirtualFileArray(sourceFiles),VirtualFile.EMPTY_ARRAY,ArrayUtil.EMPTY_STRING_ARRAY);
        if (libraryModel == null) {
          LOG.warn("Library '" + libraryName + "' hasn't been created due to unknown reasons.");
          myScriptingLibraryManager.reset();
          return null;
        }
        myScriptingLibraryManager.commitChanges();
        LOG.info("Library '" + libraryModel.getName() + "' has been successfully created.");
        return libraryModel;
      }
 catch (      Exception ex) {
        LOG.error(ex);
        return null;
      }
    }
  }
;
  return ApplicationManager.getApplication().runWriteAction(task);
}
