{
  final AtomicInteger counter=new AtomicInteger(myFieldRefs.size());
  final XValueChildrenList list=new XValueChildrenList(myFieldRefs.size());
  for (  final FieldRef fieldRef : myFieldRefs) {
    myDebugProcess.getVmServiceWrapper().getObject(myIsolateId,fieldRef.getId(),new GetObjectConsumer(){
      @Override public void received(      Obj field){
        final InstanceRef instanceRef=((Field)field).getStaticValue();
        if ("@Instance".equals(instanceRef.getType())) {
          list.add(new DartVmServiceValue(myDebugProcess,myIsolateId,((Field)field).getName(),instanceRef,null,fieldRef,false));
        }
 else         if ("Sentinel".equals(instanceRef.getType())) {
          list.add(new XNamedValue(((Field)field).getName()){
            @Override public void computeSourcePosition(            @NotNull XNavigatable navigatable){
              DartVmServiceValue.doComputeSourcePosition(myDebugProcess,navigatable,myIsolateId,fieldRef);
            }
            @Override public void computePresentation(            @NotNull XValueNode node,            @NotNull XValuePlace place){
              final JsonElement valueAsString=instanceRef.getJson().get("valueAsString");
              final String value=valueAsString == null ? "not initialized" : valueAsString.getAsString();
              node.setPresentation(AllIcons.Nodes.Field,null,value,false);
            }
          }
);
        }
        if (counter.decrementAndGet() == 0) {
          if (list.size() == 0) {
            node.setErrorMessage("Static fields not initialized yet");
          }
 else {
            node.addChildren(list,true);
          }
        }
      }
      @Override public void received(      Sentinel sentinel){
        node.setErrorMessage(sentinel.getValueAsString());
      }
      @Override public void onError(      RPCError error){
        node.setErrorMessage(error.getMessage());
      }
    }
);
  }
}
