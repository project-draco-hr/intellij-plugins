{
  final Set<XLineBreakpoint<XBreakpointProperties>> xBreakpoints=myBreakpointHandler.getXBreakpoints();
  if (xBreakpoints.isEmpty()) {
    resumeIsolate(isolate.getId());
    return;
  }
  final AtomicInteger counter=new AtomicInteger(xBreakpoints.size());
  for (  final XLineBreakpoint<XBreakpointProperties> xBreakpoint : xBreakpoints) {
    addBreakpoint(isolate.getId(),xBreakpoint,new VmServiceConsumers.BreakpointConsumerWrapper(){
      @Override void sourcePositionNotApplicable(){
        checkDone();
      }
      @Override public void received(      Breakpoint vmBreakpoint){
        myBreakpointHandler.vmBreakpointAdded(xBreakpoint,isolate.getId(),vmBreakpoint);
        checkDone();
      }
      @Override public void onError(      RPCError error){
        myBreakpointHandler.breakpointFailed(xBreakpoint);
        checkDone();
      }
      private void checkDone(){
        if (counter.decrementAndGet() == 0) {
          resumeIsolate(isolate.getId());
        }
      }
    }
);
  }
}
