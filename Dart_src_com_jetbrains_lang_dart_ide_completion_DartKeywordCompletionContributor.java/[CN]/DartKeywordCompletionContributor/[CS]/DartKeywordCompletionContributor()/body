{
  final PsiElementPattern.Capture<PsiElement> idInExpression=psiElement().withSuperParent(1,DartId.class).withSuperParent(2,DartReference.class);
  final PsiElementPattern.Capture<PsiElement> inComplexExpression=psiElement().withSuperParent(3,DartReference.class);
  final PsiElementPattern.Capture<PsiElement> inStringLiteral=psiElement().inside(DartStringLiteralExpression.class);
  final PsiElementPattern.Capture<PsiElement> elementCapture=psiElement().andNot(idInExpression.and(inComplexExpression)).andNot(inStringLiteral);
  extend(CompletionType.BASIC,elementCapture,new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final Collection<String> suggestedKeywords=suggestKeywords(parameters.getPosition());
      suggestedKeywords.retainAll(allowedKeywords);
      for (      String keyword : suggestedKeywords) {
        result.addElement(LookupElementBuilder.create(keyword));
      }
    }
  }
);
  extend(CompletionType.BASIC,psiElement().inFile(StandardPatterns.instanceOf(DartFile.class)).withParent(DartClassDefinition.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      result.addElement(LookupElementBuilder.create(DartTokenTypes.EXTENDS.toString()));
      result.addElement(LookupElementBuilder.create(DartTokenTypes.IMPLEMENTS.toString()));
    }
  }
);
}
