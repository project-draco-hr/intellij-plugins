{
  final Project project=e.getProject();
  if (project == null)   return;
  final DartSdk sdk=DartSdk.getGlobalDartSdk();
  if (sdk == null)   return;
  FileDocumentManager.getInstance().saveAllDocuments();
  final DirectoryBasedDartSdk dirBasedSdk=DartAnalyzerService.getInstance(project).getDirectoryBasedDartSdkSdk(sdk.getHomePath());
  final Set<Module> affectedModules=new THashSet<Module>();
  final Collection<String> rootsToAddToLib=new TreeSet<String>();
  final Map<String,List<File>> packageNameToDirMap=new TreeMap<String,List<File>>();
  final Runnable runnable=new Runnable(){
    public void run(){
      final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      if (indicator != null) {
        indicator.setIndeterminate(true);
      }
      final Module[] modules=ModuleManager.getInstance(project).getModules();
      for (      final Module module : modules) {
        if (indicator != null) {
          indicator.checkCanceled();
          indicator.setText("pub list-package-dirs");
        }
        if (DartSdkGlobalLibUtil.isDartSdkGlobalLibAttached(module,sdk.getGlobalLibName())) {
          for (          VirtualFile contentRoot : ModuleRootManager.getInstance(module).getContentRoots()) {
            if (contentRoot.findChild(PubspecYamlUtil.PUBSPEC_YAML) != null)             continue;
            final File rootDir=new File(contentRoot.getPath());
            final Map<String,List<File>> map=new MyExplicitPackageUriResolver(dirBasedSdk,rootDir).calculatePackageMap();
            if (!map.isEmpty()) {
              affectedModules.add(module);
              addResults(packageNameToDirMap,map);
            }
          }
        }
      }
      if (!packageNameToDirMap.isEmpty()) {
        if (indicator != null) {
          indicator.checkCanceled();
          indicator.setText("Analyzing project dependencies");
        }
        collectRootsToAddToLib(project,dirBasedSdk,rootsToAddToLib,packageNameToDirMap);
      }
    }
  }
;
  if (ProgressManager.getInstance().runProcessWithProgressSynchronously(runnable,"pub list-package-dirs",true,project)) {
    final DartListPackageDirsDialog dialog=new DartListPackageDirsDialog(project,rootsToAddToLib,packageNameToDirMap);
    dialog.show();
    if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
      configurePubListPackageDirsLibrary(project,affectedModules,rootsToAddToLib,packageNameToDirMap);
    }
    if (dialog.getExitCode() == DartListPackageDirsDialog.CONFIGURE_NONE_EXIT_CODE) {
      removePubListPackageDirsLibrary(project);
    }
  }
}
