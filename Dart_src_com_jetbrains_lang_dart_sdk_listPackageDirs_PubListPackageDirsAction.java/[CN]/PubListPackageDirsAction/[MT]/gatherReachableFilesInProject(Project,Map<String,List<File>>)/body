{
  final VirtualFile contentRoot=project.getBaseDir();
  final DartUrlResolver dartUrlResolver=DartUrlResolver.getInstance(project,contentRoot);
  final DirectoryBasedDartSdk dirBasedSdk=new DirectoryBasedDartSdk(new File(DartSdk.getGlobalDartSdk().getHomePath()));
  final DartUriResolver dartUriResolver=new DartUriResolver(dirBasedSdk);
  final DartFileAndPackageUriResolver fileAndPackageUriResolver=new DartFileAndPackageUriResolver(project,dartUrlResolver);
  final SourceFactory sourceFactory=new SourceFactory(dartUriResolver,fileAndPackageUriResolver,new MyExplicitPackageUriResolverMapProvided(dirBasedSdk,new File(contentRoot.getPath()),packageMap));
  final AnalysisContext analysisContext=AnalysisEngine.getInstance().createAnalysisContext();
  analysisContext.setSourceFactory(sourceFactory);
  final AnalysisOptionsImpl contextOptions=new AnalysisOptionsImpl();
  contextOptions.setAnalyzeFunctionBodies(false);
  contextOptions.setGenerateSdkErrors(false);
  contextOptions.setEnableAsync(true);
  contextOptions.setEnableDeferredLoading(true);
  contextOptions.setEnableEnum(true);
  analysisContext.setAnalysisOptions(contextOptions);
  ChangeSet changeSet=new ChangeSet();
  Collection<VirtualFile> dartFiles=FileTypeIndex.getFiles(DartFileType.INSTANCE,GlobalSearchScope.projectScope(project));
  Set<Source> sources=new HashSet<Source>();
  for (  VirtualFile virtualFile : dartFiles) {
    Source source=DartFileBasedSource.getSource(project,virtualFile);
    changeSet.addedSource(source);
    sources.add(source);
  }
  analysisContext.applyChanges(changeSet);
  try {
    for (    Source source : sources) {
      analysisContext.computeLibraryElement(source);
    }
  }
 catch (  AnalysisException e) {
  }
  return new LibraryDependencyCollector((InternalAnalysisContext)analysisContext).collectFolderDependencies();
}
