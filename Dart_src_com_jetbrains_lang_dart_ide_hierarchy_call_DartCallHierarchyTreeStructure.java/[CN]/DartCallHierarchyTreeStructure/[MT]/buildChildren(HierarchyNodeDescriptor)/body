{
  final List<DartHierarchyNodeDescriptor> descriptors=new ArrayList<>();
  if (descriptor instanceof DartHierarchyNodeDescriptor) {
    final DartHierarchyNodeDescriptor dartDescriptor=(DartHierarchyNodeDescriptor)descriptor;
    PsiElement element=dartDescriptor.getPsiElement();
    if (element == null) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    boolean isCallable=DartHierarchyUtil.isExecutable(element);
    HierarchyNodeDescriptor nodeDescriptor=getBaseDescriptor();
    if (!(element instanceof DartComponent) || !isCallable || nodeDescriptor == null) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    DartComponentName name=((DartComponent)element).getComponentName();
    if (name == null) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    final List<PsiElement> children=getChildren(name);
    final HashMap<PsiElement,DartHierarchyNodeDescriptor> callerToDescriptorMap=new HashMap<>();
    PsiElement baseClass=element instanceof DartMethodDeclaration ? PsiTreeUtil.getParentOfType(name,DartClass.class) : null;
    for (    PsiElement caller : children) {
      if (isInScope(baseClass,caller,myScopeType)) {
        DartHierarchyNodeDescriptor callerDescriptor=callerToDescriptorMap.get(caller);
        if (callerDescriptor == null) {
          callerDescriptor=new DartHierarchyNodeDescriptor(descriptor,caller,false);
          callerToDescriptorMap.put(caller,callerDescriptor);
          descriptors.add(callerDescriptor);
        }
      }
    }
  }
  return ArrayUtil.toObjectArray(descriptors);
}
