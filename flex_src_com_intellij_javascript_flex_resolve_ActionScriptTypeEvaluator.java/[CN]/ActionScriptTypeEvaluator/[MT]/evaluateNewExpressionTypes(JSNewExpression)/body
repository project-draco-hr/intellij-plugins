{
  JSExpression methodExpr=newExpression.getMethodExpression();
  if (methodExpr != null) {
    if (methodExpr instanceof JSArrayLiteralExpression) {
      String type=VECTOR_CLASS_NAME;
      PsiElement arrayInitializingType=newExpression.getArrayInitializingType();
      if (arrayInitializingType != null) {
        type+=".<" + JSImportHandlingUtil.resolveTypeName(arrayInitializingType.getText(),newExpression) + ">";
      }
      addType(type,methodExpr);
    }
 else {
      String text=methodExpr.getText();
      JSResolveUtil.GenericSignature signature=JSResolveUtil.extractGenericSignature(text);
      if (signature != null) {
        text=signature.elementType;
      }
      if (methodExpr instanceof JSReferenceExpression && ((JSReferenceExpression)methodExpr).resolve() instanceof JSVariable) {
        text="*";
      }
 else {
        BaseJSSymbolProcessor.SimpleTypeProcessor subProcessor=new BaseJSSymbolProcessor.SimpleTypeProcessor();
        evaluateTypes(methodExpr,myContext.targetFile,subProcessor);
        final JSType type=subProcessor.getType();
        if (type != JSType.NO_TYPE && (type != JSType.ANY || isNotValidType(text))) {
          text="Class".equals(type.getTypeText()) ? "*" : type.getTypeText();
        }
        if (!"*".equals(text)) {
          text=JSImportHandlingUtil.resolveTypeName(text,methodExpr);
        }
      }
      addType(JSTypeUtils.createType(text,new JSTypeSource(methodExpr,JSTypeSourceFactory.sourceFileLanguage(methodExpr.getContainingFile()),false,true)),methodExpr);
    }
  }
}
