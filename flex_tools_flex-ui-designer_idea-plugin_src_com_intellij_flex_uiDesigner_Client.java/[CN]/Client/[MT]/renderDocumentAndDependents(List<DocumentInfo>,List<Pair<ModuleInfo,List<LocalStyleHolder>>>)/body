{
  final AsyncResult<List<DocumentInfo>> result=new AsyncResult<List<DocumentInfo>>();
  if ((infos == null || infos.isEmpty()) && outdatedLocalStyleHolders.isEmpty()) {
    result.setDone(infos);
    return result;
  }
  final ActionCallback callback=new ActionCallback("renderDocumentAndDependents");
  boolean hasError=true;
  try {
    beginMessage(ClientMethod.renderDocumentsAndDependents,callback,result,new Runnable(){
      @Override public void run(){
        final int[] ids;
        try {
          ids=SocketInputHandler.getInstance().getReader().readIntArray();
        }
 catch (        IOException e) {
          LogMessageUtil.processInternalError(e);
          return;
        }
        DocumentFactoryManager documentFactoryManager=DocumentFactoryManager.getInstance();
        List<DocumentInfo> rendered=new ArrayList<DocumentInfo>(ids.length);
        for (        int id : ids) {
          rendered.add(documentFactoryManager.getInfo(id));
        }
        result.setDone(rendered);
      }
    }
);
    out.write(outdatedLocalStyleHolders,new PairConsumer<Pair<ModuleInfo,List<LocalStyleHolder>>,AmfOutputStream>(){
      @Override public void consume(      Pair<ModuleInfo,List<LocalStyleHolder>> pair,      AmfOutputStream out){
        out.writeUInt29(pair.first.getId());
      }
    }
);
    out.write(infos);
    hasError=false;
  }
  finally {
    finalizeMessageAndFlush(hasError);
    if (hasError) {
      callback.setRejected();
    }
  }
  return result;
}
