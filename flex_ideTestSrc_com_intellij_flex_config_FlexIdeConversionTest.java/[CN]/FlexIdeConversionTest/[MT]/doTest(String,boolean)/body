{
  String path=getHomePath() + BASE_PATH + testName;
  final File globalBefore=new File(path,"global_before");
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
{
          Document d=JDOMUtil.loadDocument(new File(globalBefore,JDK_TABLE_XML));
          ConversionHelper.expandPaths(d.getRootElement());
          ((ProjectJdkTableImpl)ProjectJdkTable.getInstance()).loadState(d.getRootElement());
        }
{
          Document d=JDOMUtil.loadDocument(new File(globalBefore,GLOBAL_LIBS_XML));
          ConversionHelper.expandPaths(d.getRootElement());
          ApplicationLibraryTable.getApplicationTable().loadState(d.getRootElement());
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  File projectBefore=new File(path,"project_before");
  assertTrue(projectBefore.isDirectory());
  File tempDir=createTempDirectory();
  PathMacros.getInstance().setMacro(PROJECT_VAR,tempDir.getCanonicalPath());
  FileUtil.copyDir(projectBefore,tempDir,true);
  MyConversionListener l=new MyConversionListener();
  ConversionService.getInstance().convertSilently(tempDir.getAbsolutePath(),l);
  if (!conversionShouldHappen) {
    assertTrue(!l.isConversionNeeded());
    assertTrue(!l.isConverted());
    return;
  }
  assertTrue(l.isConversionNeeded());
  assertTrue(l.isConverted());
  VirtualFile expectedDir=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(path,"project_after"));
  final String[] extensionsToCheck=new String[]{"iml","xml"};
  PlatformTestUtil.assertDirectoriesEqual(expectedDir,LocalFileSystem.getInstance().refreshAndFindFileByIoFile(tempDir),new VirtualFileFilter(){
    @Override public boolean accept(    VirtualFile file){
      return file.isDirectory() || ArrayUtil.contains(file.getExtension(),extensionsToCheck);
    }
  }
);
  File globalAfter=new File(path,"global_after");
{
    Document d=JDOMUtil.loadDocument(new File(globalAfter,JDK_TABLE_XML));
    Element sdkState=((ProjectJdkTableImpl)ProjectJdkTable.getInstance()).getState();
    ConversionHelper.collapsePaths(sdkState);
    assertTrue(JDOMUtil.areElementsEqual(d.getRootElement(),sdkState));
  }
{
    Document d=JDOMUtil.loadDocument(new File(globalAfter,GLOBAL_LIBS_XML));
    Element globalLibState=ApplicationLibraryTable.getApplicationTable().getState();
    ConversionHelper.collapsePaths(globalLibState);
    PlatformTestUtil.assertElementsEqual(d.getRootElement(),globalLibState);
  }
}
