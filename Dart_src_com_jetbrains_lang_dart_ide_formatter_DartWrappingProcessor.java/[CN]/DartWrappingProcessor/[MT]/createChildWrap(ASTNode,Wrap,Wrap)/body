{
  final IElementType childType=child.getElementType();
  final IElementType elementType=myNode.getElementType();
  if (childType == COMMA || childType == SEMICOLON)   return defaultWrap;
  if (elementType == ARGUMENT_LIST) {
    if (mySettings.CALL_PARAMETERS_WRAP != CommonCodeStyleSettings.DO_NOT_WRAP) {
      if (!mySettings.PREFER_PARAMETERS_WRAP && childWrap != null) {
        return Wrap.createChildWrap(childWrap,WrappingUtil.getWrapType(mySettings.CALL_PARAMETERS_WRAP),true);
      }
      return Wrap.createWrap(WrappingUtil.getWrapType(mySettings.CALL_PARAMETERS_WRAP),false);
    }
  }
  if (elementType == FORMAL_PARAMETER_LIST) {
    if (mySettings.METHOD_PARAMETERS_WRAP != CommonCodeStyleSettings.DO_NOT_WRAP) {
      if (myNode.getFirstChildNode() == child) {
        return createWrap(mySettings.METHOD_PARAMETERS_LPAREN_ON_NEXT_LINE);
      }
      if (childType == RPAREN) {
        return createWrap(mySettings.METHOD_PARAMETERS_RPAREN_ON_NEXT_LINE);
      }
      return Wrap.createWrap(WrappingUtil.getWrapType(mySettings.METHOD_PARAMETERS_WRAP),true);
    }
  }
  if (elementType == INITIALIZERS) {
    if (childType != COLON && isNotFirstInitializer(child)) {
      return Wrap.createWrap(WrapType.ALWAYS,true);
    }
    if (childType == COLON && !DartSpacingProcessor.hasMultipleInitializers(child)) {
      return Wrap.createWrap(WrapType.NORMAL,true);
    }
  }
  if (elementType == EXPRESSION_LIST) {
    Wrap wrap=null;
    if (myNode.getFirstChildNode() == child) {
      wrap=Wrap.createWrap(WrapType.CHOP_DOWN_IF_LONG,true);
      if (myNode.getLastChildNode() != child) {
        myNode.putUserData(DART_EXPRESSION_LIST_WRAP_KEY,wrap);
      }
    }
 else {
      wrap=myNode.getUserData(DART_EXPRESSION_LIST_WRAP_KEY);
    }
    if (childType == MULTI_LINE_COMMENT || childType == CONST) {
      return Wrap.createWrap(WrapType.NONE,false);
    }
    return wrap != null ? wrap : Wrap.createWrap(WrapType.NORMAL,true);
  }
 else   if (elementType == LIST_LITERAL_EXPRESSION && childType == RBRACKET) {
    ASTNode exprList=FormatterUtil.getPreviousNonWhitespaceSibling(child);
    Wrap wrap=null;
    if (exprList != null && exprList.getElementType() == EXPRESSION_LIST) {
      wrap=exprList.getUserData(DART_EXPRESSION_LIST_WRAP_KEY);
      exprList.putUserData(DART_EXPRESSION_LIST_WRAP_KEY,null);
    }
    return wrap != null ? wrap : Wrap.createWrap(WrapType.NORMAL,true);
  }
  if (elementType == MAP_LITERAL_EXPRESSION) {
    Wrap wrap=null;
    if (myNode.getFirstChildNode() == child) {
      wrap=Wrap.createWrap(WrapType.CHOP_DOWN_IF_LONG,true);
      if (myNode.getLastChildNode() != child) {
        myNode.putUserData(DART_EXPRESSION_LIST_WRAP_KEY,wrap);
      }
    }
 else {
      wrap=myNode.getUserData(DART_EXPRESSION_LIST_WRAP_KEY);
      if (myNode.getLastChildNode() == child) {
        myNode.putUserData(DART_EXPRESSION_LIST_WRAP_KEY,null);
      }
    }
    if (childType == LBRACE || childType == LBRACKET) {
      return Wrap.createWrap(WrapType.NONE,false);
    }
    if (childType == MULTI_LINE_COMMENT || childType == CONST) {
      return Wrap.createWrap(WrapType.NONE,false);
    }
    return wrap != null ? wrap : Wrap.createWrap(WrapType.NORMAL,true);
  }
  if (elementType == FUNCTION_BODY) {
    if (FormatterUtil.isPrecededBy(child,EXPRESSION_BODY_DEF)) {
      return createWrap(true);
    }
  }
  if (childType == CALL_EXPRESSION) {
    if (FormatterUtil.isPrecededBy(child,EXPRESSION_BODY_DEF)) {
      return createWrap(true);
    }
    if (mySettings.CALL_PARAMETERS_WRAP != CommonCodeStyleSettings.DO_NOT_WRAP) {
      if (childType == RPAREN) {
        return createWrap(mySettings.CALL_PARAMETERS_RPAREN_ON_NEXT_LINE);
      }
    }
  }
  if (elementType == IF_STATEMENT && childType == ELSE) {
    return createWrap(mySettings.ELSE_ON_NEW_LINE);
  }
  if (BINARY_EXPRESSIONS.contains(elementType) && mySettings.BINARY_OPERATION_WRAP != CommonCodeStyleSettings.DO_NOT_WRAP) {
    if ((mySettings.BINARY_OPERATION_SIGN_ON_NEXT_LINE && BINARY_OPERATORS.contains(childType)) || (!mySettings.BINARY_OPERATION_SIGN_ON_NEXT_LINE && isRightOperand(child))) {
      return Wrap.createWrap(WrappingUtil.getWrapType(mySettings.BINARY_OPERATION_WRAP),true);
    }
  }
  if (elementType == ASSIGN_EXPRESSION && mySettings.ASSIGNMENT_WRAP != CommonCodeStyleSettings.DO_NOT_WRAP) {
    if (childType != ASSIGNMENT_OPERATOR) {
      if (FormatterUtil.isPrecededBy(child,ASSIGNMENT_OPERATOR) && mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE) {
        return Wrap.createWrap(WrapType.NONE,true);
      }
      return Wrap.createWrap(WrappingUtil.getWrapType(mySettings.ASSIGNMENT_WRAP),true);
    }
 else     if (mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE) {
      return Wrap.createWrap(WrapType.NORMAL,true);
    }
  }
  if (elementType == TERNARY_EXPRESSION) {
    if (myNode.getFirstChildNode() != child) {
      if (mySettings.TERNARY_OPERATION_SIGNS_ON_NEXT_LINE) {
        if (childType == QUEST) {
          final Wrap wrap=Wrap.createWrap(WrappingUtil.getWrapType(mySettings.TERNARY_OPERATION_WRAP),true);
          myNode.putUserData(DART_TERNARY_EXPRESSION_WRAP_KEY,wrap);
          return wrap;
        }
        if (childType == COLON) {
          final Wrap wrap=myNode.getUserData(DART_TERNARY_EXPRESSION_WRAP_KEY);
          myNode.putUserData(DART_TERNARY_EXPRESSION_WRAP_KEY,null);
          return wrap != null ? wrap : Wrap.createWrap(WrappingUtil.getWrapType(mySettings.TERNARY_OPERATION_WRAP),true);
        }
      }
 else       if (childType != QUEST && childType != COLON) {
        return Wrap.createWrap(WrappingUtil.getWrapType(mySettings.TERNARY_OPERATION_WRAP),true);
      }
    }
    return Wrap.createWrap(WrapType.NONE,true);
  }
  if (childType == HIDE_COMBINATOR || childType == SHOW_COMBINATOR) {
    return createWrap(true);
  }
  if (childType == VAR_DECLARATION_LIST && elementType != FOR_LOOP_PARTS) {
    if (varDeclListContainsVarInit(child)) {
      return Wrap.createWrap(WrapType.ALWAYS,true);
    }
 else {
      return Wrap.createWrap(WrapType.CHOP_DOWN_IF_LONG,true);
    }
  }
  if (childType == VAR_DECLARATION_LIST_PART) {
    ASTNode parent=getParent();
    if (parent != null && parent.getElementType() == FOR_LOOP_PARTS) {
      return Wrap.createWrap(WrapType.NORMAL,true);
    }
 else {
      if (varDeclListContainsVarInit(myNode)) {
        return Wrap.createWrap(WrapType.ALWAYS,true);
      }
 else {
        return Wrap.createWrap(WrapType.CHOP_DOWN_IF_LONG,true);
      }
    }
  }
  if (elementType == CLASS_DEFINITION) {
    if (childType == SUPERCLASS || childType == INTERFACES || childType == MIXINS) {
      return Wrap.createWrap(WrapType.CHOP_DOWN_IF_LONG,true);
    }
  }
  if (elementType == MIXIN_APPLICATION && childType == MIXINS) {
    return Wrap.createWrap(WrapType.CHOP_DOWN_IF_LONG,true);
  }
  return defaultWrap;
}
