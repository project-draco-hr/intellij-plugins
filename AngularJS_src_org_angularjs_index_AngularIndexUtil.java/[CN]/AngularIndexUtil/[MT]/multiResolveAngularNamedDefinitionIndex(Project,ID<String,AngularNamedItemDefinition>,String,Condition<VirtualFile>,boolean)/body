{
  final FileBasedIndex instance=FileBasedIndex.getInstance();
  Collection<VirtualFile> files=instance.getContainingFiles(INDEX,id,GlobalSearchScope.allScope(project));
  if (files.isEmpty())   return ResolveResult.EMPTY_ARRAY;
  final List<VirtualFile> filtered=ContainerUtil.filter(files,filter);
  if (filtered.isEmpty()) {
    if (!dirtyResolve)     return ResolveResult.EMPTY_ARRAY;
  }
 else {
    files=filtered;
  }
  final List<JSImplicitElement> elements=new ArrayList<JSImplicitElement>();
  for (  VirtualFile file : files) {
    final List<AngularNamedItemDefinition> values=instance.getValues(INDEX,id,GlobalSearchScope.fileScope(project,file));
    for (    AngularNamedItemDefinition value : values) {
      JSQualifiedNameImpl qName=JSQualifiedNameImpl.fromQualifiedName(id);
      JSImplicitElementImpl.Builder elementBuilder=new JSImplicitElementImpl.Builder(qName,null);
      final PsiFile psiFile=PsiManager.getInstance(project).findFile(file);
      if (psiFile != null) {
        elements.add(new JSOffsetBasedImplicitElement(elementBuilder,(int)value.getStartOffset(),psiFile));
      }
    }
  }
  final List<ResolveResult> list=ContainerUtil.map(elements,JS_IMPLICIT_TO_RESOLVE_RESULT);
  return list.toArray(new ResolveResult[list.size()]);
}
