{
  if (DumbService.isDumb(project))   return -1;
  NotNullLazyValue<ModificationTracker> tracker=project.getUserData(TRACKER);
  if (tracker == null) {
    tracker=new AtomicNotNullLazyValue<ModificationTracker>(){
      @NotNull @Override protected ModificationTracker compute(){
        return new AngularModificationTracker(project);
      }
    }
;
    tracker=((UserDataHolderEx)project).putUserDataIfAbsent(TRACKER,tracker);
  }
  final NotNullLazyValue<ModificationTracker> finalTracker=tracker;
  return CachedValuesManager.getManager(project).getCachedValue(project,new CachedValueProvider<Integer>(){
    @Nullable @Override public Result<Integer> compute(){
      int version=-1;
      PsiElement resolve;
      if ((resolve=resolve(project,AngularDirectivesIndex.KEY,"[ngFor]")) != null) {
        version=20;
      }
 else       if ((resolve=resolve(project,AngularDirectivesIndex.KEY,"ng-messages")) != null) {
        version=13;
      }
 else       if ((resolve=resolve(project,AngularDirectivesIndex.KEY,"ng-model")) != null) {
        version=12;
      }
      return Result.create(version,resolve != null ? resolve.getContainingFile() : finalTracker.getValue());
    }
  }
);
}
