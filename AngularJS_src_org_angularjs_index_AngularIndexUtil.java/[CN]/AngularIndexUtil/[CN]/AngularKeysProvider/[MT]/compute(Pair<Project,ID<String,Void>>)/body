{
  final Set<String> allKeys=new THashSet<String>();
  final FileBasedIndex index=FileBasedIndex.getInstance();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(projectAndIndex.first);
  final CommonProcessors.CollectProcessor<String> processor=new CommonProcessors.CollectProcessor<String>(allKeys){
    @Override protected boolean accept(    String key){
      return true;
    }
  }
;
  index.processAllKeys(projectAndIndex.second,processor,scope,null);
  return CachedValueProvider.Result.create(ContainerUtil.filter(allKeys,new Condition<String>(){
    @Override public boolean value(    String key){
      return index.getContainingFiles(projectAndIndex.second,key,scope).size() > 0;
    }
  }
),PsiManager.getInstance(projectAndIndex.first).getModificationTracker());
}
