{
  final Project project=projectAndIndex.first;
  final ID<String,?> id=projectAndIndex.second;
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final FileBasedIndex fileIndex=FileBasedIndex.getInstance();
  final StubIndex stubIndex=StubIndex.getInstance();
  final Collection<String> allKeys=id instanceof StubIndexKey ? stubIndex.getAllKeys((StubIndexKey<String,?>)id,project) : fileIndex.getAllKeys(id,project);
  return CachedValueProvider.Result.<Collection<String>>create(ContainerUtil.filter(allKeys,new Condition<String>(){
    @Override public boolean value(    String key){
      return id instanceof StubIndexKey ? !stubIndex.processElements((StubIndexKey<String,PsiElement>)id,key,project,scope,PsiElement.class,new Processor<PsiElement>(){
        @Override public boolean process(        PsiElement element){
          return false;
        }
      }
) : !fileIndex.processValues(id,key,null,new FileBasedIndex.ValueProcessor(){
        @Override public boolean process(        VirtualFile file,        Object value){
          return false;
        }
      }
,scope);
    }
  }
),PsiManager.getInstance(project).getModificationTracker());
}
