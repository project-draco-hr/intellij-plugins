{
  super(project,editor,refactoring);
  myRefactoring=refactoring;
  setTitle("Extract Method");
  init();
  final String name=StringUtil.notNullize(ArrayUtil.getFirstElement(refactoring.getNames()),"name");
  myRefactoring.setName(name);
  myMethodNameField.setText(name);
  myMethodNameField.selectAll();
  myMethodNameField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      final String name=myMethodNameField.getText();
      myRefactoring.setName(name);
      mySignatureLabel.setText(myRefactoring.getSignature());
    }
  }
);
  if (myRefactoring.getOccurrences() != 1) {
    myAllCheckBox.setSelected(true);
    myAllCheckBox.setText("Extract all " + myRefactoring.getOccurrences() + " occurrences");
    myAllCheckBox.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        myRefactoring.setExtractAll(myAllCheckBox.isSelected());
      }
    }
);
  }
 else {
    myAllCheckBox.setEnabled(false);
  }
  if (myRefactoring.canExtractGetter()) {
    myGetterCheckBox.setSelected(true);
    myGetterCheckBox.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        myRefactoring.setCreateGetter(myGetterCheckBox.isSelected());
        mySignatureLabel.setText(myRefactoring.getSignature());
      }
    }
);
  }
 else {
    myGetterCheckBox.setEnabled(false);
  }
  mySignatureLabel.setText(myRefactoring.getSignature());
}
