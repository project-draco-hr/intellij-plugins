{
  myUseIDEBuilderCheckBox.setSelected(config.DO_BUILD);
  myApplicationOutputTypeRadioButton.setSelected(FlexBuildConfiguration.APPLICATION.equals(config.OUTPUT_TYPE));
  myLibraryOutputTypeRadioButton.setSelected(FlexBuildConfiguration.LIBRARY.equals(config.OUTPUT_TYPE));
  myUseDefaultSdkConfigFileCheckBox.setSelected(config.USE_DEFAULT_SDK_CONFIG_FILE);
  myUseCustomConfigFileCheckBox.setSelected(config.USE_CUSTOM_CONFIG_FILE);
  myCustomConfigFileTextField.setText(FileUtil.toSystemDependentName(config.CUSTOM_CONFIG_FILE));
  myCustomConfigFileForTestsCheckBox.setSelected(config.USE_CUSTOM_CONFIG_FILE_FOR_TESTS);
  myCustomConfigFileForTestsTextWithBrowse.setText(FileUtil.toSystemDependentName(config.CUSTOM_CONFIG_FILE_FOR_TESTS));
  myMainClassTextWithBrowse.setText(config.MAIN_CLASS);
  myOutputFileNameTextField.setText(config.OUTPUT_FILE_NAME);
  final String moduleOutputPath=FileUtil.toSystemDependentName(VfsUtil.urlToPath(myCompilerExtension.getCompilerOutputUrl()));
  final String moduleOutputPathForTests=FileUtil.toSystemDependentName(VfsUtil.urlToPath(myCompilerExtension.getCompilerOutputUrlForTests()));
  if (myFlexFacet == null) {
    myInheritProjectCompileOutputRadioButton.setSelected(myCompilerExtension.isCompilerOutputPathInherited());
    myUseModuleCompileOutputRadioButton.setSelected(!myCompilerExtension.isCompilerOutputPathInherited());
    myModuleSpecificOutputPathTextField.setText(moduleOutputPath);
    myModuleSpecificOutputPathForTestsTextField.setText(moduleOutputPathForTests);
    myExcludeOutputPathsCheckBox.setSelected(myCompilerExtension.isExcludeOutput());
  }
 else {
    myUseFacetCompileOutputPathCheckBox.setSelected(config.USE_FACET_COMPILE_OUTPUT_PATH);
    myFacetSpecificOutputPathTextField.setText(config.USE_FACET_COMPILE_OUTPUT_PATH ? FileUtil.toSystemDependentName(config.FACET_COMPILE_OUTPUT_PATH) : moduleOutputPath);
    myFacetSpecificOutputPathForTestsTextField.setText(config.USE_FACET_COMPILE_OUTPUT_PATH ? FileUtil.toSystemDependentName(config.FACET_COMPILE_OUTPUT_PATH_FOR_TESTS) : moduleOutputPathForTests);
  }
  myAdditionalCompilerOptionsTextField.setText(config.ADDITIONAL_COMPILER_OPTIONS);
  myTargetPlayerVersionForm.setPlayerVersion(config.TARGET_PLAYER_VERSION);
  myIncludeResourceFilesInSwcCheckBox.setSelected(config.INCLUDE_RESOURCE_FILES_IN_SWC);
  myUseFrameworkAsRsl.setSelected(!config.STATIC_LINK_RUNTIME_SHARED_LIBRARIES);
  myLocaleCheckBox.setSelected(config.USE_LOCALE_SETTINGS);
  myLocaleTextFieldWithBrowse.setText(config.LOCALE);
  myNamespaceAndManifestFileInfoList=config.NAMESPACE_AND_MANIFEST_FILE_INFO_LIST;
  setCustomNamespacesText();
  myCssFilesList=config.CSS_FILES_LIST;
  setCssFilesText();
  myConditionalCompilationDefinitionList=config.CONDITIONAL_COMPILATION_DEFINITION_LIST;
  setConditionalCompilationDefinitionsText();
  final Sdk flexSdk=FlexUtils.getSdkForActiveBC(myModule);
  if (flexSdk != null && flexSdk.getSdkType() instanceof IFlexSdkType) {
    final String baseConfigFileName=FlexSdkUtils.getBaseConfigFileName((IFlexSdkType)flexSdk.getSdkType());
    myFlexSdkConfigXmlLabel.setText(baseConfigFileName);
    myFlexSdkConfigXmlLabel.setIcon(flexSdk.getSdkType().getIcon());
    if (flexSdk.getSdkType() instanceof FlexmojosSdkType) {
      myFlexSdkConfigXmlLabel.setText("(not applicable for Flexmojos SDK)");
      myFlexSdkConfigXmlLabel.setIcon(null);
    }
  }
 else {
    myFlexSdkConfigXmlLabel.setText("(not applicable)");
    myFlexSdkConfigXmlLabel.setIcon(null);
  }
  myServerTechnologyForm.setPathToServicesConfigXml(FileUtil.toSystemDependentName(config.PATH_TO_SERVICES_CONFIG_XML));
  myServerTechnologyForm.setContextRoot(config.CONTEXT_ROOT);
  updateAllControls();
}
