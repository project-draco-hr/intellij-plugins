{
  copyConfuguratorToLocalRepository(console);
  final List<MavenProject> rootProjects=myTree.getRootProjects();
  final String workingDirPath;
  if (rootProjects.size() > 1) {
    MavenLog.LOG.error("Why root projects list > 1");
    return;
  }
 else {
    workingDirPath=rootProjects.get(0).getDirectory();
  }
  final long start=System.currentTimeMillis();
  indicator.setText(FlexBundle.message("generating.flex.configs"));
  final MavenProjectsManager mavenProjectsManager=MavenProjectsManager.getInstance(project);
  MavenRunnerSettings mavenRunnerSettings=new MavenRunnerSettings();
  MavenRunnerParameters runnerParameters=new MavenRunnerParameters(false,workingDirPath,Collections.singletonList(CONFIGURATOR_GOAL),mavenProjectsManager.getExplicitProfiles());
  final ProcessBuilder processBuilder;
  try {
    JavaParameters javaParameters=MavenExternalParameters.createJavaParameters(project,runnerParameters,mavenProjectsManager.getGeneralSettings(),mavenRunnerSettings);
    processBuilder=new ProcessBuilder(CommandLineBuilder.createFromJavaParameters(javaParameters).getCommands());
  }
 catch (  ExecutionException e) {
    new Notification("Maven",FlexBundle.message("flexmojos.project.import"),e.getMessage(),NotificationType.ERROR).notify(project);
    console.printException(e);
    MavenLog.LOG.warn(e);
    return;
  }
  processBuilder.directory((new File(workingDirPath)));
  processBuilder.redirectErrorStream(true);
  final Process process;
  try {
    process=processBuilder.start();
  }
 catch (  IOException e) {
    console.printException(e);
    MavenLog.LOG.warn(e);
    showWarning("",project);
    return;
  }
  final StringBuilder stringBuilder=StringBuilderSpinAllocator.alloc();
  final InputStreamReader reader=new InputStreamReader(process.getInputStream());
  try {
    char[] buf=new char[1024];
    int read;
    while ((read=reader.read(buf,0,buf.length)) >= 0) {
      stringBuilder.append(buf,0,read);
    }
    try {
      process.waitFor();
    }
 catch (    InterruptedException ignored) {
    }
    int exitCode=process.exitValue();
    final String result=stringBuilder.toString();
    if (exitCode != 0) {
      MavenLog.LOG.warn("idea flexmojos generator exited with exit code " + exitCode);
      final Matcher matcher=MAVEN_ERROR_PATTERN.matcher(result);
      stringBuilder.setLength(0);
      while (matcher.find()) {
        stringBuilder.append("<br>").append(matcher.group(1));
      }
      showWarning(stringBuilder.toString(),project);
    }
    MavenLog.LOG.info("idea flexmojos generator out:\n" + result);
  }
 catch (  IOException e) {
    process.destroy();
    console.printException(e);
    MavenLog.LOG.warn(stringBuilder.toString(),e);
  }
 finally {
    StringBuilderSpinAllocator.dispose(stringBuilder);
    try {
      reader.close();
    }
 catch (    IOException ignored) {
    }
  }
  final long duration=System.currentTimeMillis() - start;
  MavenLog.LOG.info("Generating flex configs took " + duration + " ms: "+ duration / 60000 + " min " + (duration % 60000) / 1000 + "sec");
}
