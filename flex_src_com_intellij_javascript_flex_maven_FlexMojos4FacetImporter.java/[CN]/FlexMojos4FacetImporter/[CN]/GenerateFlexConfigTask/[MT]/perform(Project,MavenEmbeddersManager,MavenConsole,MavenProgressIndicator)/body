{
  final File localRepo=new File(myMavenProject.getLocalRepository(),"com/intellij/flex/maven");
  if (!new File(localRepo,"idea-configurator/1.4.2").exists()) {
    ZipFile zipFile=null;
    try {
      zipFile=new ZipFile(getClass().getResource("/flexmojos-configurator.zip").getFile());
      ZipUtil.extract(zipFile,localRepo,null);
    }
 catch (    IOException e) {
      console.printException(e);
      MavenLog.LOG.warn(e);
    }
 finally {
      if (zipFile != null) {
        try {
          zipFile.close();
        }
 catch (        IOException ignored) {
        }
      }
    }
  }
  final long start=System.currentTimeMillis();
  indicator.setText(FlexBundle.message("generating.flex.configs"));
  final MavenProjectsManager mavenProjectsManager=MavenProjectsManager.getInstance(project);
  MavenRunnerSettings mavenRunnerSettings=new MavenRunnerSettings();
  @SuppressWarnings("ConstantConditions") MavenRunnerParameters mavenRunnerParameters=new MavenRunnerParameters(false,project.getBaseDir().getPath(),Collections.singletonList("com.intellij.flex.maven:idea-flexmojos-maven-plugin:1.4.2:generate"),mavenProjectsManager.getExplicitProfiles());
  final ProcessBuilder processBuilder;
  try {
    JavaParameters javaParameters=MavenExternalParameters.createJavaParameters(project,mavenRunnerParameters,mavenProjectsManager.getGeneralSettings(),mavenRunnerSettings);
    processBuilder=new ProcessBuilder(CommandLineBuilder.createFromJavaParameters(javaParameters).getCommands());
  }
 catch (  ExecutionException e) {
    console.printException(e);
    MavenLog.LOG.warn(e);
    return;
  }
  processBuilder.directory((new File(mavenRunnerParameters.getWorkingDirPath())));
  processBuilder.redirectErrorStream(true);
  final Process process;
  try {
    process=processBuilder.start();
  }
 catch (  IOException e) {
    console.printException(e);
    MavenLog.LOG.warn(e);
    return;
  }
  final StringBuilder processOutputString=StringBuilderSpinAllocator.alloc();
  final InputStreamReader reader=new InputStreamReader(process.getInputStream());
  try {
    char[] buf=new char[1024];
    int read;
    while ((read=reader.read(buf,0,buf.length)) >= 0) {
      processOutputString.append(buf,0,read);
    }
    try {
      process.waitFor();
    }
 catch (    InterruptedException ignored) {
    }
    int exitCode=process.exitValue();
    if (exitCode != 0) {
      MavenLog.LOG.warn("idea flexmojos generator exited with exit code " + exitCode);
      flexConfigInformer.showFlexConfigWarningIfNeeded(project);
    }
    MavenLog.LOG.info("idea flexmojos generator out:\n" + processOutputString.toString());
  }
 catch (  IOException e) {
    process.destroy();
    console.printException(e);
    MavenLog.LOG.warn(processOutputString.toString(),e);
  }
 finally {
    StringBuilderSpinAllocator.dispose(processOutputString);
    try {
      reader.close();
    }
 catch (    IOException ignored) {
    }
  }
  final long duration=System.currentTimeMillis() - start;
  MavenLog.LOG.info("Generating flex configs took " + duration + " ms: "+ duration / 60000 + " min " + (duration % 60000) / 1000 + "sec");
}
