{
  final int offset=editor.getCaretModel().getOffset();
  PsiElement psiElement=file.findElementAt(offset);
  if (psiElement == null || !psiElement.isValid())   return;
  if (psiElement instanceof PsiWhiteSpace)   psiElement=PsiTreeUtil.prevLeaf(psiElement);
  HbBlockMustache blockMustache=(HbBlockMustache)PsiTreeUtil.findFirstParent(psiElement,true,new Condition<PsiElement>(){
    @Override public boolean value(    PsiElement psiElement){
      return psiElement instanceof HbBlockMustache;
    }
  }
);
  if (blockMustache == null) {
    return;
  }
  HbBlockMustache targetBlockMustache=blockMustache;
  if (myUpdateOpenMustache != (targetBlockMustache instanceof HbOpenBlockMustache)) {
    targetBlockMustache=blockMustache.getPairedElement();
  }
  HbPath path=PsiTreeUtil.findChildOfType(targetBlockMustache,HbPath.class);
  final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
  if (path != null && document != null) {
    final TextRange textRange=path.getTextRange();
    document.replaceString(textRange.getStartOffset(),textRange.getEndOffset(),myCorrectedName);
  }
}
