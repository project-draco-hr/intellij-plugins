{
  projectCacheLock.lock();
  ProjectCacheData projectCacheData;
  boolean unlocked=false;
  try {
    projectCacheData=projectsCache.get(pomFile);
    if (projectCacheData != null) {
      projectCacheLock.unlock();
      unlocked=true;
synchronized (projectCacheData) {
        while (!projectCacheData.processed) {
          try {
            projectCacheData.wait();
          }
 catch (          InterruptedException e) {
            break;
          }
        }
        return projectCacheData.project;
      }
    }
    projectCacheData=new ProjectCacheData();
    projectsCache.put(pomFile,projectCacheData);
  }
  finally {
    if (!unlocked) {
      projectCacheLock.unlock();
    }
  }
synchronized (projectCacheData) {
    try {
      final ProjectBuildingRequest projectBuildingRequest=session.getRequest().getProjectBuildingRequest();
      projectBuildingRequest.setResolveDependencies(true);
      projectBuildingRequest.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);
      projectBuildingRequest.setRepositorySession(session.getRepositorySession());
      projectCacheData.project=projectBuilder.build(pomFile,projectBuildingRequest).getProject();
    }
  finally {
      projectCacheData.processed=true;
      projectCacheData.notifyAll();
    }
  }
  return projectCacheData.project;
}
