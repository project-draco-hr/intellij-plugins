{
  server.registerStreamEventHandler(new StreamEventHandler(){
    @NotNull @Override public String getEventType(){
      return "coverageFinished";
    }
    @Override public void handle(    @NotNull JsonElement eventBody){
      KarmaCoverageSession coverageSession=myActiveCoverageSession;
      myActiveCoverageSession=null;
      if (coverageSession != null) {
        String path=GsonUtil.getAsString(eventBody);
        coverageSession.onCoverageSessionFinished(new File(path));
      }
    }
  }
);
  server.registerStreamEventHandler(new StreamEventHandler(){
    private AtomicBoolean myCoverageInitialized=new AtomicBoolean(true);
    @NotNull @Override public String getEventType(){
      return "coverageStartupStatus";
    }
    @Override public void handle(    @NotNull JsonElement eventBody){
      if (myCoverageInitialized.compareAndSet(true,false)) {
        Boolean coverageReporterFound=null;
        Boolean coverageReporterSpecifiedInConfig=null;
        if (eventBody.isJsonObject()) {
          JsonObject eventObj=eventBody.getAsJsonObject();
          coverageReporterSpecifiedInConfig=GsonUtil.getBooleanProperty(eventObj,"coverageReporterSpecifiedInConfig");
          coverageReporterFound=GsonUtil.getBooleanProperty(eventObj,"coverageReporterFound");
        }
        if (coverageReporterSpecifiedInConfig == null) {
          LOG.warn("Malformed '" + getEventType() + "' event: can not found boolean property 'coverageReporterSpecifiedInConfig'!");
          coverageReporterSpecifiedInConfig=true;
        }
        if (coverageReporterFound == null) {
          LOG.warn("Malformed '" + getEventType() + "' event: can not found boolean property 'coverageReporterFound'!");
          coverageReporterFound=true;
        }
        onCoverageInitialized(server,coverageReporterSpecifiedInConfig,coverageReporterFound);
      }
    }
  }
);
}
