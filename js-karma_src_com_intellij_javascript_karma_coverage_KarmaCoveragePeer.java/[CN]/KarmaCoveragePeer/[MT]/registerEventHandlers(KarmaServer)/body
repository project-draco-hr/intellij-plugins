{
  server.registerStreamEventHandler(new StreamEventHandler(){
    @NotNull @Override public String getEventType(){
      return "coverageFinished";
    }
    @Override public void handle(    @NotNull JsonElement eventBody){
      KarmaCoverageSession coverageSession=myActiveCoverageSession;
      myActiveCoverageSession=null;
      if (coverageSession != null) {
        String path=GsonUtil.getAsString(eventBody);
        coverageSession.onCoverageSessionFinished(new File(path));
      }
    }
  }
);
  server.registerStreamEventHandler(new StreamEventHandler(){
    private AtomicBoolean myCoverageInitialized=new AtomicBoolean(true);
    @NotNull @Override public String getEventType(){
      return "coverageInitialized";
    }
    @Override public void handle(    @NotNull JsonElement eventBody){
      if (myCoverageInitialized.compareAndSet(true,false)) {
        String crfPropertyName="coverage-reporter-found";
        Boolean coverageReporterFound=null;
        if (eventBody.isJsonObject()) {
          JsonObject object=eventBody.getAsJsonObject();
          JsonElement crfElement=object.get(crfPropertyName);
          if (crfElement != null && crfElement.isJsonPrimitive()) {
            JsonPrimitive crfPrimitive=crfElement.getAsJsonPrimitive();
            if (crfPrimitive.isBoolean()) {
              coverageReporterFound=crfPrimitive.getAsBoolean();
            }
          }
        }
        if (coverageReporterFound == null) {
          LOG.warn("Malformed 'coverageInitialized' event: can not found boolean property " + crfPropertyName + " in "+ eventBody.toString());
          coverageReporterFound=true;
        }
        onCoverageInitialized(server,coverageReporterFound);
      }
    }
  }
);
}
