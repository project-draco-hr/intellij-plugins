{
  if (jsClass == null || module == null)   return false;
  final JSAttributeList attributeList=jsClass.getAttributeList();
  if (attributeList == null || attributeList.getAccessType() != JSAttributeList.AccessType.PUBLIC)   return false;
  final String jsClassName=jsClass.getQualifiedName();
  if (jsClassName == null)   return false;
  final PsiElement spriteClass=JSResolveUtil.unwrapProxy(JSResolveUtil.findClassByQName(FlexCompilerSettingsEditor.SPRITE_CLASS_NAME,GlobalSearchScope.moduleWithLibrariesScope(module)));
  if (!(spriteClass instanceof JSClass))   return false;
  final boolean isSpriteInheritor=JSResolveUtil.checkClassHasParentOfAnotherOne(jsClass,(JSClass)spriteClass,null);
  if (allowWindowedApplicationInheritors) {
    return isSpriteInheritor;
  }
 else {
    final PsiElement windowedApplicationClass1=JSResolveUtil.unwrapProxy(JSResolveUtil.findClassByQName(WINDOWED_APPLICATION_CLASS_NAME_1,GlobalSearchScope.moduleWithLibrariesScope(module)));
    final PsiElement windowedApplicationClass2=JSResolveUtil.unwrapProxy(JSResolveUtil.findClassByQName(WINDOWED_APPLICATION_CLASS_NAME_2,GlobalSearchScope.moduleWithLibrariesScope(module)));
    final boolean isWindowedApplicationInheritor=windowedApplicationClass1 instanceof JSClass && JSResolveUtil.checkClassHasParentOfAnotherOne(jsClass,(JSClass)windowedApplicationClass1,null) || windowedApplicationClass2 instanceof JSClass && JSResolveUtil.checkClassHasParentOfAnotherOne(jsClass,(JSClass)windowedApplicationClass2,null);
    return isSpriteInheritor && !isWindowedApplicationInheritor;
  }
}
