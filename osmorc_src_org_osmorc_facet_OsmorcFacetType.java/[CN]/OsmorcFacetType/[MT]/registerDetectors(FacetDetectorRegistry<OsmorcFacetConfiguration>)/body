{
  VirtualFileFilter virtualFileFilter=new VirtualFileFilter(){
    public boolean accept(    VirtualFile file){
      List<String> headersToDetect=new ArrayList<String>(Arrays.asList(DETECTION_HEADERS));
      BufferedReader bufferedReader=null;
      try {
        InputStream inputStream=file.getInputStream();
        InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
        bufferedReader=new BufferedReader(inputStreamReader);
        while (bufferedReader.ready() && headersToDetect.size() > 0) {
          String line=bufferedReader.readLine();
          for (Iterator<String> headersToDetectIterator=headersToDetect.iterator(); headersToDetectIterator.hasNext(); ) {
            String headertoDeteect=headersToDetectIterator.next();
            if (line.startsWith(headertoDeteect)) {
              headersToDetectIterator.remove();
              break;
            }
          }
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
 finally {
        if (bufferedReader != null) {
          try {
            bufferedReader.close();
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
      }
      return headersToDetect.size() == 0;
    }
  }
;
  FacetDetector<VirtualFile,OsmorcFacetConfiguration> detector=new FacetDetector<VirtualFile,OsmorcFacetConfiguration>("Osmorc"){
    public OsmorcFacetConfiguration detectFacet(    VirtualFile source,    Collection<OsmorcFacetConfiguration> existentFacetConfigurations){
      if (!existentFacetConfigurations.isEmpty()) {
        return existentFacetConfigurations.iterator().next();
      }
      OsmorcFacetConfiguration osmorcFacetConfiguration=createDefaultConfiguration();
      osmorcFacetConfiguration.setOsmorcControlsManifest(false);
      return osmorcFacetConfiguration;
    }
  }
;
  osmorcFacetConfigurationFacetDetectorRegistry.registerUniversalDetector(ManifestApplicationComponent.MANIFEST,virtualFileFilter,detector);
}
