{
  VirtualFileFilter virtualFileFilter=new VirtualFileFilter(){
    public boolean accept(    VirtualFile file){
      List<String> headersToDetect=new ArrayList<String>(Arrays.asList(DETECTION_HEADERS));
      if (file != null && file.exists() && !file.isDirectory()) {
        BufferedReader bufferedReader=null;
        try {
          InputStream inputStream=file.getInputStream();
          InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
          bufferedReader=new BufferedReader(inputStreamReader);
          String line;
          while ((line=bufferedReader.readLine()) != null && headersToDetect.size() > 0) {
            for (Iterator<String> headersToDetectIterator=headersToDetect.iterator(); headersToDetectIterator.hasNext(); ) {
              String headerToDetect=headersToDetectIterator.next();
              if (line.startsWith(headerToDetect)) {
                headersToDetectIterator.remove();
                break;
              }
            }
          }
        }
 catch (        IOException e) {
          logger.warn("There was an unexpected exception when accessing " + file.getName() + " ("+ e.getMessage()+ ")");
          return false;
        }
 finally {
          if (bufferedReader != null) {
            try {
              bufferedReader.close();
            }
 catch (            IOException e) {
              logger.warn("There was an unexpected exception when closing stream to " + file.getName() + " ("+ e.getMessage()+ ")");
              return false;
            }
          }
        }
      }
      return headersToDetect.size() == 0;
    }
  }
;
  FacetDetector<VirtualFile,OsmorcFacetConfiguration> detector=new FacetDetector<VirtualFile,OsmorcFacetConfiguration>("Osmorc"){
    public OsmorcFacetConfiguration detectFacet(    VirtualFile source,    Collection<OsmorcFacetConfiguration> existentFacetConfigurations){
      if (!existentFacetConfigurations.isEmpty()) {
        return existentFacetConfigurations.iterator().next();
      }
      OsmorcFacetConfiguration osmorcFacetConfiguration=createDefaultConfiguration();
      osmorcFacetConfiguration.setOsmorcControlsManifest(false);
      osmorcFacetConfiguration.setManifestLocation(source.getPath());
      osmorcFacetConfiguration.setUseProjectDefaultManifestFileLocation(false);
      return osmorcFacetConfiguration;
    }
    @Override public void beforeFacetAdded(    @NotNull Facet facet,    FacetModel facetModel,    @NotNull ModifiableRootModel modifiableRootModel){
      super.beforeFacetAdded(facet,facetModel,modifiableRootModel);
      VirtualFile[] contentRoots=modifiableRootModel.getContentRoots();
      OsmorcFacet osmorcFacet=(OsmorcFacet)facet;
      OsmorcFacetConfiguration osmorcFacetConfiguration=osmorcFacet.getConfiguration();
      VirtualFile manifestFile=LocalFileSystem.getInstance().findFileByPath(osmorcFacetConfiguration.getManifestLocation());
      if (manifestFile != null) {
        for (        VirtualFile contentRoot : contentRoots) {
          if (VfsUtil.isAncestor(contentRoot,manifestFile,false)) {
            osmorcFacetConfiguration.setManifestLocation(VfsUtil.getRelativePath(manifestFile,contentRoot,'/'));
            break;
          }
        }
      }
 else {
        osmorcFacetConfiguration.setManifestLocation("");
        osmorcFacetConfiguration.setUseProjectDefaultManifestFileLocation(true);
      }
    }
  }
;
  osmorcFacetConfigurationFacetDetectorRegistry.registerUniversalDetector(ManifestFileTypeFactory.MANIFEST,virtualFileFilter,detector);
}
