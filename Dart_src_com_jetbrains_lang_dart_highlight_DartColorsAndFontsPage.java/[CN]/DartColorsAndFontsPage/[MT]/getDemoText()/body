{
  return "/**\n" + " * documentation\n" + " */\n"+ "<metadata>@Metadata</metadata>('text')\n"+ "class <class>SomeClass</class> extends BaseClass <keyword>implements</keyword> <class>OtherClass</class> {\n"+ "  /// documentation\n"+ "  var <instance.member.variable>someField</instance.member.variable> = null; // line comment\n"+ "  var <instance.member.variable>someString</instance.member.variable> = \"Escape sequences: <escape>\\n</escape> <escape>\\xFF</escape> <escape>\\u1234</escape> <escape>\\u{2F}</escape>\"\n"+ "  <class>String</class> <instance.member.variable>otherString</instance.member.variable> = \"Invalid escape sequences: <bad.escape>\\xZZ</bad.escape> <bad.escape>\\uXYZZ</bad.escape> <bad.escape>\\u{XYZ}</bad.escape>\"\n"+ "  <keyword>static</keyword> <builtin>num</builtin> <static.member.variable>staticField</static.member.variable> = 12345.67890;\n"+ "\n"+ "  <keyword>static</keyword> <static.member.function>staticFunction</static.member.function>() {\n"+ "    <label>label</label>: <static.member.variable>staticField</static.member.variable>++; /* block comment */\n"+ "  }\n\n"+ "  <constructor.decl>SomeClass</constructor.decl>(this.someString);\n"+ "\n"+ "  <instance.member.function>foo</instance.member.function>(<builtin>dynamic</builtin> <parameter>param</parameter>) {\n"+ "    <top.level.func.call>print</top.level.func.call>(<instance.member.variable>someString</instance.member.variable> + <parameter>param</parameter>);\n"+ "    var <local.variable>localVar</local.variable> = <class>SomeClass</class>.<static.member.variable>staticField</static.member.variable>; \n"+ "    var <local.variable>localVar2</local.variable> = new <constructor.call>SomeClass</constructor.call>('content').<instance.member.function.call>bar</instance.member.function.call>();\n"+ "    <local.variable>localVar</local.variable>++; \n"+ "    <function>localFunction</function>() {\n"+ "      <local.variable>localVar</local.variable> = ```; // bad character\n"+ "    };\n"+ "  }\n"+ "  <builtin>int</builtin> <instance.member.function>f</instance.member.function>() => 13;\n"+ "}\n\n"+ "<keyword>abstract</keyword> class BaseClass {\n"+ "  <builtin>int</builtin> g() => <abstract.call>f</abstract.call>();\n"+ "  <builtin>int</builtin> f();\n"+ "}\n\n"+ "const className = <symbol>#MyClass</symbol>;\n\n"+ "var <top.level.var.decl>topLevelVar</top.level.var.decl> = new SomeClass(null).<inherited.call>g</inherited.call>();\n\n"+ "<top.level.func.decl>main</top.level.func.decl>() {\n"+ "  <top.level.func.call>print</top.level.func.call>(<top.level.var.call>topLevelVar</top.level.var.call>);\n"+ "}\n";
}
