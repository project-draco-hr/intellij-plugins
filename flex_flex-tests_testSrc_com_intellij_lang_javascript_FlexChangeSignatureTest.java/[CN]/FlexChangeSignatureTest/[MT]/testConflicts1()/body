{
  String[] conflicts=new String[]{"There is already a parameter p1 in method From.foo(String, String). It will conflict with the new parameter.","There is already a parameter p1 in the method From.foo(String, String). It will conflict with the renamed parameter.","There is already a variable p2 in method From.foo(String, String). It will conflict with the new parameter.","There is already a variable p3 in method FromEx.foo(String, String). It will conflict with the new parameter.","There is already a variable p1 in method From.pp(). It will conflict with the new parameter.","There is already a variable p2 in method From.pp(). It will conflict with the new parameter.","There is already a variable p3 in method From.pp(). It will conflict with the new parameter.","There is already a variable p1 in function pp2(). It will conflict with the new parameter.","Class From already contains a method bar()","Method FromEx.foo(String, String) with internal visibility won't be accessible from function zz()","Method From.foo(String, String) with internal visibility won't be able to participate in hierarchy"};
  doTestConflicts("bar",JSAttributeList.AccessType.PACKAGE_LOCAL,"String",conflicts,new String[]{"pp","zz"},new JSParameterInfo("p1","String","","",0),new JSParameterInfo("p1","String","","",1),new JSParameterInfo("p1","String","","a",-1),new JSParameterInfo("p2","String","","b",-1),new JSParameterInfo("p3","String","","c",-1));
}
