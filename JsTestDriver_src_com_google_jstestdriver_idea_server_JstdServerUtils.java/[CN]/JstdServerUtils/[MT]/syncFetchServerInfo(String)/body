{
  try {
    new URL(serverUrl);
  }
 catch (  MalformedURLException e) {
    return JstdServerFetchResult.fromErrorMessage("Malformed url: " + serverUrl);
  }
  try {
    return HttpRequests.request(serverUrl.replaceAll("/$","") + "/cmd?listBrowsers").connect(new HttpRequests.RequestProcessor<JstdServerFetchResult>(){
      @Override public JstdServerFetchResult process(      @NotNull HttpRequests.Request request) throws IOException {
        try {
          if (!request.isSuccessful()) {
            return JstdServerFetchResult.fromErrorMessage("Incorrect server response status");
          }
        }
 catch (        IOException e) {
          return JstdServerFetchResult.fromErrorMessage("Reading error occurred");
        }
        final String badResponse="Malformed server response received";
        JsonElement jsonElement;
        try {
          jsonElement=new JsonParser().parse(new InputStreamReader(request.getInputStream(),CharsetToolkit.UTF8_CHARSET));
        }
 catch (        JsonSyntaxException e) {
          return JstdServerFetchResult.fromErrorMessage(badResponse);
        }
        try {
          return JstdServerFetchResult.fromServerInfo(new JstdServerInfo(serverUrl,parseBrowsers(jsonElement.getAsJsonArray())));
        }
 catch (        Exception e) {
          return JstdServerFetchResult.fromErrorMessage(badResponse);
        }
      }
    }
);
  }
 catch (  Exception e) {
    return JstdServerFetchResult.fromErrorMessage("Could not connect to " + serverUrl);
  }
}
