{
  final String sdkName=generateSdkName(sdkVersion);
  Sdk sdk=ProjectJdkTable.getInstance().findJdk(sdkName);
  if (sdk == null) {
    final AccessToken token=WriteAction.start();
    try {
      FlexSdkType2 sdkType=FlexSdkType2.getInstance();
      sdk=new ProjectJdkImpl(sdkName,sdkType,flexSdkRootPath,"");
      ProjectJdkTable.getInstance().addJdk(sdk);
      Disposer.register(getSdkParentDisposable(),new Disposable(){
        @Override public void dispose(){
          final AccessToken t=WriteAction.start();
          try {
            ProjectJdkTable sdkTable=ProjectJdkTable.getInstance();
            sdkTable.removeJdk(sdkTable.findJdk(sdkName));
          }
  finally {
            t.finish();
          }
        }
      }
);
      final SdkModificator modificator=sdk.getSdkModificator();
      modificator.setVersionString(FlexSdkType2.getInstance().getVersionString(sdk.getHomePath()));
      modifySdk(sdk,modificator);
      modificator.commitChanges();
    }
  finally {
      token.finish();
    }
  }
  JSTestUtils.modifyBuildConfiguration(module,new Consumer<ModifiableFlexBuildConfiguration>(){
    public void consume(    final ModifiableFlexBuildConfiguration bc){
      bc.setNature(new BuildConfigurationNature(targetPlatform,false,getOutputType()));
      bc.getDependencies().setSdkEntry(Factory.createSdkEntry(sdkName));
    }
  }
);
}
