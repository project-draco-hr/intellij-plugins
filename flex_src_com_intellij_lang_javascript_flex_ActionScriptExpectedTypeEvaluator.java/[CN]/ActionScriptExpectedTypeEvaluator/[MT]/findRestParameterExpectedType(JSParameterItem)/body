{
  if (!(parameterItem instanceof JSParameter)) {
    super.findRestParameterExpectedType(parameterItem);
    return;
  }
  final JSParameter param=(JSParameter)parameterItem;
  final JSFunction fun=param.getDeclaringFunction();
  if (fun == null) {
    super.findRestParameterExpectedType(parameterItem);
    return;
  }
  PsiElement element=JSResolveUtil.findParent(fun);
  JSType classType=element instanceof JSClass ? JSNamedType.createType(((JSClass)element).getQualifiedName(),JSTypeSource.EMPTY,JSContext.INSTANCE) : null;
  if (classType != null && JSTypeUtils.isActionScriptVectorType(classType)) {
    String name=fun.getName();
    String qualifiedExpressionType=null;
    JSExpression methodExpression=((JSCallExpression)JSTypeUtils.getScopeInOriginalTree(myGrandParent).getParent()).getMethodExpression();
    if (methodExpression instanceof JSReferenceExpression) {
      JSExpression qualifier=((JSReferenceExpression)methodExpression).getQualifier();
      if (qualifier != null) {
        qualifiedExpressionType=JSResolveUtil.getQualifiedExpressionType(qualifier,qualifier.getContainingFile());
      }
    }
    if (qualifiedExpressionType != null) {
      if ("push".equals(name) || "unshift".equals(name) || "splice".equals(name)) {
        JSResolveUtil.GenericSignature signature=JSResolveUtil.extractGenericSignature(qualifiedExpressionType);
        if (signature != null) {
          myType=signature.genericType;
          myScope=methodExpression;
        }
      }
 else       if ("concat".equals(name)) {
        myType=qualifiedExpressionType;
        myScope=methodExpression;
      }
    }
  }
 else {
    myType=JSCommonTypeNames.OBJECT_CLASS_NAME;
    myScope=myParent;
  }
}
