{
  if (!(parameterItem instanceof JSParameter)) {
    super.findRestParameterExpectedType(parameterItem);
    return;
  }
  final JSParameter param=(JSParameter)parameterItem;
  final JSFunction fun=param.getDeclaringFunction();
  if (fun == null) {
    super.findRestParameterExpectedType(parameterItem);
    return;
  }
  PsiElement element=JSResolveUtil.findParent(fun);
  JSType classType=element instanceof JSClass ? JSNamedType.createType(((JSClass)element).getQualifiedName(),JSTypeSource.EMPTY,JSContext.INSTANCE) : null;
  if (classType != null && JSTypeUtils.isActionScriptVectorType(classType)) {
    String name=fun.getName();
    JSType qualifiedExpressionType=null;
    JSExpression methodExpression=((JSCallExpression)JSTypeUtils.getScopeInOriginalTree(myGrandParent).getParent()).getMethodExpression();
    if (methodExpression instanceof JSReferenceExpression) {
      JSExpression qualifier=((JSReferenceExpression)methodExpression).getQualifier();
      if (qualifier != null) {
        qualifiedExpressionType=JSResolveUtil.getQualifiedExpressionJSType(qualifier,qualifier.getContainingFile());
      }
    }
    if (qualifiedExpressionType != null) {
      if ("push".equals(name) || "unshift".equals(name) || "splice".equals(name)) {
        if (qualifiedExpressionType instanceof JSGenericTypeImpl) {
          myResult=ContainerUtil.getFirstItem(((JSGenericTypeImpl)qualifiedExpressionType).getArguments());
        }
      }
 else       if ("concat".equals(name)) {
        myResult=qualifiedExpressionType;
      }
    }
  }
 else {
    myResult=createNamedType(JSCommonTypeNames.OBJECT_CLASS_NAME,myParent);
  }
}
