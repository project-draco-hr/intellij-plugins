{
  this.pools=pools;
  poolSizes=new int[pools.length];
  int size=0, preferredSize=0;
  for (int i=0, length=pools.length; i < length; i++) {
    poolSizes[i]=(i == 0) ? 0 : size;
    size+=pools[i].size();
    preferredSize+=(pools[i].mnEnd - pools[i].strEnd);
  }
  map=new int[size];
  in_ns=new WritableDataBuffer(preferredSize);
  in_nsset=new WritableDataBuffer(preferredSize);
  in_mn=new WritableDataBuffer(preferredSize);
  intP=new ByteArrayPool();
  uintP=new ByteArrayPool();
  doubleP=new ByteArrayPool();
  stringP=new ByteArrayPool();
  nsP=new NSPool();
  nssP=new NSSPool();
  mnP=new MultiNamePool();
  total=0;
  duplicate=0;
  totalBytes=0;
  duplicateBytes=0;
}
