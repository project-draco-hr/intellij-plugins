{
  final ProblemsHolder problemsHolder=new ProblemsHolder();
  final Project project=module.getProject();
  final LibraryCollector libraryCollector=new LibraryCollector(this);
  final StringRegistry.StringWriter stringWriter=new StringRegistry.StringWriter(16384);
  stringWriter.startChange();
  final Client client;
  try {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        libraryCollector.collect(module,new LibraryStyleInfoCollector(project,module,stringWriter,problemsHolder));
      }
    }
);
    client=Client.getInstance();
    if (stringWriter.hasChanges()) {
      client.updateStringRegistry(stringWriter);
    }
 else {
      stringWriter.finishChange();
    }
  }
 catch (  Throwable e) {
    stringWriter.rollbackChange();
    throw new InitException(e,"error.collect.libraries");
  }
  final InfoList<Project,ProjectInfo> registeredProjects=client.getRegisteredProjects();
  final String projectLocationHash=project.getLocationHash();
  ProjectInfo info=registeredProjects.getNullableInfo(project);
  final boolean isNewProject=info == null;
  if (isNewProject) {
    if (librarySet == null) {
      librarySet=createLibrarySet(projectLocationHash + "_fdk",null,libraryCollector.sdkLibraries,libraryCollector.getFlexSdkVersion(),new SwcDependenciesSorter(appDir,module),true);
      client.registerLibrarySet(librarySet);
    }
    info=new ProjectInfo(project,librarySet,libraryCollector.getFlexSdk());
    registeredProjects.add(info);
    client.openProject(project);
  }
 else {
    if (libraryCollector.sdkLibraries != null) {
      librarySet=createLibrarySet(Integer.toHexString(module.getName().hashCode()) + "_fdk",null,libraryCollector.sdkLibraries,libraryCollector.getFlexSdkVersion(),new SwcDependenciesSorter(appDir,module),true);
      client.registerLibrarySet(librarySet);
    }
  }
  if (libraryCollector.externalLibraries.isEmpty()) {
    if (!isNewProject && librarySet == null) {
      librarySet=info.getLibrarySet();
    }
  }
 else   if (isNewProject) {
    librarySet=createLibrarySet(projectLocationHash,librarySet,libraryCollector.externalLibraries,libraryCollector.getFlexSdkVersion(),new SwcDependenciesSorter(appDir,module),false);
    client.registerLibrarySet(librarySet);
    info.setLibrarySet(librarySet);
  }
 else {
    throw new UnsupportedOperationException("merge existing libraries and new");
  }
  ModuleInfo moduleInfo=new ModuleInfo(module);
  if (collectLocalStyleHolders) {
    stringWriter.startChange();
    try {
      ModuleInfoUtil.collectLocalStyleHolders(moduleInfo,libraryCollector.getFlexSdkVersion(),stringWriter,problemsHolder);
      client.registerModule(project,moduleInfo,new String[]{librarySet.getId()},stringWriter);
    }
 catch (    Throwable e) {
      stringWriter.rollbackChange();
      throw new InitException(e,"error.collect.local.style.holders");
    }
  }
 else {
    client.registerModule(project,moduleInfo,new String[]{librarySet.getId()},stringWriter);
  }
  if (!problemsHolder.isEmpty()) {
    DocumentProblemManager.getInstance().report(module.getProject(),problemsHolder);
  }
}
