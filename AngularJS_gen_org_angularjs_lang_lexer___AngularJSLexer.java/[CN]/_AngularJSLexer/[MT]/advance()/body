{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 46:
{
        return TRUE_KEYWORD;
      }
case 51:
    break;
case 15:
{
    return LT;
  }
case 52:
break;
case 43:
{
return NEQEQ;
}
case 53:
break;
case 26:
{
return SEMICOLON;
}
case 54:
break;
case 9:
{
return MULT;
}
case 55:
break;
case 21:
{
return LBRACE;
}
case 56:
break;
case 22:
{
return RBRACE;
}
case 57:
break;
case 14:
{
return EXCL;
}
case 58:
break;
case 38:
{
return ANDAND;
}
case 59:
break;
case 12:
{
return XOR;
}
case 60:
break;
case 19:
{
return LPAR;
}
case 61:
break;
case 24:
{
return RBRACKET;
}
case 62:
break;
case 30:
{
yypushback(yytext().length());
yybegin(YYINITIAL);
}
case 63:
break;
case 25:
{
return COMMA;
}
case 64:
break;
case 4:
{
return DOT;
}
case 65:
break;
case 18:
{
return OR;
}
case 66:
break;
case 29:
{
return STRING_LITERAL;
}
case 67:
break;
case 10:
{
return DIV;
}
case 68:
break;
case 32:
{
return AS_KEYWORD;
}
case 69:
break;
case 49:
{
return TRACK_BY_KEYWORD;
}
case 70:
break;
case 50:
{
return UNDEFINED_KEYWORD;
}
case 71:
break;
case 27:
{
return COLON;
}
case 72:
break;
case 40:
{
return ONE_TIME_BINDING;
}
case 73:
break;
case 34:
{
return EQEQ;
}
case 74:
break;
case 17:
{
return AND;
}
case 75:
break;
case 44:
{
yypushback(1);
return INVALID_ESCAPE_SEQUENCE;
}
case 76:
break;
case 37:
{
return GE;
}
case 77:
break;
case 11:
{
return PERC;
}
case 78:
break;
case 20:
{
return RPAR;
}
case 79:
break;
case 3:
{
return NUMERIC_LITERAL;
}
case 80:
break;
case 39:
{
return OROR;
}
case 81:
break;
case 45:
{
return INVALID_ESCAPE_SEQUENCE;
}
case 82:
break;
case 16:
{
return GT;
}
case 83:
break;
case 48:
{
return FALSE_KEYWORD;
}
case 84:
break;
case 23:
{
return LBRACKET;
}
case 85:
break;
case 28:
{
return QUEST;
}
case 86:
break;
case 35:
{
return NE;
}
case 87:
break;
case 6:
{
return MINUS;
}
case 88:
break;
case 7:
{
yybegin(YYSTRING);
return STRING_LITERAL;
}
case 89:
break;
case 1:
{
return BAD_CHARACTER;
}
case 90:
break;
case 5:
{
return IDENTIFIER;
}
case 91:
break;
case 42:
{
return EQEQEQ;
}
case 92:
break;
case 31:
{
yybegin(YYINITIAL);
return STRING_LITERAL;
}
case 93:
break;
case 13:
{
return EQ;
}
case 94:
break;
case 33:
{
return IN_KEYWORD;
}
case 95:
break;
case 2:
{
return WHITE_SPACE;
}
case 96:
break;
case 8:
{
return PLUS;
}
case 97:
break;
case 41:
{
return ESCAPE_SEQUENCE;
}
case 98:
break;
case 47:
{
return NULL_KEYWORD;
}
case 99:
break;
case 36:
{
return LE;
}
case 100:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
