{
  final PsiElementPattern.Capture<PsiElement> idInReference=psiElement().withSuperParent(1,DartId.class).withSuperParent(2,DartReference.class);
  extend(CompletionType.BASIC,idInReference.andNot(psiElement().withSuperParent(3,DartLibraryReferenceList.class)),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final DartReference reference=PsiTreeUtil.getParentOfType(parameters.getPosition(),DartReference.class);
      if (reference != null) {
        final THashSet<DartComponentName> variants=new THashSet<DartComponentName>();
        for (        LookupElement element : DartReferenceCompletionContributor.addCompletionVariants(reference,variants)) {
          result.addElement(element);
        }
        if (parameters.getInvocationCount() > 1 && DartResolveUtil.aloneOrFirstInChain(reference)) {
          DartGlobalVariantsHelper.addAdditionalGlobalVariants(result,reference,variants,null);
        }
      }
    }
  }
);
  extend(CompletionType.BASIC,idInReference.withSuperParent(3,DartLibraryReferenceList.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final DartReference reference=PsiTreeUtil.getParentOfType(parameters.getPosition(),DartReference.class);
      final PsiElement library=resolveLibrary(reference);
      if (library != null) {
        final Set<DartComponentName> suggestedVariants=new THashSet<DartComponentName>();
        DartResolveUtil.processTopLevelDeclarations(reference,new ComponentNameScopeProcessor(suggestedVariants),DartResolveUtil.getRealVirtualFile(library.getContainingFile()),null);
        for (        DartLookupElement element : DartLookupElement.convert(suggestedVariants,false)) {
          result.addElement(element);
        }
      }
    }
    @Nullable public PsiElement resolveLibrary(    DartReference reference){
      final DartPsiCompositeElementImpl statement=PsiTreeUtil.getParentOfType(reference,DartImportStatementImpl.class,DartExportStatementImpl.class);
      final DartPathOrLibraryReference pathOrLibraryReference=PsiTreeUtil.getChildOfType(statement,DartPathOrLibraryReference.class);
      return pathOrLibraryReference != null ? pathOrLibraryReference.resolve() : null;
    }
  }
);
}
