{
  DartClass dartClass=null;
  if (DartResolveUtil.aloneOrFirstInChain(reference)) {
    DartResolveUtil.treeWalkUpAndTopLevelDeclarations(reference,new ComponentNameScopeProcessor(suggestedVariants));
    dartClass=PsiTreeUtil.getParentOfType(reference,DartClass.class);
  }
  final DartReference leftReference=DartResolveUtil.getLeftReference(reference);
  if (leftReference != null) {
    final DartClassResolveResult classResolveResult=leftReference.resolveDartClass();
    dartClass=classResolveResult.getDartClass();
    if (PsiTreeUtil.getParentOfType(leftReference.resolve(),DartImportStatement.class,DartExportStatement.class) != null) {
      final VirtualFile virtualFile=DartResolveUtil.getImportedFileByImportPrefix(reference.getContainingFile(),leftReference.getText());
      DartResolveUtil.processTopLevelDeclarations(reference,new ComponentNameScopeProcessor(suggestedVariants),virtualFile,null);
    }
  }
  if (dartClass != null) {
    if (dartClass.isEnum()) {
      suggestedVariants.addAll(DartResolveUtil.getComponentNames(dartClass.getEnumConstantDeclarationList()));
    }
 else {
      final boolean needFilterPrivateMembers=!DartResolveUtil.sameLibrary(reference,dartClass);
      suggestedVariants.addAll(DartResolveUtil.getComponentNames(dartClass.getFields(),needFilterPrivateMembers));
      suggestedVariants.addAll(DartResolveUtil.getComponentNames(dartClass.getMethods(),needFilterPrivateMembers));
      suggestedVariants.addAll(DartResolveUtil.getComponentNames(ContainerUtil.filter(dartClass.getConstructors(),new Condition<DartComponent>(){
        @Override public boolean value(        DartComponent component){
          return component instanceof DartNamedConstructorDeclaration || component instanceof DartFactoryConstructorDeclaration;
        }
      }
),needFilterPrivateMembers));
    }
  }
  final boolean typeInNew=reference.getParent() instanceof DartType && reference.getParent().getParent() instanceof DartNewExpression;
  if (typeInNew) {
    final Set<DartComponentName> constructors=new THashSet<DartComponentName>();
    for (    DartComponentName componentName : suggestedVariants) {
      final PsiElement parent=componentName.getParent();
      if (!(parent instanceof DartClass))       continue;
      constructors.addAll(DartResolveUtil.getComponentNames(ContainerUtil.filter(((DartClass)parent).getConstructors(),new Condition<DartComponent>(){
        @Override public boolean value(        DartComponent component){
          boolean namedOrFactory=component instanceof DartNamedConstructorDeclaration || component instanceof DartFactoryConstructorDeclaration;
          return namedOrFactory && component.isPublic();
        }
      }
)));
    }
    suggestedVariants.addAll(constructors);
  }
  return DartLookupElement.convert(suggestedVariants,typeInNew);
}
