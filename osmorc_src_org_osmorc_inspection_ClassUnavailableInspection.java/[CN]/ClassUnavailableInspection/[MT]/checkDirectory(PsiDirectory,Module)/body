{
  BundleManager bundleManager=ServiceManager.getService(directory.getProject(),BundleManager.class);
  final Module containingModule=ModuleUtil.findModuleForFile(directory.getVirtualFile(),usingModule.getProject());
  AvailabilityCheckResult result=new AvailabilityCheckResult(AvailabilityCheckResult.ResultType.SymbolIsNotExported,"No bundle provides this entity.");
  Collection<Object> usingModuleHostBundles=bundleManager.getHostBundles(usingModule);
  for (  Object usingModuleHostBundle : usingModuleHostBundles) {
    if (usingModuleHostBundle == containingModule) {
      return result;
    }
  }
  Collection<Object> containingBundles;
  if (containingModule != null) {
    containingBundles=bundleManager.getHostBundles(containingModule);
  }
 else {
    containingBundles=new ArrayList<Object>();
  }
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(usingModule.getProject()).getFileIndex();
  final List<OrderEntry> entriesForFile=projectFileIndex.getOrderEntriesForFile(directory.getVirtualFile());
  LibraryHandler libraryHandler=ServiceManager.getService(LibraryHandler.class);
  for (  OrderEntry orderEntry : entriesForFile) {
    Module orderEntryModule=orderEntry.getOwnerModule();
    if (orderEntryModule == usingModule) {
      if (orderEntry instanceof LibraryOrderEntry) {
        final Library library=((LibraryOrderEntry)orderEntry).getLibrary();
        if (library != null) {
          result=isLibraryExportingPackageTo(library,directory,usingModule,bundleManager);
          if (result.isOk()) {
            break;
          }
        }
      }
 else       if (orderEntry instanceof ModuleOrderEntry) {
        Module module=((ModuleOrderEntry)orderEntry).getModule();
        if (containingModule != null) {
          result=isBundleExportingContainingPackageTo(module,containingModule,usingModule,directory,bundleManager);
          if (!result.isOk()) {
            for (            Object containingBundleHost : containingBundles) {
              result=isBundleExportingContainingPackageTo(containingBundleHost,containingBundleHost,usingModule,directory,bundleManager);
              if (result.isOk()) {
                break;
              }
            }
          }
        }
 else {
          ProjectSettings projectSettings=ServiceManager.getService(usingModule.getProject(),ProjectSettings.class);
          String frameworkInstanceName=projectSettings.getFrameworkInstanceName();
          if (frameworkInstanceName != null) {
            List<Library> libraries=libraryHandler.getLibraries(frameworkInstanceName);
            for (            Library library : libraries) {
              VirtualFile[] files=library.getFiles(OrderRootType.CLASSES);
              for (              VirtualFile file : files) {
                if (VfsUtil.isAncestor(file,directory.getVirtualFile(),false)) {
                  result=isLibraryExportingPackageTo(library,directory,usingModule,bundleManager);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
