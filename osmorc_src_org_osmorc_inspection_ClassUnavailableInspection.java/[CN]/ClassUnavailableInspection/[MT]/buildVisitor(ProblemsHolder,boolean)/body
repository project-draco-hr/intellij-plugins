{
  return new JavaElementVisitor(){
    @Override public void visitNewExpression(    PsiNewExpression expression){
      OsmorcFacet instance=OsmorcFacet.getInstance(expression);
      if (instance != null && instance.getConfiguration().isManifestManuallyEdited()) {
        PsiJavaCodeReferenceElement classReference=expression.getClassReference();
        if (classReference != null) {
          final AvailabilityCheckResult result=checkElement(classReference.resolve(),ModuleUtil.findModuleForPsiElement(expression));
          if (!result.isOk()) {
            holder.registerProblem(expression,result.getDescription(),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
          }
        }
      }
    }
    @Override public void visitVariable(    PsiVariable variable){
      OsmorcFacet instance=OsmorcFacet.getInstance(variable);
      if (instance != null && instance.getConfiguration().isManifestManuallyEdited()) {
        PsiClass psiClass=null;
        PsiType psiType=variable.getType();
        if (psiType instanceof PsiClassType) {
          psiClass=((PsiClassType)psiType).resolve();
        }
        final AvailabilityCheckResult result=checkElement(psiClass,ModuleUtil.findModuleForPsiElement(variable));
        if (!result.isOk()) {
          holder.registerProblem(variable,result.getDescription(),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        }
      }
    }
    @Override public void visitImportStatement(    PsiImportStatement statement){
      OsmorcFacet instance=OsmorcFacet.getInstance(statement);
      if (instance != null && instance.getConfiguration().isManifestManuallyEdited()) {
        PsiElement element=statement.resolve();
        if (element == null) {
          PsiJavaCodeReferenceElement importReference=statement.getImportReference();
          if (importReference != null) {
            String importText=importReference.getText();
            if (importText.endsWith(";")) {
              importText=importText.substring(0,importText.length() - 1);
            }
            if (importText.endsWith(".*")) {
              importText=importText.substring(0,importText.length() - 2);
            }
            PsiReference reference=importReference.findReferenceAt(importText.length() - 1);
            if (reference != null) {
              element=reference.resolve();
            }
          }
        }
        final AvailabilityCheckResult result=checkElement(element,ModuleUtil.findModuleForPsiElement(statement));
        if (!result.isOk()) {
          holder.registerProblem(statement,result.getDescription(),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        }
      }
    }
  }
;
}
