{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null)   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final DataContext dataContext=e.getDataContext();
  final PsiElement psiElement=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  final PsiFile psiFile=LangDataKeys.PSI_FILE.getData(dataContext);
  final VirtualFile virtualFile=PlatformDataKeys.VIRTUAL_FILE.getData(dataContext);
  final FindManager findManager=FindManager.getInstance(project);
  final FindModel findModel=(FindModel)findManager.getFindInFileModel().clone();
  findModel.setRegularExpressions(true);
  findModel.setStringToFind("\\.(controller|filter|service|factory|module|value|constant|directive)\\(\\s*(\"|')(.*)(\"|')");
  findModel.setStringToReplace("$3");
  FindInProjectUtil.setDirectoryName(findModel,dataContext);
  CommonProcessors.CollectProcessor<Usage> collectProcessor=new CommonProcessors.CollectProcessor<Usage>(){
    @Override protected boolean accept(    Usage usage){
      return super.accept(usage);
    }
    @Override public Collection<Usage> getResults(){
      return super.getResults();
    }
  }
;
  PsiDirectory directory=PsiManager.getInstance(project).findDirectory(project.getBaseDir());
  FindInProjectUtil.findUsages(findModel,directory,project,true,new AdapterProcessor<UsageInfo,Usage>(collectProcessor,UsageInfo2UsageAdapter.CONVERTER));
  final Collection<Usage> results=collectProcessor.getResults();
  final Map<String,AngularItem> validResults=new HashMap<String,AngularItem>();
  Runnable runnable=new Runnable(){
    public void run(){
      for (      final Usage result : results) {
        final UsageInfo2UsageAdapter usage=(UsageInfo2UsageAdapter)result;
        if (usage.getFile().getName().startsWith("angular"))         continue;
        usage.processRangeMarkers(new Processor<Segment>(){
          @Override public boolean process(          Segment segment){
            try {
              final int textOffset=segment.getStartOffset();
              final int textEndOffset=segment.getEndOffset();
              Document document=usage.getDocument();
              CharSequence charsSequence=document.getCharsSequence();
              final CharSequence foundString=charsSequence.subSequence(textOffset,textEndOffset);
              String regExMatch=FindManager.getInstance(project).getStringToReplace(foundString.toString(),findModel,textOffset,document.getText());
              System.out.println(regExMatch);
              PsiElement element=PsiUtil.getElementAtOffset(((UsageInfo2UsageAdapter)result).getUsageInfo().getFile(),textOffset + 1);
              System.out.println(element.getText() + ": " + regExMatch+ " - "+ foundString.toString());
              if (regExMatch.length() > 20)               return true;
              validResults.put(regExMatch,new AngularItem(regExMatch,result,element));
              return true;
            }
 catch (            FindManager.MalformedReplacementStringException e1) {
              e1.printStackTrace();
            }
            return false;
          }
        }
);
      }
    }
  }
;
  ApplicationManager.getApplication().runReadAction(runnable);
  final GotoAngularModel model=new GotoAngularModel(project,validResults);
  showNavigationPopup(e,model,new GotoActionBase.GotoActionCallback<Object>(){
    @Override protected ChooseByNameFilter<Object> createFilter(    @NotNull ChooseByNamePopup popup){
      popup.setSearchInAnyPlace(true);
      popup.setShowListForEmptyPattern(true);
      return super.createFilter(popup);
    }
    @Override public void elementChosen(    ChooseByNamePopup popup,    final Object element){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          PsiElement psi=((AngularItem)element).getElement();
          NavigationUtil.activateFileWithPsiElement(psi.getNavigationElement());
        }
      }
);
    }
  }
);
}
