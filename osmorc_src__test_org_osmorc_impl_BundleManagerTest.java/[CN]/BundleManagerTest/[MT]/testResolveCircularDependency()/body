{
  myBundleManager.addManifestHolder(makeHolder("MyManifest.MF",bundleSymbolicName("foo.bar").bundleVersion("1.0.0").requireBundle("org.eclipse.circular.one").toString(),getModule()));
  FutureTask<Set<Object>> bt=new FutureTask<Set<Object>>(new Callable<Set<Object>>(){
    @Override public Set<Object> call() throws Exception {
      return myBundleManager.resolveDependenciesOf(getModule());
    }
  }
);
  Executors.newFixedThreadPool(1).execute(bt);
  long elapsed=0;
  long last=System.currentTimeMillis();
  while (!bt.isDone()) {
    elapsed+=System.currentTimeMillis() - last;
    last=System.currentTimeMillis();
    if (elapsed > 1000) {
      bt.cancel(true);
      fail("Infinite loop detected in MyBundleManager while resolving circular dependencies.");
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (bt.isDone()) {
    Set<Object> objects=bt.get();
    assertThat(objects,CoreMatchers.notNullValue());
    assertThat(objects.contains("org.eclipse.circular.one"),is(true));
    assertThat(objects.contains("org.eclipse.circular.two"),is(true));
    assertThat(objects.size(),is(2));
  }
}
