{
  final JSClass fromClass=(JSClass)from.getIdentifyingElement();
  final JSClass toClass=(JSClass)to.getIdentifyingElement();
  if (fromClass.isEquivalentTo(toClass)) {
    return null;
  }
  if (toClass.isInterface()) {
    if (JSPsiImplUtils.containsEquivalent(fromClass.isInterface() ? fromClass.getSuperClasses() : fromClass.getImplementedInterfaces(),toClass)) {
      return null;
    }
    Callable<DiagramEdge<Object>> callable=new Callable<DiagramEdge<Object>>(){
      @Override public DiagramEdge<Object> call() throws Exception {
        String targetQName=toClass.getQualifiedName();
        JSRefactoringUtil.addToSupersList(fromClass,targetQName,true);
        if (targetQName.contains(".") && !(fromClass instanceof XmlBackedJSClassImpl)) {
          List<FormatFixer> formatters=new ArrayList<FormatFixer>();
          formatters.add(ImportUtils.insertImportStatements(fromClass,Collections.singletonList(targetQName)));
          formatters.addAll(ECMAScriptImportOptimizer.executeNoFormat(fromClass.getContainingFile()));
          FormatFixer.fixAll(formatters);
        }
        return addEdgeAndRefresh(from,to,fromClass.isInterface() ? FlashUmlRelationship.GENERALIZATION : FlashUmlRelationship.INTERFACE_GENERALIZATION);
      }
    }
;
    String commandName=FlexBundle.message(fromClass.isInterface() ? "create.extends.relationship.command.name" : "create.implements.relationship.command.name",fromClass.getQualifiedName(),toClass.getQualifiedName());
    return DiagramAction.performCommand(getBuilder(),callable,commandName,null,fromClass.getContainingFile());
  }
 else {
    if (fromClass.isInterface()) {
      return null;
    }
 else     if (fromClass instanceof XmlBackedJSClassImpl) {
      JSClass[] superClasses=fromClass.getSuperClasses();
      if (JSPsiImplUtils.containsEquivalent(superClasses,toClass)) {
        return null;
      }
      if (superClasses.length > 0) {
        final JSClass currentParent=superClasses[0];
        if (Messages.showYesNoDialog(FlexBundle.message("replace.base.component.prompt",currentParent.getQualifiedName(),toClass.getQualifiedName()),FlexBundle.message("create.edge.title"),Messages.getQuestionIcon()) == Messages.NO) {
          return null;
        }
      }
      Callable<DiagramEdge<Object>> callable=new Callable<DiagramEdge<Object>>(){
        @Override public DiagramEdge<Object> call() throws Exception {
          NewFlexComponentAction.setParentComponent((XmlBackedJSClassImpl)fromClass,toClass.getQualifiedName());
          return addEdgeAndRefresh(from,to,DiagramRelationships.GENERALIZATION);
        }
      }
;
      String commandName=FlexBundle.message("create.extends.relationship.command.name",fromClass.getQualifiedName(),toClass.getQualifiedName());
      return DiagramAction.performCommand(getBuilder(),callable,commandName,null,fromClass.getContainingFile());
    }
 else {
      final JSClass[] superClasses=fromClass.getSuperClasses();
      if (JSPsiImplUtils.containsEquivalent(superClasses,toClass)) {
        return null;
      }
      if (superClasses.length > 0 && !JSResolveUtil.isObjectClass(superClasses[0])) {
        final JSClass currentParent=superClasses[0];
        if (Messages.showYesNoDialog(FlexBundle.message("replace.base.class.prompt",currentParent.getQualifiedName(),toClass.getQualifiedName()),FlexBundle.message("create.edge.title"),Messages.getQuestionIcon()) == Messages.NO) {
          return null;
        }
      }
      Callable<DiagramEdge<Object>> callable=new Callable<DiagramEdge<Object>>(){
        @Override public DiagramEdge<Object> call() throws Exception {
          List<FormatFixer> formatters=new ArrayList<FormatFixer>();
          boolean optimize=false;
          if (superClasses.length > 0 && !JSResolveUtil.isObjectClass(superClasses[0])) {
            JSRefactoringUtil.removeFromReferenceList(fromClass.getExtendsList(),superClasses[0],formatters);
            optimize=needsImport(fromClass,superClasses[0]);
          }
          JSRefactoringUtil.addToSupersList(fromClass,toClass.getQualifiedName(),false);
          if (needsImport(fromClass,toClass)) {
            formatters.add(ImportUtils.insertImportStatements(fromClass,Collections.singletonList(toClass.getQualifiedName())));
            optimize=true;
          }
          if (optimize) {
            formatters.addAll(ECMAScriptImportOptimizer.executeNoFormat(fromClass.getContainingFile()));
          }
          FormatFixer.fixAll(formatters);
          return addEdgeAndRefresh(from,to,DiagramRelationships.GENERALIZATION);
        }
      }
;
      String commandName=FlexBundle.message("create.extends.relationship.command.name",fromClass.getQualifiedName(),toClass.getQualifiedName());
      return DiagramAction.performCommand(getBuilder(),callable,commandName,null,fromClass.getContainingFile());
    }
  }
}
