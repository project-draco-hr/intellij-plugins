{
  if (_tokenStart < _endOffset) {
    if (Character.isWhitespace(_buffer.charAt(_tokenStart))) {
      _tokenType=TokenType.WHITE_SPACE;
      _tokenEnd=_tokenStart + 1;
    }
 else     if (_currentState == WAITING_FOR_HEADER_ASSIGNMENT_STATE) {
      if (_buffer.charAt(_tokenStart) == ':') {
        _tokenType=ManifestTokenTypes.HEADER_ASSIGNMENT;
      }
 else {
        _tokenType=TokenType.BAD_CHARACTER;
      }
      _tokenEnd=_tokenStart + 1;
      _currentState=_stateAfterColon;
    }
 else     if ((_tokenStart == 0 || _buffer.charAt(_tokenStart - 1) == '\n') && !Character.isWhitespace(_buffer.charAt(_tokenStart))) {
      if (_buffer.charAt(_tokenStart) == ':') {
        _tokenType=TokenType.BAD_CHARACTER;
        _tokenEnd=_tokenStart + 1;
        _currentState=SIMPLE_HEADER_STATE;
      }
 else {
        _tokenEnd=_tokenStart + 1;
        while (_tokenEnd < _endOffset && _buffer.charAt(_tokenEnd) != ':' && !Character.isWhitespace(_buffer.charAt(_tokenEnd))) {
          _tokenEnd++;
        }
        _tokenType=ManifestTokenTypes.HEADER_NAME;
        _stateAfterColon=_headerParserRepository.getHeaderParser(_buffer.subSequence(_tokenStart,_tokenEnd).toString()).isSimpleHeader() ? SIMPLE_HEADER_STATE : COMPLEX_HEADER_STATE;
        _currentState=WAITING_FOR_HEADER_ASSIGNMENT_STATE;
      }
    }
 else     if (_currentState == COMPLEX_HEADER_STATE) {
      if ((_tokenStart + 1) < _endOffset && _buffer.charAt(_tokenStart) == ':' && _buffer.charAt(_tokenStart + 1) == '=') {
        _tokenType=ManifestTokenTypes.DIRECTIVE_ASSIGNMENT;
        _tokenEnd=_tokenStart + 2;
      }
 else       if (_buffer.charAt(_tokenStart) == '=') {
        _tokenType=ManifestTokenTypes.ATTRIBUTE_ASSIGNMENT;
        _tokenEnd=_tokenStart + 1;
      }
 else       if (_buffer.charAt(_tokenStart) == ',') {
        _tokenType=ManifestTokenTypes.CLAUSE_SEPARATOR;
        _tokenEnd=_tokenStart + 1;
      }
 else       if (_buffer.charAt(_tokenStart) == ';') {
        _tokenType=ManifestTokenTypes.PARAMETER_SEPARATOR;
        _tokenEnd=_tokenStart + 1;
      }
 else       if (_buffer.charAt(_tokenStart) == '\"') {
        _tokenEnd=_tokenStart + 1;
        while (_tokenEnd < _endOffset && _buffer.charAt(_tokenEnd) != '\"') {
          _tokenEnd++;
        }
        if (_tokenEnd < _endOffset && _buffer.charAt(_tokenEnd) == '\"') {
          _tokenEnd++;
        }
        _tokenType=ManifestTokenTypes.HEADER_VALUE;
      }
 else {
        while (_tokenEnd < _endOffset && _buffer.charAt(_tokenEnd) != '\"' && _buffer.charAt(_tokenEnd) != ',' && _buffer.charAt(_tokenEnd) != ';' && _buffer.charAt(_tokenEnd) != '=' && !(_tokenEnd + 1 < _endOffset && ((_buffer.charAt(_tokenEnd) == ':' && _buffer.charAt(_tokenEnd + 1) == '=') || (_buffer.charAt(_tokenEnd) == '\n' && !Character.isWhitespace(_buffer.charAt(_tokenEnd + 1))))) && !(_tokenEnd + 1 == _endOffset && _buffer.charAt(_tokenEnd) == '\n')) {
          _tokenEnd++;
        }
        _tokenType=ManifestTokenTypes.HEADER_VALUE;
        if (_tokenEnd < _endOffset) {
          if (_buffer.charAt(_tokenEnd) == '=') {
            _tokenType=ManifestTokenTypes.ATTRIBUTE_NAME;
          }
 else           if ((_tokenEnd + 1 < _endOffset) && _buffer.charAt(_tokenEnd) == ':' && _buffer.charAt(_tokenEnd + 1) == '=') {
            _tokenType=ManifestTokenTypes.DIRECTIVE_NAME;
          }
        }
      }
    }
 else {
      _tokenEnd=_tokenStart + 1;
      while (_tokenEnd < _endOffset && !(_buffer.charAt(_tokenEnd) == '\n' && (_tokenEnd + 1 == _endOffset || !Character.isWhitespace(_buffer.charAt(_tokenEnd + 1))))) {
        _tokenEnd++;
      }
      _tokenType=ManifestTokenTypes.HEADER_VALUE;
    }
  }
 else {
    _tokenType=null;
    _tokenEnd=_tokenStart;
  }
}
