{
  addContainingFile(filesQueue,mainModule);
  if (!StringUtil.isEmptyOrSpaces(mainModule)) {
    final JSImplicitElement element=AngularIndexUtil.resolve(myProject,AngularModuleIndex.KEY,mainModule);
    if (element != null) {
      final JSCallExpression callExpression=PsiTreeUtil.getParentOfType(element,JSCallExpression.class);
      if (callExpression == null)       return;
      final List<String> dependenciesInModuleDeclaration=AngularModuleIndex.findDependenciesInModuleDeclaration(callExpression);
      if (dependenciesInModuleDeclaration != null) {
        for (        String module : dependenciesInModuleDeclaration) {
          modulesQueue.add(module);
          addContainingFile(filesQueue,module);
        }
      }
    }
  }
}
