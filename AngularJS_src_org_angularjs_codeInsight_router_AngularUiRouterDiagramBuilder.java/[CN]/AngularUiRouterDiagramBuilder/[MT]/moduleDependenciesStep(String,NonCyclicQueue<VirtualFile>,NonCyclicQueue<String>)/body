{
  final FileBasedIndex instance=FileBasedIndex.getInstance();
  if (!StringUtil.isEmptyOrSpaces(mainModule)) {
    final List<List<String>> values=instance.getValues(AngularModuleDependencyIndex.ANGULAR_MODULE_DEPENDENCY_INDEX,mainModule,GlobalSearchScope.projectScope(myProject));
    for (    List<String> value : values) {
      for (      String module : value) {
        modulesQueue.add(module);
        final CommonProcessors.CollectProcessor<JSImplicitElement> collectProcessor=new CommonProcessors.CollectProcessor<>();
        AngularIndexUtil.multiResolve(myProject,AngularModuleIndex.KEY,module,collectProcessor);
        if (collectProcessor.getResults().isEmpty())         return;
        for (        JSImplicitElement element : collectProcessor.getResults()) {
          if (element != null && element.getNavigationElement() != null && element.getNavigationElement().getContainingFile() != null) {
            final VirtualFile file=element.getNavigationElement().getContainingFile().getVirtualFile();
            if (NodeModuleUtil.isFromNodeModules(myProject,file))             return;
          }
        }
        final JSImplicitElement element=collectProcessor.getResults().iterator().next();
        if (element != null && element.getNavigationElement() != null && element.getNavigationElement().getContainingFile() != null) {
          filesQueue.add(element.getNavigationElement().getContainingFile().getVirtualFile());
        }
      }
    }
  }
}
