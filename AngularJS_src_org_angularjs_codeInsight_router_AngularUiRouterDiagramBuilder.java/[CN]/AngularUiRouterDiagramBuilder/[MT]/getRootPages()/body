{
  final List<VirtualFile> roots=new ArrayList<>();
  Collections.sort(roots,new Comparator<VirtualFile>(){
    @Override public int compare(    VirtualFile o1,    VirtualFile o2){
      return Integer.compare(o2.getUrl().length(),o1.getUrl().length());
    }
  }
);
  final Map<PsiFile,AngularNamedItemDefinition> files=new HashMap<>();
  final FileBasedIndex instance=FileBasedIndex.getInstance();
  final Collection<String> keys=instance.getAllKeys(AngularAppIndex.ANGULAR_APP_INDEX,myProject);
  if (keys.isEmpty())   return;
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  final GlobalSearchScope projectScope=GlobalSearchScope.projectScope(myProject);
  for (  String key : keys) {
    instance.processValues(AngularAppIndex.ANGULAR_APP_INDEX,key,null,new FileBasedIndex.ValueProcessor<AngularNamedItemDefinition>(){
      @Override public boolean process(      VirtualFile file,      AngularNamedItemDefinition value){
        final PsiFile psiFile=psiManager.findFile(file);
        if (psiFile != null) {
          files.put(psiFile,value);
        }
        return true;
      }
    }
,projectScope);
  }
  for (  Map.Entry<PsiFile,AngularNamedItemDefinition> entry : files.entrySet()) {
    final PsiFile file=entry.getKey();
    final String relativeUrl=findPossibleRelativeUrl(roots,file.getVirtualFile());
    if (relativeUrl == null)     continue;
    final Template template=readTemplateFromFile(myProject,relativeUrl,file);
    final Set<VirtualFile> moduleFiles=new HashSet<>();
    final String mainModule=entry.getValue().getName();
    if (!StringUtil.isEmptyOrSpaces(mainModule)) {
      final List<List<String>> values=instance.getValues(AngularModuleDependencyIndex.ANGULAR_MODULE_DEPENDENCY_INDEX,mainModule,GlobalSearchScope.projectScope(myProject));
      for (      List<String> value : values) {
        for (        String module : value) {
          final JSImplicitElement element=AngularIndexUtil.resolve(myProject,AngularModuleIndex.KEY,module);
          if (element != null && element.getNavigationElement() != null && element.getNavigationElement().getContainingFile() != null) {
            moduleFiles.add(element.getNavigationElement().getContainingFile().getVirtualFile());
          }
        }
      }
    }
 else {
      final VirtualFile[] includedFiles=FileIncludeManager.getManager(myProject).getIncludedFiles(file.getVirtualFile(),false,true);
      moduleFiles.addAll(ContainerUtil.filter(includedFiles,new Condition<VirtualFile>(){
        @Override public boolean value(        VirtualFile file){
          return file.getFileType() instanceof LanguageFileType && ((LanguageFileType)file.getFileType()).getLanguage().isKindOf(JavascriptLanguage.INSTANCE);
        }
      }
));
    }
    final RootTemplate rootTemplate=new RootTemplate(mySmartPointerManager.createSmartPsiElementPointer(file),relativeUrl,template,moduleFiles);
    myRootTemplates.put(file.getVirtualFile(),rootTemplate);
  }
}
