{
  final String url=getPropertyValueIfExists(object,"url");
  if (url != null) {
    state.setUrl(StringUtil.unquoteString(url));
  }
  final String parentKey=getPropertyValueIfExists(object,"parent");
  if (parentKey != null) {
    state.setParentName(parentKey);
  }
  final String templateUrl=getPropertyValueIfExists(object,"templateUrl");
  VirtualFile templateFile=null;
  if (templateUrl != null) {
    state.setTemplateUrl(templateUrl);
    final JSProperty urlProperty=object.findProperty("templateUrl");
    state.setTemplateFile(parseTemplate(templateUrl,urlProperty));
  }
  if (templateUrl == null && object.findProperty("templateUrl") != null || object.findProperty("template") != null || object.findProperty("templateProvider") != null) {
    state.setHasTemplateDefined(true);
  }
  final JSProperty views=object.findProperty("views");
  if (views != null) {
    final JSExpression value=views.getValue();
    if (value != null && value instanceof JSObjectLiteralExpression) {
      final JSProperty[] viewsProperties=((JSObjectLiteralExpression)value).getProperties();
      if (viewsProperties != null && viewsProperties.length > 0) {
        final List<UiView> viewsList=new ArrayList<>();
        for (        JSProperty property : viewsProperties) {
          if (property.getName() != null && property.getValue() != null) {
            viewsList.add(processView(property));
          }
        }
        state.setViews(viewsList);
      }
    }
  }
  final JSProperty abstractProperty=object.findProperty("abstract");
  if (abstractProperty != null && abstractProperty.getValue() instanceof JSLiteralExpression && ((JSLiteralExpression)abstractProperty.getValue()).isBooleanLiteral() && Boolean.TRUE.equals(((JSLiteralExpression)abstractProperty.getValue()).getValue())) {
    state.setAbstract(true);
  }
}
