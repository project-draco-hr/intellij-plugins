{
  Set<VirtualFile> moduleFiles=myModuleRecursiveDependencies.get(file);
  if (moduleFiles != null)   return moduleFiles;
  final NonCyclicQueue<String> modulesQueue=new NonCyclicQueue<>();
  final NonCyclicQueue<VirtualFile> filesQueue=new NonCyclicQueue<VirtualFile>(){
    @Override protected boolean check(    VirtualFile file){
      return !NodeModuleUtil.isFromNodeModules(myProject,file);
    }
  }
;
  if (!StringUtil.isEmptyOrSpaces(mainModule)) {
    modulesQueue.add(mainModule);
  }
  filesQueue.add(file.getVirtualFile());
  while (!modulesQueue.isEmpty()) {
    final String moduleName=modulesQueue.removeNext();
    moduleDependenciesStep(moduleName,filesQueue,modulesQueue);
  }
  while (!filesQueue.isEmpty()) {
    final VirtualFile moduleFile=filesQueue.removeNext();
    filesDependenciesStep(moduleFile,filesQueue);
  }
  Set<VirtualFile> processed=filesQueue.getProcessed();
  final GlobalSearchScope projectScope=GlobalSearchScope.projectScope(myProject);
  processed=new HashSet<VirtualFile>(ContainerUtil.filter(processed,new Condition<VirtualFile>(){
    @Override public boolean value(    VirtualFile file){
      return file.getFileType() instanceof LanguageFileType && ((LanguageFileType)file.getFileType()).getLanguage().isKindOf(JavascriptLanguage.INSTANCE) && projectScope.contains(file);
    }
  }
));
  myModuleRecursiveDependencies.put(file,processed);
  return processed;
}
