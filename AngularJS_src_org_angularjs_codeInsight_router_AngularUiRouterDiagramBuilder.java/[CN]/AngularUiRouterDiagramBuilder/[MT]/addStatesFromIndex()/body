{
  final Collection<String> stateIds=AngularIndexUtil.getAllKeys(AngularUiRouterStatesIndex.KEY,myProject);
  for (  String id : stateIds) {
    if (id.startsWith("."))     continue;
    final CommonProcessors.CollectProcessor<JSImplicitElement> processor=new CommonProcessors.CollectProcessor<>();
    AngularIndexUtil.multiResolve(myProject,AngularUiRouterStatesIndex.KEY,id,processor);
    for (    JSImplicitElement element : processor.getResults()) {
      final UiRouterState state=new UiRouterState(id,element.getContainingFile().getVirtualFile());
      if (!element.getContainingFile().getLanguage().isKindOf(JavascriptLanguage.INSTANCE) && PsiTreeUtil.getParentOfType(element,JSEmbeddedContent.class) != null) {
        createRootTemplatesForEmbedded(element.getContainingFile());
      }
      final JSCallExpression call=findWrappingCallExpression(element);
      if (call != null) {
        final JSReferenceExpression methodExpression=ObjectUtils.tryCast(call.getMethodExpression(),JSReferenceExpression.class);
        if (methodExpression != null && methodExpression.getQualifier() != null && "state".equals(methodExpression.getReferenceName())) {
          final JSExpression[] arguments=call.getArguments();
          if (arguments.length > 0 && PsiTreeUtil.isAncestor(arguments[0],element.getNavigationElement(),false)) {
            state.setPointer(mySmartPointerManager.createSmartPsiElementPointer(arguments[0]));
            if (arguments.length > 1 && arguments[1] instanceof JSObjectLiteralExpression) {
              final JSObjectLiteralExpression object=(JSObjectLiteralExpression)arguments[1];
              fillStateParameters(state,object);
            }
 else             if (arguments[0] instanceof JSObjectLiteralExpression) {
              final JSObjectLiteralExpression object=(JSObjectLiteralExpression)arguments[0];
              final JSProperty name=object.findProperty("name");
              if (name != null && PsiTreeUtil.isAncestor(name,element.getNavigationElement(),false)) {
                fillStateParameters(state,object);
              }
            }
          }
        }
      }
      myStates.add(state);
    }
  }
}
