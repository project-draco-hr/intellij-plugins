{
  if (!recursion_guard_(builder_,level_,"super_call_or_field_initializer_recover_0"))   return false;
  boolean result_;
  Marker marker_=enter_section_(builder_);
  result_=nonStrictID(builder_,level_ + 1);
  if (!result_)   result_=consumeToken(builder_,COMMA);
  if (!result_)   result_=consumeToken(builder_,COLON);
  if (!result_)   result_=consumeToken(builder_,SEMICOLON);
  if (!result_)   result_=consumeToken(builder_,EXPRESSION_BODY_DEF);
  if (!result_)   result_=consumeToken(builder_,AT);
  if (!result_)   result_=consumeToken(builder_,ABSTRACT);
  if (!result_)   result_=consumeToken(builder_,CLASS);
  if (!result_)   result_=consumeToken(builder_,CONST);
  if (!result_)   result_=consumeToken(builder_,EXPORT);
  if (!result_)   result_=consumeToken(builder_,EXTERNAL);
  if (!result_)   result_=consumeToken(builder_,FACTORY);
  if (!result_)   result_=consumeToken(builder_,FINAL);
  if (!result_)   result_=consumeToken(builder_,GET);
  if (!result_)   result_=consumeToken(builder_,IMPORT);
  if (!result_)   result_=consumeToken(builder_,LIBRARY);
  if (!result_)   result_=consumeToken(builder_,NATIVE);
  if (!result_)   result_=consumeToken(builder_,OPERATOR);
  if (!result_)   result_=consumeToken(builder_,PART);
  if (!result_)   result_=consumeToken(builder_,SET);
  if (!result_)   result_=consumeToken(builder_,STATIC);
  if (!result_)   result_=consumeToken(builder_,TYPEDEF);
  if (!result_)   result_=consumeToken(builder_,VAR);
  if (!result_)   result_=consumeToken(builder_,VOID);
  if (!result_)   result_=consumeToken(builder_,LBRACE);
  if (!result_)   result_=consumeToken(builder_,RBRACE);
  exit_section_(builder_,marker_,null,result_);
  return result_;
}
