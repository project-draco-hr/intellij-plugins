{
  if (!recursion_guard_(b,l,"super_call_or_field_initializer_recover_0"))   return false;
  boolean r;
  Marker m=enter_section_(b);
  r=nonStrictID(b,l + 1);
  if (!r)   r=consumeToken(b,COMMA);
  if (!r)   r=consumeToken(b,COLON);
  if (!r)   r=consumeToken(b,SEMICOLON);
  if (!r)   r=consumeToken(b,EXPRESSION_BODY_DEF);
  if (!r)   r=consumeToken(b,AT);
  if (!r)   r=consumeToken(b,ABSTRACT);
  if (!r)   r=consumeToken(b,ASYNC);
  if (!r)   r=consumeToken(b,CLASS);
  if (!r)   r=consumeToken(b,CONST);
  if (!r)   r=consumeToken(b,EXPORT);
  if (!r)   r=consumeToken(b,EXTERNAL);
  if (!r)   r=consumeToken(b,FACTORY);
  if (!r)   r=consumeToken(b,FINAL);
  if (!r)   r=consumeToken(b,GET);
  if (!r)   r=consumeToken(b,IMPORT);
  if (!r)   r=consumeToken(b,LIBRARY);
  if (!r)   r=consumeToken(b,NATIVE);
  if (!r)   r=consumeToken(b,OPERATOR);
  if (!r)   r=consumeToken(b,PART);
  if (!r)   r=consumeToken(b,SET);
  if (!r)   r=consumeToken(b,STATIC);
  if (!r)   r=consumeToken(b,SYNC);
  if (!r)   r=consumeToken(b,TYPEDEF);
  if (!r)   r=consumeToken(b,VAR);
  if (!r)   r=consumeToken(b,VOID);
  if (!r)   r=consumeToken(b,LBRACE);
  if (!r)   r=consumeToken(b,RBRACE);
  exit_section_(b,m,null,r);
  return r;
}
