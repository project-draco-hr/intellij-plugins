{
  if (!recursion_guard_(builder_,level_,"stringLiteralExpression"))   return false;
  if (!nextTokenIs(builder_,OPEN_QUOTE) && !nextTokenIs(builder_,RAW_SINGLE_QUOTED_STRING) && !nextTokenIs(builder_,RAW_TRIPLE_QUOTED_STRING)&& replaceVariants(builder_,3,"<string literal expression>"))   return false;
  boolean result_=false;
  int start_=builder_.getCurrentOffset();
  Marker marker_=builder_.mark();
  enterErrorRecordingSection(builder_,level_,_SECTION_GENERAL_,"<string literal expression>");
  result_=stringLiteralExpression_0(builder_,level_ + 1);
  int offset_=builder_.getCurrentOffset();
  while (result_) {
    if (!stringLiteralExpression_0(builder_,level_ + 1))     break;
    int next_offset_=builder_.getCurrentOffset();
    if (offset_ == next_offset_) {
      empty_element_parsed_guard_(builder_,offset_,"stringLiteralExpression");
      break;
    }
    offset_=next_offset_;
  }
  LighterASTNode last_=result_ ? builder_.getLatestDoneMarker() : null;
  if (last_ != null && last_.getStartOffset() == start_ && type_extends_(last_.getTokenType(),STRING_LITERAL_EXPRESSION)) {
    marker_.drop();
  }
 else   if (result_) {
    marker_.done(STRING_LITERAL_EXPRESSION);
  }
 else {
    marker_.rollbackTo();
  }
  result_=exitErrorRecordingSection(builder_,level_,result_,false,_SECTION_GENERAL_,null);
  return result_;
}
