{
  if (!recursion_guard_(builder_,level_,"stringLiteralExpression"))   return false;
  if (!nextTokenIs(builder_,OPEN_QUOTE) && !nextTokenIs(builder_,RAW_SINGLE_QUOTED_STRING) && !nextTokenIs(builder_,RAW_TRIPLE_QUOTED_STRING)&& replaceVariants(builder_,3,"<string literal expression>"))   return false;
  boolean result_=false;
  Marker marker_=enter_section_(builder_,level_,_COLLAPSE_,"<string literal expression>");
  result_=stringLiteralExpression_0(builder_,level_ + 1);
  int offset_=builder_.getCurrentOffset();
  while (result_) {
    if (!stringLiteralExpression_0(builder_,level_ + 1))     break;
    int next_offset_=builder_.getCurrentOffset();
    if (offset_ == next_offset_) {
      empty_element_parsed_guard_(builder_,offset_,"stringLiteralExpression");
      break;
    }
    offset_=next_offset_;
  }
  exit_section_(builder_,level_,marker_,STRING_LITERAL_EXPRESSION,result_,false,null);
  return result_;
}
