{
  if (!recursion_guard_(b,l,"expression_recover_0"))   return false;
  boolean r;
  Marker m=enter_section_(b);
  r=nonStrictID(b,l + 1);
  if (!r)   r=parenthesizedExpressionWrapper(b,l + 1);
  if (!r)   r=consumeToken(b,NOT);
  if (!r)   r=consumeToken(b,NEQ);
  if (!r)   r=consumeToken(b,REM);
  if (!r)   r=consumeToken(b,REM_EQ);
  if (!r)   r=consumeToken(b,AND_AND);
  if (!r)   r=consumeToken(b,AND);
  if (!r)   r=consumeToken(b,AND_EQ);
  if (!r)   r=consumeToken(b,LPAREN);
  if (!r)   r=consumeToken(b,RPAREN);
  if (!r)   r=consumeToken(b,MUL);
  if (!r)   r=consumeToken(b,MUL_EQ);
  if (!r)   r=consumeToken(b,PLUS);
  if (!r)   r=consumeToken(b,PLUS_PLUS);
  if (!r)   r=consumeToken(b,PLUS_EQ);
  if (!r)   r=consumeToken(b,COMMA);
  if (!r)   r=consumeToken(b,MINUS);
  if (!r)   r=consumeToken(b,MINUS_MINUS);
  if (!r)   r=consumeToken(b,MINUS_EQ);
  if (!r)   r=consumeToken(b,DOT);
  if (!r)   r=consumeToken(b,DOT_DOT);
  if (!r)   r=consumeToken(b,DIV);
  if (!r)   r=consumeToken(b,DIV_EQ);
  if (!r)   r=consumeToken(b,COLON);
  if (!r)   r=consumeToken(b,SEMICOLON);
  if (!r)   r=consumeToken(b,LT);
  if (!r)   r=consumeToken(b,LT_LT);
  if (!r)   r=consumeToken(b,LT_LT_EQ);
  if (!r)   r=consumeToken(b,LT_EQ);
  if (!r)   r=consumeToken(b,EQ);
  if (!r)   r=consumeToken(b,EQ_EQ);
  if (!r)   r=consumeToken(b,EXPRESSION_BODY_DEF);
  if (!r)   r=consumeToken(b,GT);
  if (!r)   r=gtGt(b,l + 1);
  if (!r)   r=gtEq(b,l + 1);
  if (!r)   r=gtGtEq(b,l + 1);
  if (!r)   r=consumeToken(b,QUEST);
  if (!r)   r=consumeToken(b,AT);
  if (!r)   r=consumeToken(b,LBRACKET);
  if (!r)   r=consumeToken(b,RBRACKET);
  if (!r)   r=consumeToken(b,XOR);
  if (!r)   r=consumeToken(b,XOR_EQ);
  if (!r)   r=consumeToken(b,ABSTRACT);
  if (!r)   r=consumeToken(b,AS);
  if (!r)   r=consumeToken(b,ASSERT);
  if (!r)   r=consumeToken(b,ASYNC);
  if (!r)   r=consumeToken(b,BREAK);
  if (!r)   r=consumeToken(b,CASE);
  if (!r)   r=consumeToken(b,CATCH);
  if (!r)   r=consumeToken(b,CLASS);
  if (!r)   r=consumeToken(b,CONST);
  if (!r)   r=consumeToken(b,CONTINUE);
  if (!r)   r=consumeToken(b,DEFAULT);
  if (!r)   r=consumeToken(b,DEFERRED);
  if (!r)   r=consumeToken(b,DO);
  if (!r)   r=consumeToken(b,ELSE);
  if (!r)   r=consumeToken(b,EXPORT);
  if (!r)   r=consumeToken(b,EXTERNAL);
  if (!r)   r=consumeToken(b,FACTORY);
  if (!r)   r=consumeToken(b,FINAL);
  if (!r)   r=consumeToken(b,FINALLY);
  if (!r)   r=consumeToken(b,FOR);
  if (!r)   r=consumeToken(b,GET);
  if (!r)   r=consumeToken(b,HIDE);
  if (!r)   r=consumeToken(b,IF);
  if (!r)   r=consumeToken(b,IMPORT);
  if (!r)   r=consumeToken(b,IS);
  if (!r)   r=consumeToken(b,LIBRARY);
  if (!r)   r=consumeToken(b,NATIVE);
  if (!r)   r=consumeToken(b,NEW);
  if (!r)   r=consumeToken(b,ON);
  if (!r)   r=consumeToken(b,OPERATOR);
  if (!r)   r=consumeToken(b,PART);
  if (!r)   r=consumeToken(b,RETHROW);
  if (!r)   r=consumeToken(b,RETURN);
  if (!r)   r=consumeToken(b,SET);
  if (!r)   r=consumeToken(b,SHOW);
  if (!r)   r=consumeToken(b,STATIC);
  if (!r)   r=consumeToken(b,SUPER);
  if (!r)   r=consumeToken(b,SWITCH);
  if (!r)   r=consumeToken(b,SYNC);
  if (!r)   r=consumeToken(b,THIS);
  if (!r)   r=consumeToken(b,THROW);
  if (!r)   r=consumeToken(b,TRY);
  if (!r)   r=consumeToken(b,TYPEDEF);
  if (!r)   r=consumeToken(b,VAR);
  if (!r)   r=consumeToken(b,VOID);
  if (!r)   r=consumeToken(b,WHILE);
  if (!r)   r=consumeToken(b,LBRACE);
  if (!r)   r=consumeToken(b,OR);
  if (!r)   r=consumeToken(b,OR_EQ);
  if (!r)   r=consumeToken(b,OR_OR);
  if (!r)   r=consumeToken(b,RBRACE);
  if (!r)   r=consumeToken(b,BIN_NOT);
  if (!r)   r=consumeToken(b,INT_DIV);
  if (!r)   r=consumeToken(b,INT_DIV_EQ);
  if (!r)   r=consumeToken(b,CLOSING_QUOTE);
  if (!r)   r=consumeToken(b,FALSE);
  if (!r)   r=consumeToken(b,HEX_NUMBER);
  if (!r)   r=consumeToken(b,LONG_TEMPLATE_ENTRY_END);
  if (!r)   r=consumeToken(b,LONG_TEMPLATE_ENTRY_START);
  if (!r)   r=consumeToken(b,NULL);
  if (!r)   r=consumeToken(b,NUMBER);
  if (!r)   r=consumeToken(b,OPEN_QUOTE);
  if (!r)   r=consumeToken(b,RAW_SINGLE_QUOTED_STRING);
  if (!r)   r=consumeToken(b,RAW_TRIPLE_QUOTED_STRING);
  if (!r)   r=consumeToken(b,REGULAR_STRING_PART);
  if (!r)   r=consumeToken(b,SHORT_TEMPLATE_ENTRY_START);
  if (!r)   r=consumeToken(b,TRUE);
  exit_section_(b,m,null,r);
  return r;
}
