{
  if (!recursion_guard_(builder_,level_,"expression_recover_0"))   return false;
  boolean result_=false;
  Marker marker_=enter_section_(builder_);
  result_=consumeToken(builder_,NOT);
  if (!result_)   result_=consumeToken(builder_,NEQ);
  if (!result_)   result_=consumeToken(builder_,NEQ_EQ);
  if (!result_)   result_=consumeToken(builder_,IS);
  if (!result_)   result_=consumeToken(builder_,REM);
  if (!result_)   result_=consumeToken(builder_,REM_EQ);
  if (!result_)   result_=consumeToken(builder_,AND_AND);
  if (!result_)   result_=consumeToken(builder_,AND);
  if (!result_)   result_=consumeToken(builder_,AND_EQ);
  if (!result_)   result_=consumeToken(builder_,LPAREN);
  if (!result_)   result_=consumeToken(builder_,RPAREN);
  if (!result_)   result_=consumeToken(builder_,MUL);
  if (!result_)   result_=consumeToken(builder_,MUL_EQ);
  if (!result_)   result_=consumeToken(builder_,PLUS);
  if (!result_)   result_=consumeToken(builder_,PLUS_PLUS);
  if (!result_)   result_=consumeToken(builder_,PLUS_EQ);
  if (!result_)   result_=consumeToken(builder_,COMMA);
  if (!result_)   result_=consumeToken(builder_,MINUS);
  if (!result_)   result_=consumeToken(builder_,MINUS_MINUS);
  if (!result_)   result_=consumeToken(builder_,MINUS_EQ);
  if (!result_)   result_=consumeToken(builder_,"...");
  if (!result_)   result_=consumeToken(builder_,DIV);
  if (!result_)   result_=consumeToken(builder_,DIV_EQ);
  if (!result_)   result_=consumeToken(builder_,COLON);
  if (!result_)   result_=consumeToken(builder_,SEMICOLON);
  if (!result_)   result_=consumeToken(builder_,LT);
  if (!result_)   result_=consumeToken(builder_,LT_LT);
  if (!result_)   result_=consumeToken(builder_,LT_LT_EQ);
  if (!result_)   result_=consumeToken(builder_,LT_EQ);
  if (!result_)   result_=consumeToken(builder_,EQ);
  if (!result_)   result_=consumeToken(builder_,EQ_EQ);
  if (!result_)   result_=consumeToken(builder_,EQ_EQ_EQ);
  if (!result_)   result_=consumeToken(builder_,EXPRESSION_BODY_DEF);
  if (!result_)   result_=consumeToken(builder_,GT);
  if (!result_)   result_=consumeToken(builder_,GT_EQ);
  if (!result_)   result_=consumeToken(builder_,GT_GT_EQ);
  if (!result_)   result_=consumeToken(builder_,QUEST);
  if (!result_)   result_=consumeToken(builder_,LBRACKET);
  if (!result_)   result_=consumeToken(builder_,RBRACKET);
  if (!result_)   result_=consumeToken(builder_,XOR);
  if (!result_)   result_=consumeToken(builder_,XOR_EQ);
  if (!result_)   result_=consumeToken(builder_,ABSTRACT);
  if (!result_)   result_=consumeToken(builder_,ASSERT);
  if (!result_)   result_=consumeToken(builder_,BREAK);
  if (!result_)   result_=consumeToken(builder_,CASE);
  if (!result_)   result_=consumeToken(builder_,CATCH);
  if (!result_)   result_=consumeToken(builder_,CLASS);
  if (!result_)   result_=consumeToken(builder_,CONST);
  if (!result_)   result_=consumeToken(builder_,CONTINUE);
  if (!result_)   result_=consumeToken(builder_,DEFAULT);
  if (!result_)   result_=consumeToken(builder_,DO);
  if (!result_)   result_=consumeToken(builder_,ELSE);
  if (!result_)   result_=consumeToken(builder_,FACTORY);
  if (!result_)   result_=consumeToken(builder_,FALSE);
  if (!result_)   result_=consumeToken(builder_,FINAL);
  if (!result_)   result_=consumeToken(builder_,FINALLY);
  if (!result_)   result_=consumeToken(builder_,FOR);
  if (!result_)   result_=consumeToken(builder_,GET);
  if (!result_)   result_=consumeToken(builder_,IF);
  if (!result_)   result_=consumeToken(builder_,IN);
  if (!result_)   result_=consumeToken(builder_,NATIVE);
  if (!result_)   result_=consumeToken(builder_,NEW);
  if (!result_)   result_=consumeToken(builder_,NULL);
  if (!result_)   result_=consumeToken(builder_,OPERATOR);
  if (!result_)   result_=consumeToken(builder_,RETHROW);
  if (!result_)   result_=consumeToken(builder_,RETURN);
  if (!result_)   result_=consumeToken(builder_,SET);
  if (!result_)   result_=consumeToken(builder_,STATIC);
  if (!result_)   result_=consumeToken(builder_,SUPER);
  if (!result_)   result_=consumeToken(builder_,SWITCH);
  if (!result_)   result_=consumeToken(builder_,THIS);
  if (!result_)   result_=consumeToken(builder_,THROW);
  if (!result_)   result_=consumeToken(builder_,TRUE);
  if (!result_)   result_=consumeToken(builder_,TRY);
  if (!result_)   result_=consumeToken(builder_,TYPEDEF);
  if (!result_)   result_=consumeToken(builder_,VAR);
  if (!result_)   result_=consumeToken(builder_,WHILE);
  if (!result_)   result_=consumeToken(builder_,LBRACE);
  if (!result_)   result_=consumeToken(builder_,OR);
  if (!result_)   result_=consumeToken(builder_,OR_EQ);
  if (!result_)   result_=consumeToken(builder_,OR_OR);
  if (!result_)   result_=consumeToken(builder_,RBRACE);
  if (!result_)   result_=consumeToken(builder_,BIN_NOT);
  if (!result_)   result_=consumeToken(builder_,INT_DIV_EQ);
  if (!result_)   result_=consumeToken(builder_,DOT);
  if (!result_)   result_=consumeToken(builder_,HEX_NUMBER);
  if (!result_)   result_=nonStrictID(builder_,level_ + 1);
  if (!result_)   result_=consumeToken(builder_,NUMBER);
  if (!result_)   result_=consumeToken(builder_,OPEN_QUOTE);
  if (!result_)   result_=consumeToken(builder_,RAW_SINGLE_QUOTED_STRING);
  if (!result_)   result_=consumeToken(builder_,RAW_TRIPLE_QUOTED_STRING);
  if (!result_)   result_=consumeToken(builder_,LONG_TEMPLATE_ENTRY_END);
  if (!result_)   result_=shiftRightOperator(builder_,level_ + 1);
  if (!result_)   result_=expression_recover_0_93(builder_,level_ + 1);
  exit_section_(builder_,marker_,null,result_);
  return result_;
}
