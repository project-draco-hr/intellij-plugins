{
  if (!recursion_guard_(builder_,level_,"nonLabelledStatement"))   return false;
  boolean result_;
  Marker marker_=enter_section_(builder_);
  result_=block(builder_,level_ + 1);
  if (!result_)   result_=nonLabelledStatement_1(builder_,level_ + 1);
  if (!result_)   result_=nonLabelledStatement_2(builder_,level_ + 1);
  if (!result_)   result_=nonLabelledStatement_3(builder_,level_ + 1);
  if (!result_)   result_=nonLabelledStatement_4(builder_,level_ + 1);
  if (!result_)   result_=nonLabelledStatement_5(builder_,level_ + 1);
  if (!result_)   result_=nonLabelledStatement_6(builder_,level_ + 1);
  if (!result_)   result_=rethrowStatement(builder_,level_ + 1);
  if (!result_)   result_=tryStatement(builder_,level_ + 1);
  if (!result_)   result_=breakStatement(builder_,level_ + 1);
  if (!result_)   result_=continueStatement(builder_,level_ + 1);
  if (!result_)   result_=returnStatement(builder_,level_ + 1);
  if (!result_)   result_=throwStatementWithSemicolon(builder_,level_ + 1);
  if (!result_)   result_=assertStatement(builder_,level_ + 1);
  if (!result_)   result_=statementFollowedBySemiColon(builder_,level_ + 1);
  if (!result_)   result_=yieldEachStatement(builder_,level_ + 1);
  if (!result_)   result_=yieldStatement(builder_,level_ + 1);
  if (!result_)   result_=consumeToken(builder_,SEMICOLON);
  exit_section_(builder_,marker_,null,result_);
  return result_;
}
