{
  boolean result_;
  builder_=adapt_builder_(root_,builder_,this,EXTENDS_SETS_);
  Marker marker_=enter_section_(builder_,0,_COLLAPSE_,null);
  if (root_ == ABSTRACT_OPERATOR_DECLARATION) {
    result_=abstractOperatorDeclaration(builder_,0);
  }
 else   if (root_ == ADDITIVE_EXPRESSION) {
    result_=additiveExpression(builder_,0);
  }
 else   if (root_ == ADDITIVE_OPERATOR) {
    result_=additiveOperator(builder_,0);
  }
 else   if (root_ == ARGUMENT_LIST) {
    result_=argumentList(builder_,0);
  }
 else   if (root_ == ARGUMENTS) {
    result_=arguments(builder_,0);
  }
 else   if (root_ == ARRAY_ACCESS_EXPRESSION) {
    result_=arrayAccessExpression(builder_,0);
  }
 else   if (root_ == AS_EXPRESSION) {
    result_=asExpression(builder_,0);
  }
 else   if (root_ == ASSERT_STATEMENT) {
    result_=assertStatement(builder_,0);
  }
 else   if (root_ == ASSIGN_EXPRESSION) {
    result_=assignExpression(builder_,0);
  }
 else   if (root_ == ASSIGNMENT_OPERATOR) {
    result_=assignmentOperator(builder_,0);
  }
 else   if (root_ == BITWISE_EXPRESSION) {
    result_=bitwiseExpression(builder_,0);
  }
 else   if (root_ == BITWISE_OPERATOR) {
    result_=bitwiseOperator(builder_,0);
  }
 else   if (root_ == BLOCK) {
    result_=block(builder_,0);
  }
 else   if (root_ == BREAK_STATEMENT) {
    result_=breakStatement(builder_,0);
  }
 else   if (root_ == CALL_EXPRESSION) {
    result_=callExpression(builder_,0);
  }
 else   if (root_ == CASCADE_REFERENCE_EXPRESSION) {
    result_=cascadeReferenceExpression(builder_,0);
  }
 else   if (root_ == CATCH_PART) {
    result_=catchPart(builder_,0);
  }
 else   if (root_ == CLASS_BODY) {
    result_=classBody(builder_,0);
  }
 else   if (root_ == CLASS_DEFINITION) {
    result_=classDefinition(builder_,0);
  }
 else   if (root_ == CLASS_MEMBERS) {
    result_=classMembers(builder_,0);
  }
 else   if (root_ == CLASS_TYPE_ALIAS) {
    result_=classTypeAlias(builder_,0);
  }
 else   if (root_ == COMPARE_EXPRESSION) {
    result_=compareExpression(builder_,0);
  }
 else   if (root_ == COMPONENT_NAME) {
    result_=componentName(builder_,0);
  }
 else   if (root_ == CONST_CONSTRUCTOR_EXPRESSION) {
    result_=constConstructorExpression(builder_,0);
  }
 else   if (root_ == CONTINUE_STATEMENT) {
    result_=continueStatement(builder_,0);
  }
 else   if (root_ == DEFAULT_CASE) {
    result_=defaultCase(builder_,0);
  }
 else   if (root_ == DEFAULT_FORMAL_NAMED_PARAMETER) {
    result_=defaultFormalNamedParameter(builder_,0);
  }
 else   if (root_ == DO_WHILE_STATEMENT) {
    result_=doWhileStatement(builder_,0);
  }
 else   if (root_ == EQUALITY_OPERATOR) {
    result_=equalityOperator(builder_,0);
  }
 else   if (root_ == EXPORT_STATEMENT) {
    result_=exportStatement(builder_,0);
  }
 else   if (root_ == EXPRESSION) {
    result_=expression(builder_,0);
  }
 else   if (root_ == EXPRESSION_LIST) {
    result_=expressionList(builder_,0);
  }
 else   if (root_ == FACTORY_CONSTRUCTOR_DECLARATION) {
    result_=factoryConstructorDeclaration(builder_,0);
  }
 else   if (root_ == FIELD_FORMAL_PARAMETER) {
    result_=fieldFormalParameter(builder_,0);
  }
 else   if (root_ == FIELD_INITIALIZER) {
    result_=fieldInitializer(builder_,0);
  }
 else   if (root_ == FINAL_VAR_OR_TYPE) {
    result_=finalVarOrType(builder_,0);
  }
 else   if (root_ == FINALLY_PART) {
    result_=finallyPart(builder_,0);
  }
 else   if (root_ == FOR_IN_PART) {
    result_=forInPart(builder_,0);
  }
 else   if (root_ == FOR_LOOP_PARTS) {
    result_=forLoopParts(builder_,0);
  }
 else   if (root_ == FOR_LOOP_PARTS_IN_BRACES) {
    result_=forLoopPartsInBraces(builder_,0);
  }
 else   if (root_ == FOR_STATEMENT) {
    result_=forStatement(builder_,0);
  }
 else   if (root_ == FORMAL_PARAMETER_LIST) {
    result_=formalParameterList(builder_,0);
  }
 else   if (root_ == FUNCTION_BODY) {
    result_=functionBody(builder_,0);
  }
 else   if (root_ == FUNCTION_DECLARATION) {
    result_=functionDeclaration(builder_,0);
  }
 else   if (root_ == FUNCTION_DECLARATION_WITH_BODY) {
    result_=functionDeclarationWithBody(builder_,0);
  }
 else   if (root_ == FUNCTION_DECLARATION_WITH_BODY_OR_NATIVE) {
    result_=functionDeclarationWithBodyOrNative(builder_,0);
  }
 else   if (root_ == FUNCTION_EXPRESSION) {
    result_=functionExpression(builder_,0);
  }
 else   if (root_ == FUNCTION_EXPRESSION_BODY) {
    result_=functionExpressionBody(builder_,0);
  }
 else   if (root_ == FUNCTION_TYPE_ALIAS) {
    result_=functionTypeAlias(builder_,0);
  }
 else   if (root_ == GETTER_DECLARATION) {
    result_=getterDeclaration(builder_,0);
  }
 else   if (root_ == HIDE_COMBINATOR) {
    result_=hideCombinator(builder_,0);
  }
 else   if (root_ == ID) {
    result_=id(builder_,0);
  }
 else   if (root_ == IF_STATEMENT) {
    result_=ifStatement(builder_,0);
  }
 else   if (root_ == IMPORT_STATEMENT) {
    result_=importStatement(builder_,0);
  }
 else   if (root_ == INITIALIZERS) {
    result_=initializers(builder_,0);
  }
 else   if (root_ == INTERFACES) {
    result_=interfaces(builder_,0);
  }
 else   if (root_ == IS_EXPRESSION) {
    result_=isExpression(builder_,0);
  }
 else   if (root_ == LABEL) {
    result_=label(builder_,0);
  }
 else   if (root_ == LIBRARY_COMPONENT_REFERENCE_EXPRESSION) {
    result_=libraryComponentReferenceExpression(builder_,0);
  }
 else   if (root_ == LIBRARY_ID) {
    result_=libraryId(builder_,0);
  }
 else   if (root_ == LIBRARY_REFERENCE_LIST) {
    result_=libraryReferenceList(builder_,0);
  }
 else   if (root_ == LIBRARY_STATEMENT) {
    result_=libraryStatement(builder_,0);
  }
 else   if (root_ == LIST_LITERAL_EXPRESSION) {
    result_=listLiteralExpression(builder_,0);
  }
 else   if (root_ == LITERAL_EXPRESSION) {
    result_=literalExpression(builder_,0);
  }
 else   if (root_ == LOGIC_AND_EXPRESSION) {
    result_=logicAndExpression(builder_,0);
  }
 else   if (root_ == LOGIC_OR_EXPRESSION) {
    result_=logicOrExpression(builder_,0);
  }
 else   if (root_ == LONG_TEMPLATE_ENTRY) {
    result_=longTemplateEntry(builder_,0);
  }
 else   if (root_ == MAP_LITERAL_ENTRY) {
    result_=mapLiteralEntry(builder_,0);
  }
 else   if (root_ == MAP_LITERAL_EXPRESSION) {
    result_=mapLiteralExpression(builder_,0);
  }
 else   if (root_ == METADATA) {
    result_=metadata(builder_,0);
  }
 else   if (root_ == METHOD_DECLARATION) {
    result_=methodDeclaration(builder_,0);
  }
 else   if (root_ == MIXIN_APPLICATION) {
    result_=mixinApplication(builder_,0);
  }
 else   if (root_ == MIXINS) {
    result_=mixins(builder_,0);
  }
 else   if (root_ == MULTIPLICATIVE_EXPRESSION) {
    result_=multiplicativeExpression(builder_,0);
  }
 else   if (root_ == MULTIPLICATIVE_OPERATOR) {
    result_=multiplicativeOperator(builder_,0);
  }
 else   if (root_ == NAMED_ARGUMENT) {
    result_=namedArgument(builder_,0);
  }
 else   if (root_ == NAMED_CONSTRUCTOR_DECLARATION) {
    result_=namedConstructorDeclaration(builder_,0);
  }
 else   if (root_ == NAMED_FORMAL_PARAMETERS) {
    result_=namedFormalParameters(builder_,0);
  }
 else   if (root_ == NEW_EXPRESSION) {
    result_=newExpression(builder_,0);
  }
 else   if (root_ == NORMAL_FORMAL_PARAMETER) {
    result_=normalFormalParameter(builder_,0);
  }
 else   if (root_ == ON_PART) {
    result_=onPart(builder_,0);
  }
 else   if (root_ == OPERATOR_DECLARATION) {
    result_=operatorDeclaration(builder_,0);
  }
 else   if (root_ == PARAMETER_NAME_REFERENCE_EXPRESSION) {
    result_=parameterNameReferenceExpression(builder_,0);
  }
 else   if (root_ == PARENTHESIZED_EXPRESSION) {
    result_=parenthesizedExpression(builder_,0);
  }
 else   if (root_ == PART_OF_STATEMENT) {
    result_=partOfStatement(builder_,0);
  }
 else   if (root_ == PART_STATEMENT) {
    result_=partStatement(builder_,0);
  }
 else   if (root_ == PATH_OR_LIBRARY_REFERENCE) {
    result_=pathOrLibraryReference(builder_,0);
  }
 else   if (root_ == PREFIX_EXPRESSION) {
    result_=prefixExpression(builder_,0);
  }
 else   if (root_ == PREFIX_OPERATOR) {
    result_=prefixOperator(builder_,0);
  }
 else   if (root_ == QUALIFIED_COMPONENT_NAME) {
    result_=qualifiedComponentName(builder_,0);
  }
 else   if (root_ == REDIRECTION) {
    result_=redirection(builder_,0);
  }
 else   if (root_ == REFERENCE_EXPRESSION) {
    result_=referenceExpression(builder_,0);
  }
 else   if (root_ == RELATIONAL_OPERATOR) {
    result_=relationalOperator(builder_,0);
  }
 else   if (root_ == RETHROW_STATEMENT) {
    result_=rethrowStatement(builder_,0);
  }
 else   if (root_ == RETURN_STATEMENT) {
    result_=returnStatement(builder_,0);
  }
 else   if (root_ == RETURN_TYPE) {
    result_=returnType(builder_,0);
  }
 else   if (root_ == SETTER_DECLARATION) {
    result_=setterDeclaration(builder_,0);
  }
 else   if (root_ == SHIFT_EXPRESSION) {
    result_=shiftExpression(builder_,0);
  }
 else   if (root_ == SHIFT_OPERATOR) {
    result_=shiftOperator(builder_,0);
  }
 else   if (root_ == SHIFT_RIGHT_OPERATOR) {
    result_=shiftRightOperator(builder_,0);
  }
 else   if (root_ == SHORT_TEMPLATE_ENTRY) {
    result_=shortTemplateEntry(builder_,0);
  }
 else   if (root_ == SHOW_COMBINATOR) {
    result_=showCombinator(builder_,0);
  }
 else   if (root_ == STATEMENTS) {
    result_=statements(builder_,0);
  }
 else   if (root_ == STRING_LITERAL_EXPRESSION) {
    result_=stringLiteralExpression(builder_,0);
  }
 else   if (root_ == SUFFIX_EXPRESSION) {
    result_=suffixExpression(builder_,0);
  }
 else   if (root_ == SUPER_CALL_OR_FIELD_INITIALIZER) {
    result_=superCallOrFieldInitializer(builder_,0);
  }
 else   if (root_ == SUPER_EXPRESSION) {
    result_=superExpression(builder_,0);
  }
 else   if (root_ == SUPERCLASS) {
    result_=superclass(builder_,0);
  }
 else   if (root_ == SWITCH_CASE) {
    result_=switchCase(builder_,0);
  }
 else   if (root_ == SWITCH_STATEMENT) {
    result_=switchStatement(builder_,0);
  }
 else   if (root_ == SYMBOL_LITERAL_EXPRESSION) {
    result_=symbolLiteralExpression(builder_,0);
  }
 else   if (root_ == TERNARY_EXPRESSION) {
    result_=ternaryExpression(builder_,0);
  }
 else   if (root_ == THIS_EXPRESSION) {
    result_=thisExpression(builder_,0);
  }
 else   if (root_ == THROW_STATEMENT) {
    result_=throwStatement(builder_,0);
  }
 else   if (root_ == TRY_STATEMENT) {
    result_=tryStatement(builder_,0);
  }
 else   if (root_ == TYPE) {
    result_=type(builder_,0);
  }
 else   if (root_ == TYPE_ARGUMENTS) {
    result_=typeArguments(builder_,0);
  }
 else   if (root_ == TYPE_LIST) {
    result_=typeList(builder_,0);
  }
 else   if (root_ == TYPE_PARAMETER) {
    result_=typeParameter(builder_,0);
  }
 else   if (root_ == TYPE_PARAMETERS) {
    result_=typeParameters(builder_,0);
  }
 else   if (root_ == USER_DEFINABLE_OPERATOR) {
    result_=userDefinableOperator(builder_,0);
  }
 else   if (root_ == VALUE_EXPRESSION) {
    result_=valueExpression(builder_,0);
  }
 else   if (root_ == VAR_ACCESS_DECLARATION) {
    result_=varAccessDeclaration(builder_,0);
  }
 else   if (root_ == VAR_DECLARATION) {
    result_=varDeclaration(builder_,0);
  }
 else   if (root_ == VAR_DECLARATION_LIST) {
    result_=varDeclarationList(builder_,0);
  }
 else   if (root_ == VAR_DECLARATION_LIST_PART) {
    result_=varDeclarationListPart(builder_,0);
  }
 else   if (root_ == VAR_INIT) {
    result_=varInit(builder_,0);
  }
 else   if (root_ == WHILE_STATEMENT) {
    result_=whileStatement(builder_,0);
  }
 else {
    result_=parse_root_(root_,builder_,0);
  }
  exit_section_(builder_,0,marker_,root_,result_,true,TRUE_CONDITION);
  return builder_.getTreeBuilt();
}
