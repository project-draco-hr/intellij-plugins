{
  if (!recursion_guard_(b,l,"ternaryExpression"))   return false;
  if (!nextTokenIs(b,QUEST))   return false;
  boolean r;
  Marker m=enter_section_(b,l,_LEFT_,null);
  r=consumeToken(b,QUEST);
  r=r && expression(b,l + 1);
  r=r && consumeToken(b,COLON);
  r=r && ternaryExpressionWrapper(b,l + 1);
  exit_section_(b,l,m,TERNARY_EXPRESSION,r,false,null);
  return r;
}
