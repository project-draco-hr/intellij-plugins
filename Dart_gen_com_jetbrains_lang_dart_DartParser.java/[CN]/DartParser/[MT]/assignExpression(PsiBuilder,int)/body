{
  if (!recursion_guard_(builder_,level_,"assignExpression"))   return false;
  if (!nextTokenIs(builder_,REM_EQ) && !nextTokenIs(builder_,AND_EQ) && !nextTokenIs(builder_,MUL_EQ)&& !nextTokenIs(builder_,PLUS_EQ)&& !nextTokenIs(builder_,MINUS_EQ)&& !nextTokenIs(builder_,DIV_EQ)&& !nextTokenIs(builder_,LT_LT_EQ)&& !nextTokenIs(builder_,EQ)&& !nextTokenIs(builder_,GT_GT_EQ)&& !nextTokenIs(builder_,GT_GT_GT_EQ)&& !nextTokenIs(builder_,XOR_EQ)&& !nextTokenIs(builder_,OR_EQ)&& !nextTokenIs(builder_,INT_DIV_EQ)&& replaceVariants(builder_,13,"<assign expression>"))   return false;
  boolean result_=false;
  boolean pinned_=false;
  Marker left_marker_=(Marker)builder_.getLatestDoneMarker();
  if (!invalid_left_marker_guard_(builder_,left_marker_,"assignExpression"))   return false;
  Marker marker_=builder_.mark();
  enterErrorRecordingSection(builder_,level_,_SECTION_GENERAL_,"<assign expression>");
  result_=assignmentOperator(builder_,level_ + 1);
  pinned_=result_;
  result_=result_ && iteratorExpressionWrapper(builder_,level_ + 1);
  if (result_ || pinned_) {
    marker_.drop();
    left_marker_.precede().done(ASSIGN_EXPRESSION);
  }
 else {
    marker_.rollbackTo();
  }
  result_=exitErrorRecordingSection(builder_,level_,result_,pinned_,_SECTION_GENERAL_,null);
  return result_ || pinned_;
}
