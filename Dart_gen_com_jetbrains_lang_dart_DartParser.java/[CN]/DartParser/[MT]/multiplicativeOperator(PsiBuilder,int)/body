{
  if (!recursion_guard_(builder_,level_,"multiplicativeOperator"))   return false;
  if (!nextTokenIs(builder_,REM) && !nextTokenIs(builder_,MUL) && !nextTokenIs(builder_,DIV)&& !nextTokenIs(builder_,INT_DIV)&& replaceVariants(builder_,4,"<multiplicative operator>"))   return false;
  boolean result_=false;
  Marker marker_=builder_.mark();
  enterErrorRecordingSection(builder_,level_,_SECTION_GENERAL_,"<multiplicative operator>");
  result_=consumeToken(builder_,MUL);
  if (!result_)   result_=consumeToken(builder_,DIV);
  if (!result_)   result_=consumeToken(builder_,REM);
  if (!result_)   result_=consumeToken(builder_,INT_DIV);
  if (result_) {
    marker_.done(MULTIPLICATIVE_OPERATOR);
  }
 else {
    marker_.rollbackTo();
  }
  result_=exitErrorRecordingSection(builder_,level_,result_,false,_SECTION_GENERAL_,null);
  return result_;
}
