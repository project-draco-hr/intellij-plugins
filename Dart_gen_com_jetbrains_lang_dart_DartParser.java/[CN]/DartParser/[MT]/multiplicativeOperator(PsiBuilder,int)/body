{
  if (!recursion_guard_(builder_,level_,"multiplicativeOperator"))   return false;
  if (!nextTokenIs(builder_,REM) && !nextTokenIs(builder_,MUL) && !nextTokenIs(builder_,DIV)&& !nextTokenIs(builder_,INT_DIV)&& replaceVariants(builder_,4,"<multiplicative operator>"))   return false;
  boolean result_=false;
  Marker marker_=enter_section_(builder_,level_,_NONE_,"<multiplicative operator>");
  result_=consumeToken(builder_,MUL);
  if (!result_)   result_=consumeToken(builder_,DIV);
  if (!result_)   result_=consumeToken(builder_,REM);
  if (!result_)   result_=consumeToken(builder_,INT_DIV);
  exit_section_(builder_,level_,marker_,MULTIPLICATIVE_OPERATOR,result_,false,null);
  return result_;
}
