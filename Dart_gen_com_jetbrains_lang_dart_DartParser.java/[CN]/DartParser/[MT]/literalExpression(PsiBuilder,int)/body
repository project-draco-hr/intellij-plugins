{
  if (!recursion_guard_(builder_,level_,"literalExpression"))   return false;
  if (!nextTokenIs(builder_,"<literal expression>",LBRACKET,LBRACE,FALSE,HASH,HEX_NUMBER,NULL,NUMBER,OPEN_QUOTE,RAW_SINGLE_QUOTED_STRING,RAW_TRIPLE_QUOTED_STRING,TRUE))   return false;
  boolean result_=false;
  Marker marker_=enter_section_(builder_,level_,_COLLAPSE_,"<literal expression>");
  result_=consumeToken(builder_,NULL);
  if (!result_)   result_=consumeToken(builder_,TRUE);
  if (!result_)   result_=consumeToken(builder_,FALSE);
  if (!result_)   result_=consumeToken(builder_,NUMBER);
  if (!result_)   result_=consumeToken(builder_,HEX_NUMBER);
  if (!result_)   result_=stringLiteralExpression(builder_,level_ + 1);
  if (!result_)   result_=symbolLiteralExpression(builder_,level_ + 1);
  if (!result_)   result_=mapLiteralExpression(builder_,level_ + 1);
  if (!result_)   result_=listLiteralExpression(builder_,level_ + 1);
  exit_section_(builder_,level_,marker_,LITERAL_EXPRESSION,result_,false,null);
  return result_;
}
