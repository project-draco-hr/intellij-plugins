{
  LibraryManager.getInstance().setAppDir(DesignerApplicationUtil.APP_DIR);
  final DesignerApplicationUtil.AdlRunConfiguration adlRunConfiguration=DesignerApplicationUtil.createTestAdlRunConfiguration();
  adlRunConfiguration.arguments=new ArrayList<String>();
  final ServerSocket serverSocket=new ServerSocket(0,1);
  adlRunConfiguration.arguments.add(String.valueOf(serverSocket.getLocalPort()));
  adlRunConfiguration.arguments.add(String.valueOf(0));
  DesignerApplicationUtil.addTestPlugin(adlRunConfiguration.arguments);
  DesignerApplicationUtil.copyAppFiles();
  adlProcessHandler=DesignerApplicationUtil.runAdl(adlRunConfiguration,DebugPathManager.getFudHome() + "/" + DesignerApplicationUtil.DESCRIPTOR_XML_DEV_PATH,DesignerApplicationUtil.APP_DIR.getPath(),new Consumer<Integer>(){
    @Override public void consume(    Integer exitCode){
      if (exitCode != 0) {
        try {
          serverSocket.close();
        }
 catch (        IOException ignored) {
        }
        throw new AssertionError(DesignerApplicationUtil.describeAdlExit(exitCode,adlRunConfiguration));
      }
    }
  }
);
  socket=serverSocket.accept();
  ShutDownTracker.getInstance().registerShutdownTask(new Runnable(){
    @Override public void run(){
      adlProcessHandler.destroyProcess();
      try {
        socket.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
  changeServiceImplementation();
  Client.getInstance().setOut(socket.getOutputStream());
  socketInputHandler=(TestSocketInputHandler)ServiceManager.getService(SocketInputHandler.class);
  socketInputHandler.init(socket.getInputStream(),DesignerApplicationUtil.APP_DIR);
}
