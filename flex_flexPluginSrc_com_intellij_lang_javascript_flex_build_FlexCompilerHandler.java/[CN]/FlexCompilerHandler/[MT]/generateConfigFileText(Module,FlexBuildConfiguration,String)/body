{
  final boolean customConfigFileUsed=config.USE_CUSTOM_CONFIG_FILE;
  @NonNls final StringBuilder configTextBuilder=new StringBuilder();
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(module.getProject()).getFileIndex();
  final Sdk sdk=FlexUtils.getFlexSdkForFlexModuleOrItsFlexFacets(module);
  configTextBuilder.append("<flex-config xmlns=\"http://www.adobe.com/2006/flex-config\">");
  if (cssFilePath != null) {
    final int lastSlashIndex=cssFilePath.lastIndexOf('/');
    final String cssDirPath=lastSlashIndex > 0 ? cssFilePath.substring(0,lastSlashIndex) : null;
    if (cssDirPath != null) {
      configTextBuilder.append("\n  <compiler>").append("\n    <source-path>").append("\n      <path-element>").append(cssDirPath).append("</path-element>").append("\n    </source-path>").append("\n  </compiler>");
    }
  }
  if (!customConfigFileUsed && !StringUtil.isEmpty(config.TARGET_PLAYER_VERSION) && sdk != null && TargetPlayerUtils.isTargetPlayerApplicable(sdk)) {
    configTextBuilder.append("\n  <target-player>").append(config.TARGET_PLAYER_VERSION).append("</target-player>");
  }
  final boolean debug=FlexBuildConfiguration.APPLICATION.equals(config.OUTPUT_TYPE) ? FlexCompilerProjectConfiguration.getInstance(module.getProject()).SWF_DEBUG_ENABLED : FlexCompilerProjectConfiguration.getInstance(module.getProject()).SWC_DEBUG_ENABLED;
  configTextBuilder.append("\n  <compiler>").append("\n    <debug>").append(String.valueOf(debug)).append("</debug>");
  if (!customConfigFileUsed && config.USE_LOCALE_SETTINGS) {
    final String[] localesArray=config.LOCALE.split(",");
    final List<String> locales=new ArrayList<String>(localesArray.length);
    for (    final String locale : localesArray) {
      locales.add(locale.trim());
    }
    addLocales(configTextBuilder,locales);
    addSourcePath(module,configTextBuilder,locales,config.getType() == FlexBuildConfiguration.Type.FlexUnit);
  }
 else {
    addSourcePath(module,configTextBuilder,config.getType() == FlexBuildConfiguration.Type.FlexUnit);
  }
  handleModuleDependencies(module,configTextBuilder,config.getType() == FlexBuildConfiguration.Type.FlexUnit,cssFilePath != null);
  if (!customConfigFileUsed) {
    handleNamespacesAndManifestFiles(configTextBuilder,config.NAMESPACE_AND_MANIFEST_FILE_INFO_LIST);
    handleConditionalCompilationDefinitions(configTextBuilder,config.CONDITIONAL_COMPILATION_DEFINITION_LIST);
  }
  if (!customConfigFileUsed && !StringUtil.isEmpty(config.PATH_TO_SERVICES_CONFIG_XML)) {
    configTextBuilder.append("\n    <services>").append(config.PATH_TO_SERVICES_CONFIG_XML).append("</services>");
    configTextBuilder.append("\n    <context-root>").append(config.CONTEXT_ROOT).append("</context-root>");
  }
  configTextBuilder.append("\n  </compiler>");
  if (!customConfigFileUsed && !config.STATIC_LINK_RUNTIME_SHARED_LIBRARIES) {
    addTag(configTextBuilder,"static-link-runtime-shared-libraries","false");
  }
  if (FlexBuildConfiguration.APPLICATION.equals(config.OUTPUT_TYPE)) {
    configTextBuilder.append("\n  <file-specs>");
    final String fileSpec=cssFilePath == null ? XmlUtil.escape(FlexUtils.getPathToMainClassFile(config)) : cssFilePath;
    addTag(configTextBuilder,"path-element",fileSpec,"\n    ");
    configTextBuilder.append("\n  </file-specs>");
  }
 else {
    if (!customConfigFileUsed) {
      handleIncludeNamespaces(configTextBuilder,config.NAMESPACE_AND_MANIFEST_FILE_INFO_LIST);
    }
    final ModuleFileIndex moduleFileIndex=ModuleRootManager.getInstance(module).getFileIndex();
    final CompilerConfiguration compilerConfig=CompilerConfiguration.getInstance(module.getProject());
    final List<String> classesToInclude=new ArrayList<String>();
    final List<Pair<String,String>> filesToInclude=new ArrayList<Pair<String,String>>();
    final boolean includeFilesInSwc=!customConfigFileUsed && FlexBuildConfiguration.LIBRARY.equals(config.OUTPUT_TYPE) && config.INCLUDE_RESOURCE_FILES_IN_SWC;
    final boolean isTest=config.getType() == FlexBuildConfiguration.Type.FlexUnit;
    ContentIterator ci=new ContentIterator(){
      public boolean processFile(      final VirtualFile fileOrDir){
        if (includeInCompilation(module.getProject(),fileOrDir)) {
          if (!isTest && projectFileIndex.isInTestSourceContent(fileOrDir)) {
            return true;
          }
          final VirtualFile rootForFile=projectFileIndex.getSourceRootForFile(fileOrDir);
          if (rootForFile != null) {
            final String packageText=VfsUtil.getRelativePath(fileOrDir.getParent(),rootForFile,'.');
            final String qName=(packageText.length() > 0 ? packageText + "." : "") + fileOrDir.getNameWithoutExtension();
            final boolean include=JavaScriptSupportLoader.isMxmlOrFxgFile(fileOrDir) || ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
              public Boolean compute(){
                final Collection<JSQualifiedNamedElement> elements=StubIndex.getInstance().get(JSQualifiedElementIndex.KEY,qName.hashCode(),module.getProject(),GlobalSearchScope.moduleScope(module));
                if (elements.isEmpty()) {
                  final PsiFile psiFile=PsiManager.getInstance(module.getProject()).findFile(fileOrDir);
                  return psiFile != null && PsiTreeUtil.getChildOfType(psiFile,JSPackageStatement.class) != null;
                }
 else {
                  return true;
                }
              }
            }
);
            if (include) {
              classesToInclude.add(qName);
            }
          }
        }
 else         if (includeFilesInSwc && isResourceFile(fileOrDir,compilerConfig)) {
          final VirtualFile rootForFile=projectFileIndex.getSourceRootForFile(fileOrDir);
          if (rootForFile != null) {
            final String packageText=VfsUtil.getRelativePath(fileOrDir.getParent(),rootForFile,'/');
            final String pathInSwc=(packageText.length() > 0 ? packageText + "/" : "") + fileOrDir.getName();
            filesToInclude.add(new Pair<String,String>(pathInSwc,fileOrDir.getPath()));
          }
        }
        return true;
      }
    }
;
    moduleFileIndex.iterateContent(ci);
    configTextBuilder.append("\n  <include-classes>");
    for (    final String className : classesToInclude) {
      addTag(configTextBuilder,"class",XmlUtil.escape(className),"\n    ");
    }
    configTextBuilder.append("\n  </include-classes>");
    for (    final Pair<String,String> fileInfo : filesToInclude) {
      configTextBuilder.append("\n  <include-file>");
      addTag(configTextBuilder,"name",XmlUtil.escape(fileInfo.first),"\n    ");
      addTag(configTextBuilder,"path",XmlUtil.escape(fileInfo.second),"\n    ");
      configTextBuilder.append("\n  </include-file>");
    }
  }
  final String outputFilePath=cssFilePath != null ? FlexCompilationUtils.getOutputSwfFilePathForCssFile(cssFilePath,config) : config.getType() == FlexBuildConfiguration.Type.FlexUnit ? config.getCompileOutputPathForTests() + "/" + config.OUTPUT_FILE_NAME : config.getOutputFileFullPath();
  addTag(configTextBuilder,"output",outputFilePath);
  configTextBuilder.append("\n</flex-config>");
  final String configText=configTextBuilder.toString();
  return needToMergeAutogeneratedAndCustomConfigFile(config,cssFilePath != null) ? FlexCompilerConfigFileUtil.mergeWithCustomConfigFile(configText,config.CUSTOM_CONFIG_FILE,cssFilePath) : configText;
}
