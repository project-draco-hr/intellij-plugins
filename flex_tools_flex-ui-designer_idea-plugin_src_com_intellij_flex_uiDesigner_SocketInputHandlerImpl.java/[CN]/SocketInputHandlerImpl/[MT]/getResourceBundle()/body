{
  initResultFile();
  final int moduleId=readEntityId();
  final String locale=reader.readUTF();
  final String bundleName=reader.readUTF();
  final ModuleInfo moduleInfo=Client.getInstance().getRegisteredModules().getNullableInfo(moduleId);
  final AccessToken token=ReadAction.start();
  try {
    final PropertiesFile resourceBundleFile;
    if (moduleInfo == null) {
      LOG.warn("Skip getResourceBundle(" + locale + ", "+ bundleName+ ") due to cannot find project with id "+ moduleId);
      resourceBundleFile=null;
    }
 else {
      resourceBundleFile=LibraryManager.getInstance().getResourceBundleFile(locale,bundleName,moduleInfo);
    }
    final FileOutputStream fileOut=new FileOutputStream(resultFile);
    try {
      if (resourceBundleFile == null) {
        fileOut.write(Amf3Types.NULL);
        return;
      }
      final AmfOutputStream out=new AmfOutputStream(new ByteArrayOutputStreamEx(4 * 1024));
      List<IProperty> properties=resourceBundleFile.getProperties();
      out.write(Amf3Types.DICTIONARY);
      out.writeUInt29((properties.size() << 1) | 1);
      out.write(0);
      for (      IProperty property : properties) {
        out.write(property.getUnescapedKey());
        out.write(property.getUnescapedValue());
      }
      out.getByteArrayOut().writeTo(fileOut);
    }
  finally {
      fileOut.close();
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
 finally {
    token.finish();
  }
}
