{
  createReader(inputStream);
  readProcess:   while (true) {
    final int command=reader.read();
switch (command) {
case -1:
      break readProcess;
case ServerMethod.goToClass:
    final Module module=readModule();
  final String className=reader.readUTF();
final DataOutputStream dataOutputStream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(resultFile)));
dataOutputStream.writeUTF("YES!!!");
dataOutputStream.close();
resReady.createNewFile();
break;
case ServerMethod.openFile:
final Project project=readProject();
final OpenFileDescriptor openFileDescriptor=new OpenFileDescriptor(project,reader.readFile(),reader.readInt());
ApplicationManager.getApplication().invokeLater(new Runnable(){
@Override public void run(){
openFileDescriptor.navigate(true);
ProjectUtil.focusProjectWindow(project,true);
}
}
);
break;
case ServerMethod.resolveExternalInlineStyleDeclarationSource:
ApplicationManager.getApplication().invokeLater(new ResolveExternalInlineStyleSourceAction(reader,readModule()));
break;
case ServerMethod.unregisterDocumentFactories:
unregisterDocumentFactories();
break;
case ServerMethod.showError:
showError();
break;
case ServerMethod.saveProjectWindowBounds:
ProjectWindowBounds.save(readProject(),reader);
break;
default :
throw new IllegalArgumentException("unknown client command: " + command);
}
}
}
