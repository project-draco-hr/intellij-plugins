{
  String libraryName=myLibraryNameTextField.getText();
  JSLibraryManager jsLibraryManager=ServiceManager.getService(myProject,JSLibraryManager.class);
  ScriptingLibraryModel libraryModel=jsLibraryManager.createLibrary(JstdLibraryUtil.LIBRARY_NAME,VfsUtilCore.toVirtualFileArray(myLibraryFiles),VirtualFile.EMPTY_ARRAY,ArrayUtil.EMPTY_STRING_ARRAY,ScriptingLibraryModel.LibraryLevel.GLOBAL,false);
  try {
    ScriptingLibraryMappings libraryMappings=ServiceManager.getService(myProject,JSLibraryMappings.class);
    if (myModuleSelector.isProjectAssociationAllowed()) {
      libraryMappings.associateWithProject(libraryModel.getName());
      LOG.info("Library '" + libraryModel.getName() + "' has been successfully associated with the project");
    }
 else {
      for (      Module module : myModuleSelector.getSelectedModules()) {
        ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
        VirtualFile[] roots=moduleRootManager.getContentRoots();
        for (        VirtualFile root : roots) {
          libraryMappings.associate(root,libraryModel.getName(),false);
          LOG.info("Library '" + libraryModel.getName() + "' has been associated with "+ root);
        }
      }
    }
    jsLibraryManager.commitChanges();
    return null;
  }
 catch (  Exception ex) {
    return new ErrorMessage("Unable to associate '" + libraryName + "' JavaScript library",ex);
  }
}
