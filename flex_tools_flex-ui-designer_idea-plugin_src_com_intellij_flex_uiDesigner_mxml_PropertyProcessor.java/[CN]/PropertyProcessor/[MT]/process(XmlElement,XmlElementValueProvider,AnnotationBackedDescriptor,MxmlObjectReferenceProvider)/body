{
  if (descriptor.isPredefined()) {
    LOG.error("unknown language element " + descriptor.getName());
    return null;
  }
  name=descriptor.getName();
  isStyle=descriptor.isStyle();
  isEffect=false;
  final @Nullable String type=descriptor.getType();
  final String typeName=descriptor.getTypeName();
  if (type == null) {
    if (typeName.equals(FlexAnnotationNames.EFFECT)) {
      isStyle=true;
      isEffect=true;
    }
 else {
      if (!typeName.equals(FlexAnnotationNames.BINDABLE)) {
        LOG.error("unsupported element: " + element.getText());
      }
      return null;
    }
  }
 else   if (type.equals(JSCommonTypeNames.FUNCTION_CLASS_NAME)) {
    if (name.equals("itemRendererFunction")) {
      PsiElement parent=descriptor.getDeclaration().getParent();
      if (parent instanceof JSClass && ((JSClass)parent).getQualifiedName().equals("spark.components.DataGroup")) {
        name="itemRenderer";
        return new ValueWriter(){
          @Override public PropertyKind write(          AnnotationBackedDescriptor descriptor,          XmlElementValueProvider valueProvider,          PrimitiveAmfOutputStream out,          BaseWriter writer,          boolean isStyle,          Context parentContext) throws InvalidPropertyException {
            writeNonProjectClassFactory("com.intellij.flex.uiDesigner.flex.UnknownItemRenderer");
            return PRIMITIVE;
          }
        }
;
      }
    }
  }
 else   if (typeName.equals(FlexAnnotationNames.EVENT)) {
    return null;
  }
  ValueWriter valueWriter=processInjected(valueProvider,descriptor,isStyle,objectReferenceProvider);
  if (valueWriter != null) {
    return valueWriter == InjectedASWriter.IGNORE ? null : valueWriter;
  }
 else   if (descriptor.isAllowsPercentage()) {
    return processPercentable(valueProvider,descriptor);
  }
 else   if (isSkinClass(descriptor)) {
    valueWriter=getSkinProjectClassValueWriter(getSkinProjectClassDocumentFactoryId(valueProvider));
    if (valueWriter != null) {
      return valueWriter;
    }
  }
  return this;
}
