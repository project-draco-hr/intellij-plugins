{
  if (valueProvider instanceof XmlTagValueProvider) {
    XmlTag tag=((XmlTagValueProvider)valueProvider).getTag();
    XmlTag[] subTags=tag.getSubTags();
    if (subTags.length > 0) {
      throw new InvalidPropertyException(tag,"error.inline.component.are.not.supported");
    }
  }
  String className=valueProvider.getTrimmed();
  if (writeReferenceIfReferenced(className)) {
    return;
  }
  JSClass jsClass=valueProvider.getJsClass();
  if (jsClass == null) {
    throw new InvalidPropertyException(valueProvider.getElement(),"error.unresolved.class",valueProvider.getTrimmed());
  }
  Trinity<Integer,String,Condition<AnnotationBackedDescriptor>> effectiveClassInfo=MxmlUtil.computeEffectiveClass(valueProvider.getElement(),jsClass,mxmlWriter.projectComponentReferenceCounter,false);
  if (effectiveClassInfo.first == -1) {
    if (effectiveClassInfo.second != null) {
      if (effectiveClassInfo.second.equals("mx.core.UIComponent")) {
        PsiMetaData psiMetaData=valueProvider.getPsiMetaData();
        if (psiMetaData != null && psiMetaData.getName().equals("itemRenderer") && MxmlUtil.isPropertyOfSparkDataGroup((AnnotationBackedDescriptor)psiMetaData)) {
          className=UNKNOWN_ITEM_RENDERER_CLASS_NAME;
        }
 else {
          className=UNKNOWN_COMPONENT_CLASS_NAME;
        }
      }
 else {
        className=effectiveClassInfo.second;
      }
    }
    writeNonProjectUnreferencedClassFactory(className);
  }
 else {
    writer.documentFactoryReference(effectiveClassInfo.first);
  }
}
