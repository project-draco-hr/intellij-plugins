{
  if (valueProvider instanceof XmlTagValueProvider) {
    XmlTag tag=((XmlTagValueProvider)valueProvider).getTag();
    XmlTag[] subTags=tag.getSubTags();
    if (subTags.length > 0) {
      processFxComponent(subTags[0],true);
      return;
    }
  }
  String className=valueProvider.getTrimmed();
  if (writeFxComponentReferenceIfProcessed(className) || writeReferenceIfReferenced(className)) {
    return;
  }
  final JSClass jsClass=valueProvider.getJsClass();
  if (jsClass == null) {
    throw new InvalidPropertyException(valueProvider.getElement(),"unresolved.class",valueProvider.getTrimmed());
  }
  final Trinity<Integer,String,Condition<AnnotationBackedDescriptor>> effectiveClassInfo;
  final PsiElement parent=jsClass.getNavigationElement().getParent();
  if (parent instanceof XmlTag && MxmlUtil.isComponentLanguageTag((XmlTag)parent)) {
    if (parent.getContainingFile().equals(valueProvider.getElement().getContainingFile())) {
      processFxComponent((XmlTag)parent,false);
      return;
    }
 else {
      effectiveClassInfo=new Trinity<Integer,String,Condition<AnnotationBackedDescriptor>>(-1,"mx.core.UIComponent",null);
    }
  }
 else {
    effectiveClassInfo=MxmlUtil.computeEffectiveClass(valueProvider.getElement(),jsClass,mxmlWriter.projectComponentReferenceCounter,false);
  }
  if (effectiveClassInfo.first == -1) {
    if (effectiveClassInfo.second != null) {
      if (effectiveClassInfo.second.equals("mx.core.UIComponent")) {
        PsiMetaData psiMetaData=valueProvider.getPsiMetaData();
        if (psiMetaData != null && psiMetaData.getName().equals("itemRenderer") && MxmlUtil.isPropertyOfSparkDataGroup((AnnotationBackedDescriptor)psiMetaData)) {
          className=MxmlUtil.UNKNOWN_ITEM_RENDERER_CLASS_NAME;
        }
 else {
          className=MxmlUtil.UNKNOWN_COMPONENT_CLASS_NAME;
        }
      }
 else {
        className=effectiveClassInfo.second;
      }
    }
    writeNonProjectUnreferencedClassFactory(className);
  }
 else {
    writer.documentFactoryReference(effectiveClassInfo.first);
  }
}
