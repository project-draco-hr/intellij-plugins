{
  final XmlTag tag=valueProvider.getTag();
  if (JavaScriptSupportLoader.MXML_URI3.equals(tag.getNamespace()) && !type.equals(JSCommonTypeNames.OBJECT_CLASS_NAME)) {
    final boolean isXml;
    if (type.equals(JSCommonTypeNames.XML_LIST_CLASS_NAME)) {
      out.write(AmfExtendedTypes.XML_LIST);
      isXml=true;
    }
 else     if (type.equals(JSCommonTypeNames.XML_CLASS_NAME)) {
      out.write(AmfExtendedTypes.XML);
      isXml=true;
    }
 else {
      out.write(AmfExtendedTypes.REFERABLE);
      isXml=false;
    }
    final StaticObjectContext context=mxmlWriter.processIdAttributeOfBuiltInTypeLanguageTag(tag,parentContext,allowIncludeInExludeFrom);
    if (isXml) {
      out.writeAmfUtf(tag.getValue().getText());
    }
 else {
      final boolean result=writeIfPrimitive(valueProvider,type,out,(AnnotationBackedDescriptor)null,false);
      LOG.assertTrue(result);
    }
    return context;
  }
  return null;
}
