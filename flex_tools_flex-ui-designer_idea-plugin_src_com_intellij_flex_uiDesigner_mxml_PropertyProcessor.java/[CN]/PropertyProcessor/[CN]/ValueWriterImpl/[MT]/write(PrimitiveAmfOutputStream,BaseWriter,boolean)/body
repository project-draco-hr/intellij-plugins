{
  final String type=descriptor.getType();
  if (isStyle) {
    int flags=0;
    if (isEffect()) {
      flags|=StyleFlags.EFFECT;
      out.write(flags);
      out.write(Amf3Types.OBJECT);
      return COMPLEX_STYLE;
    }
 else {
      out.write(flags);
    }
  }
 else   if (isEffect()) {
    out.write(Amf3Types.OBJECT);
    return COMPLEX;
  }
  if (type.equals(JSCommonTypeNames.STRING_CLASS_NAME)) {
    writeString(valueProvider,descriptor);
  }
 else   if (type.equals(JSCommonTypeNames.NUMBER_CLASS_NAME)) {
    out.writeAmfDouble(valueProvider.getTrimmed());
  }
 else   if (type.equals(JSCommonTypeNames.BOOLEAN_CLASS_NAME)) {
    out.writeAmfBoolean(valueProvider.getTrimmed());
  }
 else   if (type.equals(JSCommonTypeNames.INT_TYPE_NAME) || type.equals(JSCommonTypeNames.UINT_TYPE_NAME)) {
    String format=descriptor.getFormat();
    if (format != null && format.equals(FlexCssPropertyDescriptor.COLOR_FORMAT)) {
      writer.writeColor(valueProvider.getElement(),valueProvider.getTrimmed(),isStyle);
    }
 else {
      out.writeAmfInt(valueProvider.getTrimmed());
    }
  }
 else   if (type.equals(JSCommonTypeNames.ARRAY_CLASS_NAME)) {
    if (!descriptor.isRichTextContent() && valueProvider instanceof XmlAttributeValueProvider && isInlineArray(valueProvider.getTrimmed())) {
      writeInlineArray(valueProvider);
    }
 else {
      out.write(Amf3Types.ARRAY);
      return ARRAY;
    }
  }
 else   if (type.equals(JSCommonTypeNames.OBJECT_CLASS_NAME) || type.equals(JSCommonTypeNames.ANY_TYPE)) {
    writeUntypedPropertyValue(valueProvider,descriptor);
  }
 else   if (type.equals(FlexCommonTypeNames.IFACTORY)) {
    writeClassFactory(valueProvider);
  }
 else {
    out.write(Amf3Types.OBJECT);
    return isStyle ? COMPLEX_STYLE : COMPLEX;
  }
  return isStyle ? PRIMITIVE_STYLE : PRIMITIVE;
}
