{
  final PrimitiveAmfOutputStream out=writer.getOut();
  out.write(Amf3Types.ARRAY);
  final int lengthPosition=writer.getBlockOut().allocate(2);
  int validChildrenCount=0;
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  final String value=valueProvider.getTrimmed();
  try {
    char quoteChar='\'';
    boolean inQuotes=false;
    for (int index=1, length=value.length(); index < length; index++) {
      char c=value.charAt(index);
switch (c) {
case '[':
        if (inQuotes) {
          builder.append(c);
        }
      break;
case '"':
case '\'':
    if (inQuotes) {
      if (quoteChar == c) {
        inQuotes=false;
      }
 else {
        builder.append(c);
      }
    }
 else {
      inQuotes=true;
      quoteChar=c;
    }
  break;
case ',':
case ']':
if (inQuotes) {
  builder.append(c);
}
 else {
  int beginIndex=0;
  int endIndex=builder.length();
  while (beginIndex < endIndex && builder.charAt(beginIndex) <= ' ') {
    beginIndex++;
  }
  while (beginIndex < endIndex && builder.charAt(endIndex - 1) <= ' ') {
    endIndex--;
  }
  if (endIndex == 0) {
    writer.writeStringReference(XmlElementValueProvider.EMPTY);
  }
 else {
    out.write(Amf3Types.STRING);
    out.writeAmfUtf(builder,false,beginIndex,endIndex);
  }
  validChildrenCount++;
  builder.setLength(0);
}
break;
default :
builder.append(c);
}
}
}
  finally {
StringBuilderSpinAllocator.dispose(builder);
}
out.putShort(validChildrenCount,lengthPosition);
}
