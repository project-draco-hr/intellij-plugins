{
  myIDEFacade=facade;
  myLocalMessageDispatcher=localMessageDispatcher;
  myUserModel=userModel;
  myTimer4Renderer=new Timer(200,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myLocalMessageDispatcher.hasUsersWithMessages()) {
        myRefreshCounter++;
        if (myRefreshCounter > 4) {
          myRefreshCounter=0;
        }
        myTree.repaint();
      }
    }
  }
);
  myTree=new UserTree(localMessageDispatcher);
  myTree.setCellRenderer(createRenderer());
  myTree.setCellEditor(new MyTreeCellEditor());
  myTreeUi=(UserTree.MyTreeUI)myTree.getUI();
  myTree.setTransferHandler(new UserTreeTransferHandler(myUserModel));
  enableDnD();
  myTree.setModel(new UsersTreeModel(myTree,userModel,myLocalMessageDispatcher));
  myExpandTreeNodeListener=new IDEtalkAdapter(){
    public void afterChange(    IDEtalkEvent event){
      event.accept(new EventVisitor(){
        @SuppressWarnings({"RefusedBequest"}) public void visitTransportEvent(        TransportEvent event){
          User user=event.createUser(myUserModel);
          expandAndRepaintUserNode(user);
        }
        @SuppressWarnings({"RefusedBequest"}) public void visitUserAdded(        UserEvent.Added event){
          expandAndRepaintUserNode(event.getUser());
        }
        public void visitUserUpdated(        UserEvent.Updated event){
          repaintUserNode(event.getUser());
        }
      }
);
    }
  }
;
  UIUtil.runWhenShown(myTree,new MakeNodeWithMessageVisible());
  myUserModel.getBroadcaster().addListener(myExpandTreeNodeListener);
  readState();
}
