{
  if (line.startsWith(OBSERVATORY_LISTENING_ON + "http://")) {
    return getObservatoryUrlResult(line,entireLength - line.length());
  }
  final DartPositionInfo info=DartPositionInfo.parsePositionInfo(line);
  if (info == null)   return null;
  final VirtualFile file;
switch (info.type) {
case FILE:
    String path=URLUtil.unescapePercentSequences(info.path);
  if (SystemInfo.isWindows) {
    path=StringUtil.trimLeading(path,'/');
  }
file=LocalFileSystem.getInstance().findFileByPath(path);
break;
case DART:
file=DartUrlResolver.findFileInDartSdkLibFolder(myProject,mySdk,DART_PREFIX + info.path);
break;
case PACKAGE:
if (myDartUrlResolver != null) {
file=myDartUrlResolver.findFileByDartUrl(PACKAGE_PREFIX + info.path);
}
 else {
if (myAllPubspecYamlFiles == null) {
myAllPubspecYamlFiles=FilenameIndex.getVirtualFilesByName(myProject,PUBSPEC_YAML,GlobalSearchScope.projectScope(myProject));
}
VirtualFile inPackage=null;
for (VirtualFile yamlFile : myAllPubspecYamlFiles) {
inPackage=DartUrlResolver.getInstance(myProject,yamlFile).findFileByDartUrl(PACKAGE_PREFIX + info.path);
if (inPackage != null) {
break;
}
}
file=inPackage;
}
break;
default :
file=null;
}
if (file != null && !file.isDirectory()) {
final int highlightStartOffset=entireLength - line.length() + info.highlightingStartIndex;
final int highlightEndOffset=entireLength - line.length() + info.highlightingEndIndex;
return new Result(highlightStartOffset,highlightEndOffset,new OpenFileHyperlinkInfo(myProject,file,info.line,info.column));
}
return null;
}
