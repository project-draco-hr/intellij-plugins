{
  XmlUtil.registerXmlTagReferenceProvider(registrar,new String[]{"path-element","class","classname","symbol"},new NamespaceFilter(FlexApplicationComponent.HTTP_WWW_ADOBE_COM_2006_FLEX_CONFIG),true,new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull final PsiElement element,    @NotNull final ProcessingContext context){
      TextRange myRange=ElementManipulators.getValueTextRange(element);
      if (myRange.getStartOffset() == 0)       return PsiReference.EMPTY_ARRAY;
      XmlTag tag=(XmlTag)element;
      final String trimmed=tag.getValue().getTrimmedText();
      if (trimmed.indexOf('{') != -1)       return PsiReference.EMPTY_ARRAY;
      if ("path-element".equals(tag.getLocalName())) {
        return ReferenceSupport.getFileRefs(element,myRange.getStartOffset(),trimmed,ReferenceSupport.LookupOptions.FLEX_COMPILER_CONFIG_PATH_ELEMENT);
      }
      return new FlexConfigXmlReferenceSet(element,trimmed,myRange.getStartOffset()).getReferences();
    }
  }
);
  registrar.registerReferenceProvider(xmlAttributeValue(xmlAttribute("class").withParent(xmlTag().withName("component").withParent(xmlTag().withName("componentPackage")))),new PsiReferenceProvider(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull final PsiElement element,    @NotNull final ProcessingContext context){
      TextRange myRange=ElementManipulators.getValueTextRange(element);
      if (myRange.getStartOffset() == 0)       return PsiReference.EMPTY_ARRAY;
      final String attrValue=((XmlAttributeValue)element).getValue();
      return new FlexConfigXmlReferenceSet(element,attrValue,myRange.getStartOffset()).getReferences();
    }
  }
);
}
