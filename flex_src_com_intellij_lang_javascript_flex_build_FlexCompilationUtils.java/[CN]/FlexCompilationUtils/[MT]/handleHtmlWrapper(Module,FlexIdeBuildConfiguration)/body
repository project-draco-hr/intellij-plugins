{
  final VirtualFile templateDir=LocalFileSystem.getInstance().findFileByPath(bc.getWrapperTemplatePath());
  if (templateDir == null || !templateDir.isDirectory()) {
    throw new FlexCompilerException(FlexBundle.message("html.wrapper.dir.not.found",bc.getWrapperTemplatePath()));
  }
  final VirtualFile templateFile=templateDir.findChild(HTML_WRAPPER_TEMPLATE_FILE_NAME);
  if (templateFile == null) {
    throw new FlexCompilerException(FlexBundle.message("no.index.template.html.file",bc.getWrapperTemplatePath()));
  }
  final InfoFromConfigFile info=FlexCompilerConfigFileUtil.getInfoFromConfigFile(bc.getCompilerOptions().getAdditionalConfigFilePath());
  final String outputFolderPath=StringUtil.notNullize(info.getOutputFolderPath(),bc.getOutputFolder());
  final String outputFileName=bc.isTempBCForCompilation() ? bc.getOutputFileName() : StringUtil.notNullize(info.getOutputFileName(),bc.getOutputFileName());
  final String targetPlayer=StringUtil.notNullize(info.getTargetPlayer(),bc.getDependencies().getTargetPlayer());
  final VirtualFile outputDir=LocalFileSystem.getInstance().findFileByPath(outputFolderPath);
  if (outputDir == null || !outputDir.isDirectory()) {
    throw new FlexCompilerException(FlexBundle.message("output.folder.does.not.exist",outputFolderPath));
  }
  final Ref<FlexCompilerException> exceptionRef=new Ref<FlexCompilerException>();
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    public void run(){
      exceptionRef.set(ApplicationManager.getApplication().runWriteAction(new NullableComputable<FlexCompilerException>(){
        public FlexCompilerException compute(){
          for (          VirtualFile file : templateDir.getChildren()) {
            if (file == templateFile) {
              final String wrapperText;
              try {
                wrapperText=VfsUtilCore.loadText(file);
              }
 catch (              IOException e) {
                return new FlexCompilerException(FlexBundle.message("failed.to.load.template.file",file.getPresentableUrl(),e.getMessage()));
              }
              if (!wrapperText.contains(SWF_MACRO)) {
                return new FlexCompilerException(FlexBundle.message("no.swf.macro",FileUtil.toSystemDependentName(file.getPath())));
              }
              final InfoFromConfigFile info=FlexCompilerConfigFileUtil.getInfoFromConfigFile(bc.getCompilerOptions().getAdditionalConfigFilePath());
              final String mainClass=StringUtil.notNullize(info.getMainClass(module),bc.getMainClass());
              final PsiElement jsClass=JSResolveUtil.findClassByQName(mainClass,module.getModuleScope());
              final String fixedText=replaceMacros(wrapperText,FileUtil.getNameWithoutExtension(outputFileName),targetPlayer,jsClass instanceof JSClass ? (JSClass)jsClass : null);
              final String wrapperFileName=BCUtils.getWrapperFileName(bc);
              try {
                FlexUtils.addFileWithContent(wrapperFileName,fixedText,outputDir);
              }
 catch (              IOException e) {
                return new FlexCompilerException(FlexBundle.message("failed.to.create.file",wrapperFileName,outputDir.getPresentableUrl(),e.getMessage()));
              }
            }
 else {
              try {
                file.copy(this,outputDir,file.getName());
              }
 catch (              IOException e) {
                return new FlexCompilerException(FlexBundle.message("failed.to.copy.file",file.getName(),templateDir.getPath(),outputDir.getPath(),e.getMessage()));
              }
            }
          }
          return null;
        }
      }
));
    }
  }
,ModalityState.any());
  if (!exceptionRef.isNull()) {
    throw exceptionRef.get();
  }
}
