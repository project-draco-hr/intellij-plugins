{
  PsiReference[] references=element.getReferences();
  if (references.length < 2) {
    return false;
  }
  List<State> states=null;
  for (int i=references.length - 1; i > -1; i--) {
    PsiReference psiReference=references[i];
    if (psiReference instanceof StateReference) {
      states=nameToState.get(psiReference.getCanonicalText());
      break;
    }
  }
  if (states == null) {
    return false;
  }
  ValueWriter valueWriter=null;
  try {
    valueWriter=propertyProcessor.process(element,valueProvider,descriptor,context);
  }
 catch (  InvalidPropertyException ignored) {
  }
  if (valueWriter == null) {
    return true;
  }
  final PrimitiveAmfOutputStream out=writer.getOut();
  SetPropertyOrStyle override=new SetPropertyOrStyle(writer.getBlockOut().startRange());
  out.write(Amf3Types.OBJECT);
  writer.writeObjectHeader(propertyProcessor.isStyle() ? "com.intellij.flex.uiDesigner.flex.states.SetStyle" : "com.intellij.flex.uiDesigner.flex.states.SetProperty");
  writer.writeStringReference(NAME,propertyProcessor.getName());
  out.writeUInt29(VALUE);
  out.write(PropertyClassifier.PROPERTY);
  PropertyKind propertyKind;
  try {
    propertyKind=valueWriter.write(descriptor,valueProvider,out,writer,false);
  }
 catch (  InvalidPropertyException invalidProperty) {
    throw new UnsupportedOperationException("");
  }
  if (propertyKind.isComplex()) {
    mxmlWriter.processPropertyTagValue((XmlTag)element,context,propertyKind);
  }
  override.targetId=writer.getObjectOrFactoryId(context);
  if (pendingFirstSetProperty == null) {
    pendingFirstSetProperty=override;
  }
  if (context == null && parentContext != null && parentContext.ownerIsDynamic() && pendingFirstSetProperty == null) {
    pendingFirstSetProperty=override;
  }
  writer.endObject();
  writer.getBlockOut().endRange(override.dataRange);
  for (  State state : states) {
    state.overrides.add(override);
  }
  return true;
}
