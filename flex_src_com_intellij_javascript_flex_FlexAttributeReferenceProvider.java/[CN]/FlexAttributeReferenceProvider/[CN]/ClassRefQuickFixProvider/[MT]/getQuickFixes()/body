{
  final String fqn=myElement.getSimpleValue();
  if (fqn != null && LanguageNamesValidation.INSTANCE.forLanguage(JavaScriptSupportLoader.JAVASCRIPT.getLanguage()).isIdentifier(StringUtil.getShortName(fqn),null)) {
    final String[] baseClasses=myReferenceSet.getBaseClassFqns();
    String baseClass=null;
    if (baseClasses.length == 1 && !"Object".equals(baseClasses[0])) {
      baseClass=baseClasses[0];
    }
 else     if (baseClasses.length > 0) {
      for (      String aClass : baseClasses) {
        if (JSResolveUtil.findClassByQName(aClass,myElement) != null) {
          if (baseClass == null) {
            baseClass=aClass;
          }
 else {
            baseClass=null;
            break;
          }
        }
      }
    }
    final CreateClassOrInterfaceFix fix=new CreateClassOrInterfaceFix(fqn,baseClass,myElement);
    fix.setCreatedClassFqnConsumer(new Consumer<String>(){
      @Override public void consume(      final String fqn){
        if (myElement.isValid()) {
          if (!fqn.equals(StringUtil.stripQuotesAroundValue(myElement.getValueNode().getText()))) {
            final ASTNode oldValueNode=myElement.getValueNode();
            final String oldText=oldValueNode.getText();
            char quoteChar=oldText.length() > 0 ? oldText.charAt(0) : '"';
            if (quoteChar != '\'' && quoteChar != '"') {
              quoteChar='"';
            }
            final ASTNode newNode=JSChangeUtil.createExpressionFromText(myElement.getProject(),quoteChar + fqn + quoteChar);
            myElement.getNode().replaceChild(oldValueNode,newNode.getFirstChildNode());
          }
        }
      }
    }
);
    return new LocalQuickFix[]{fix};
  }
  return LocalQuickFix.EMPTY_ARRAY;
}
