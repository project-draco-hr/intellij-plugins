{
  if (StringUtil.isEmptyOrSpaces(text)) {
    reportPreviousInfoMessage();
    return;
  }
  if (text.equals("^")) {
    myPreviousUnreportedInfoMessage=null;
    return;
  }
  final Matcher matcher=FlexCommonUtils.ERROR_PATTERN.matcher(text);
  if (matcher.matches()) {
    final String sourceFilePath=matcher.group(1);
    final String additionalInfo=matcher.group(2);
    final String line=matcher.group(3);
    final String column=matcher.group(4);
    final String type=matcher.group(5);
    final String message=matcher.group(6);
    final BuildMessage.Kind kind="Warning".equals(type) ? BuildMessage.Kind.WARNING : BuildMessage.Kind.ERROR;
    final File file=new File(sourceFilePath);
    final boolean sourceFileExists=file.exists();
    final StringBuilder fullMessage=new StringBuilder();
    if (!sourceFileExists)     fullMessage.append(sourceFilePath).append(": ");
    if (additionalInfo != null)     fullMessage.append(additionalInfo).append(' ');
    fullMessage.append(message);
    reportPreviousInfoMessage();
    myContext.processMessage(new CompilerMessage(myCompilerName,kind,fullMessage.toString(),sourceFileExists ? sourceFilePath : null,-1,-1,-1,line != null ? Integer.parseInt(line) : 0,column != null ? Integer.parseInt(column) : 0));
    myCompilationFailed|=kind == BuildMessage.Kind.ERROR;
  }
 else   if (text.startsWith(ERROR_PREFIX)) {
    reportPreviousInfoMessage();
    myContext.processMessage(new CompilerMessage(myCompilerName,BuildMessage.Kind.ERROR,text.substring(ERROR_PREFIX.length())));
    myCompilationFailed=true;
  }
 else   if (text.startsWith("Exception in thread \"") || text.contains(FlexCommonUtils.COULD_NOT_CREATE_JVM)) {
    reportPreviousInfoMessage();
    myContext.processMessage(new CompilerMessage(myCompilerName,BuildMessage.Kind.ERROR,text));
    myCompilationFailed=true;
  }
 else {
    reportPreviousInfoMessage();
    myPreviousUnreportedInfoMessage=text;
    if (text.contains(FlexCommonUtils.OUT_OF_MEMORY) || text.contains(FlexCommonUtils.JAVA_HEAP_SPACE)) {
      myContext.processMessage(new CompilerMessage(myCompilerName,BuildMessage.Kind.ERROR,FlexCommonBundle.message("increase.flex.compiler.heap")));
      myCompilationFailed=true;
    }
  }
}
