{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 116:
{
        return CfscriptTokenTypes.VARIABLENAME_TYPE;
      }
case 120:
    break;
case 5:
{
    return CfscriptTokenTypes.MINUS;
  }
case 121:
break;
case 96:
{
return CfscriptTokenTypes.RETURN_KEYWORD;
}
case 122:
break;
case 65:
{
return CfscriptTokenTypes.NOT_L;
}
case 123:
break;
case 4:
{
return CfscriptTokenTypes.NOT;
}
case 124:
break;
case 92:
{
return CfscriptTokenTypes.WHILE_KEYWORD;
}
case 125:
break;
case 22:
{
return CfscriptTokenTypes.R_SQUAREBRACKET;
}
case 126:
break;
case 117:
{
return CfscriptTokenTypes.PAGEENCODING_KEYWORD;
}
case 127:
break;
case 3:
{
return CfscriptTokenTypes.LT;
}
case 128:
break;
case 111:
{
return CfscriptTokenTypes.CONTAINS_L;
}
case 129:
break;
case 112:
{
return CfscriptTokenTypes.FUNCTION_KEYWORD;
}
case 130:
break;
case 21:
{
return CfscriptTokenTypes.L_SQUAREBRACKET;
}
case 131:
break;
case 15:
{
return CfscriptTokenTypes.MUL;
}
case 132:
break;
case 77:
{
return CfscriptTokenTypes.COMMENT;
}
case 133:
break;
case 76:
yypushback(2);
{
return CfscriptTokenTypes.COMMENT;
}
case 134:
break;
case 62:
yypushback(1);
{
return CfmlTokenTypes.STRING_TEXT;
}
case 135:
break;
case 66:
yypushback(1);
{
return CfscriptTokenTypes.COMMENT;
}
case 136:
break;
case 108:
{
return CfscriptTokenTypes.PACKAGE_KEYWORD;
}
case 137:
break;
case 103:
{
return CfscriptTokenTypes.NUMERIC_TYPE;
}
case 138:
break;
case 42:
{
return CfscriptTokenTypes.GTE;
}
case 139:
break;
case 46:
{
return CfscriptTokenTypes.IF_KEYWORD;
}
case 140:
break;
case 94:
{
return CfscriptTokenTypes.IMPORT_KEYWORD;
}
case 141:
break;
case 55:
{
return CfscriptTokenTypes.GT_L;
}
case 142:
break;
case 71:
{
return CfscriptTokenTypes.NOT_XOR_L;
}
case 143:
break;
case 37:
{
myCurrentConfiguration.myReturnStack.push(SINGLE_QUOTED_STRING);
myCurrentConfiguration.mySharpCounter++;
yybegin(YYINITIAL);
return CfscriptTokenTypes.OPENSHARP;
}
case 144:
break;
case 107:
{
return CfscriptTokenTypes.DEFAULT_KEYWORD;
}
case 145:
break;
case 90:
{
return CfscriptTokenTypes.ABORT_KEYWORD;
}
case 146:
break;
case 97:
{
return CfscriptTokenTypes.BINARY_TYPE;
}
case 147:
break;
case 51:
{
return CfscriptTokenTypes.LT_L;
}
case 148:
break;
case 83:
{
return CfscriptTokenTypes.UUID_TYPE;
}
case 149:
break;
case 44:
{
return CfscriptTokenTypes.DOUBLE;
}
case 150:
break;
case 75:
{
yybegin(myCurrentConfiguration.myReturnStack.pop());
return CfmlTokenTypes.COMMENT;
}
case 151:
break;
case 59:
{
return CfscriptTokenTypes.ADD_EQ;
}
case 152:
break;
case 6:
{
return CfscriptTokenTypes.GT;
}
case 153:
break;
case 101:
{
return CfscriptTokenTypes.PUBLIC_KEYWORD;
}
case 154:
break;
case 49:
{
return CfscriptTokenTypes.MUL_EQ;
}
case 155:
break;
case 41:
{
return CfscriptTokenTypes.MINUS_EQ;
}
case 156:
break;
case 78:
{
return CfscriptTokenTypes.CASE_KEYWORD;
}
case 157:
break;
case 7:
{
return CfscriptTokenTypes.IDENTIFIER;
}
case 158:
break;
case 38:
{
return CfscriptTokenTypes.LTE;
}
case 159:
break;
case 105:
{
return CfscriptTokenTypes.RETHROW_KEYWORD;
}
case 160:
break;
case 57:
{
return CfscriptTokenTypes.CONCAT_EQ;
}
case 161:
break;
case 33:
{
yybegin(YYINITIAL);
return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
}
case 162:
break;
case 10:
{
return CfscriptTokenTypes.POINT;
}
case 163:
break;
case 115:
{
return CfscriptTokenTypes.COMPONENT_KEYWORD;
}
case 164:
break;
case 85:
zzMarkedPos=zzStartRead + 1;
{
myCurrentConfiguration.myCommentCounter--;
if (myCurrentConfiguration.myCommentCounter == 0) {
yybegin(COMMENTEND);
}
return CfmlTokenTypes.COMMENT;
}
case 165:
break;
case 61:
{
return CfscriptTokenTypes.OR;
}
case 166:
break;
case 67:
{
return CfscriptTokenTypes.FOR_KEYWORD;
}
case 167:
break;
case 9:
{
return CfscriptTokenTypes.INTEGER;
}
case 168:
break;
case 87:
{
return CfscriptTokenTypes.CATCH_KEYWORD;
}
case 169:
break;
case 56:
{
return CfscriptTokenTypes.AND;
}
case 170:
break;
case 73:
{
return CfscriptTokenTypes.XML_TYPE;
}
case 171:
break;
case 27:
{
return CfscriptTokenTypes.QUESTION;
}
case 172:
break;
case 86:
{
return startComment(YYINITIAL);
}
case 173:
break;
case 47:
{
return CfscriptTokenTypes.EQ_L;
}
case 174:
break;
case 109:
{
return CfscriptTokenTypes.PRIVATE_KEYWORD;
}
case 175:
break;
case 81:
{
return CfscriptTokenTypes.BOOLEAN;
}
case 176:
break;
case 68:
{
return CfscriptTokenTypes.MOD_L;
}
case 177:
break;
case 58:
{
return CfscriptTokenTypes.EQEQ;
}
case 178:
break;
case 100:
{
return CfscriptTokenTypes.SWITCH_KEYWORD;
}
case 179:
break;
case 18:
{
return CfscriptTokenTypes.COMMA;
}
case 180:
break;
case 19:
{
return CfscriptTokenTypes.L_BRACKET;
}
case 181:
break;
case 93:
zzMarkedPos=zzStartRead + 1;
{
myCurrentConfiguration.myCommentCounter++;
return CfmlTokenTypes.COMMENT;
}
case 182:
break;
case 48:
{
return CfscriptTokenTypes.DEV_EQ;
}
case 183:
break;
case 106:
{
return CfscriptTokenTypes.BOOLAEN_TYPE;
}
case 184:
break;
case 72:
{
return CfscriptTokenTypes.TRY_KEYWORD;
}
case 185:
break;
case 114:
{
return CfscriptTokenTypes.INTERFACE_KEYWORD;
}
case 186:
break;
case 34:
{
myCurrentConfiguration.myReturnStack.push(DOUBLE_QUOTED_STRING);
myCurrentConfiguration.mySharpCounter++;
yybegin(YYINITIAL);
return CfscriptTokenTypes.OPENSHARP;
}
case 187:
break;
case 63:
{
return CfscriptTokenTypes.IMP_L;
}
case 188:
break;
case 25:
{
return CfscriptTokenTypes.SEMICOLON;
}
case 189:
break;
case 113:
{
return CfscriptTokenTypes.REQUIRED_KEYWORD;
}
case 190:
break;
case 74:
{
return CfscriptTokenTypes.XOR_L;
}
case 191:
break;
case 8:
{
return CfscriptTokenTypes.WHITE_SPACE;
}
case 192:
break;
case 88:
zzMarkedPos=zzStartRead + 3;
{
return CfscriptTokenTypes.VAR_KEYWORD;
}
case 193:
break;
case 52:
{
return CfscriptTokenTypes.OR_L;
}
case 194:
break;
case 16:
{
return CfscriptTokenTypes.CONCAT;
}
case 195:
break;
case 31:
{
return CfscriptTokenTypes.POW;
}
case 196:
break;
case 29:
{
return CfscriptTokenTypes.MOD;
}
case 197:
break;
case 45:
{
return CfscriptTokenTypes.IN_L;
}
case 198:
break;
case 17:
{
return CfmlTokenTypes.ASSIGN;
}
case 199:
break;
case 89:
{
return CfscriptTokenTypes.ARRAY_TYPE;
}
case 200:
break;
case 119:
{
return CfmlTokenTypes.VAR_ANNOTATION;
}
case 201:
break;
case 28:
{
return CfscriptTokenTypes.ADD;
}
case 202:
break;
case 43:
yypushback(1);
{
if (ArrayUtil.find(CfmlUtil.getVariableScopes(myProject),yytext().toString().toLowerCase()) != -1) {
return CfscriptTokenTypes.SCOPE_KEYWORD;
}
 else {
return CfscriptTokenTypes.IDENTIFIER;
}
}
case 203:
break;
case 80:
{
return CfscriptTokenTypes.ELSE_KEYWORD;
}
case 204:
break;
case 35:
{
yybegin(SINGLEQUOTE_CLOSER);
return CfmlTokenTypes.STRING_TEXT;
}
case 205:
break;
case 12:
{
yybegin(SINGLE_QUOTED_STRING);
return CfmlTokenTypes.SINGLE_QUOTE;
}
case 206:
break;
case 23:
{
return CfscriptTokenTypes.L_CURLYBRACKET;
}
case 207:
break;
case 30:
{
return CfscriptTokenTypes.INT_DEV;
}
case 208:
break;
case 2:
{
return CfscriptTokenTypes.BAD_CHARACTER;
}
case 209:
break;
case 20:
{
return CfscriptTokenTypes.R_BRACKET;
}
case 210:
break;
case 95:
{
return CfscriptTokenTypes.REMOTE_KEYWORD;
}
case 211:
break;
case 60:
{
return CfscriptTokenTypes.INC;
}
case 212:
break;
case 1:
{
return CfmlTokenTypes.COMMENT;
}
case 213:
break;
case 118:
{
return CfscriptTokenTypes.NOT_CONTAINS_L;
}
case 214:
break;
case 69:
{
return CfscriptTokenTypes.AND_L;
}
case 215:
break;
case 54:
{
return CfscriptTokenTypes.GE_L;
}
case 216:
break;
case 14:
{
return CfscriptTokenTypes.DEV;
}
case 217:
break;
case 24:
{
return CfscriptTokenTypes.R_CURLYBRACKET;
}
case 218:
break;
case 82:
{
return CfscriptTokenTypes.DATE_TYPE;
}
case 219:
break;
case 91:
{
return CfscriptTokenTypes.BREAK_KEYWORD;
}
case 220:
break;
case 70:
{
return CfscriptTokenTypes.ANY_TYPE;
}
case 221:
break;
case 11:
{
yybegin(DOUBLE_QUOTED_STRING);
return CfmlTokenTypes.DOUBLE_QUOTE;
}
case 222:
break;
case 50:
{
return CfscriptTokenTypes.LE_L;
}
case 223:
break;
case 36:
{
yybegin(YYINITIAL);
return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
}
case 224:
break;
case 110:
{
return CfscriptTokenTypes.CONTINUE_KEYWORD;
}
case 225:
break;
case 98:
{
return CfscriptTokenTypes.STRING_TYPE;
}
case 226:
break;
case 64:
{
return CfscriptTokenTypes.NEQ_L;
}
case 227:
break;
case 84:
{
return CfscriptTokenTypes.GUID_TYPE;
}
case 228:
break;
case 39:
{
return CfscriptTokenTypes.NEQ;
}
case 229:
break;
case 40:
{
return CfscriptTokenTypes.DEC;
}
case 230:
break;
case 53:
{
return CfscriptTokenTypes.DO_KEYWORD;
}
case 231:
break;
case 102:
{
return CfscriptTokenTypes.INCLUDE_KEYWORD;
}
case 232:
break;
case 104:
{
return CfscriptTokenTypes.FINALLY_KEYWORD;
}
case 233:
break;
case 32:
{
yybegin(DOUBLEQUOTE_CLOSER);
return CfmlTokenTypes.STRING_TEXT;
}
case 234:
break;
case 99:
{
return CfscriptTokenTypes.STRUCT_TYPE;
}
case 235:
break;
case 79:
{
return CfscriptTokenTypes.VOID_TYPE;
}
case 236:
break;
case 26:
{
return CfscriptTokenTypes.DOTDOT;
}
case 237:
break;
case 13:
{
if (myCurrentConfiguration.mySharpCounter == 0) {
myCurrentConfiguration.myReturnStack.push(YYINITIAL);
myCurrentConfiguration.mySharpCounter=1;
return CfscriptTokenTypes.OPENSHARP;
}
myCurrentConfiguration.mySharpCounter--;
yybegin(myCurrentConfiguration.myReturnStack.pop());
return CfscriptTokenTypes.CLOSESHARP;
}
case 238:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
