{
  CfmlTagNamesCompletionProvider tagNamesCompletionProvider=new CfmlTagNamesCompletionProvider();
  extend(BASIC,psiElement().afterLeaf(psiElement().withText("<")).withLanguage(StdLanguages.XML),tagNamesCompletionProvider);
  extend(BASIC,psiElement().afterLeaf(psiElement().withText("<")).withLanguage(CfmlLanguage.INSTANCE),tagNamesCompletionProvider);
  extend(BASIC,psiElement().afterLeaf(psiElement().withText("</")).withLanguage(CfmlLanguage.INSTANCE),tagNamesCompletionProvider);
  extend(BASIC,psiElement().inside(xmlTag()),tagNamesCompletionProvider);
  extend(BASIC,psiElement().withElementType(CfmlTokenTypes.ATTRIBUTE).withLanguage(CfmlLanguage.INSTANCE),new CfmlAttributeNamesCompletionProvider());
  extend(BASIC,psiElement().withElementType(CfscriptTokenTypes.IDENTIFIER).withParent(CfmlAttribute.class).withLanguage(CfmlLanguage.INSTANCE),new CfmlAttributeNamesCompletionProvider());
  extend(BASIC,psiElement().withElementType(CfscriptTokenTypes.IDENTIFIER).withParent(CfmlProperty.class).withLanguage(CfmlLanguage.INSTANCE),new CfmlAttributeNamesCompletionProvider());
  final PatternCondition<PsiElement> withinTypeCondition=new PatternCondition<PsiElement>(""){
    public boolean accepts(    @NotNull PsiElement psiElement,    ProcessingContext context){
      return (psiElement.getParent() != null && psiElement.getParent().getNode().getElementType() == CfmlElementTypes.TYPE);
    }
  }
;
  extend(BASIC,psiElement().withParent(psiElement(CfmlElementTypes.TYPE)).withLanguage(CfmlLanguage.INSTANCE),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      PsiElement position=parameters.getPosition();
      String text=position.getParent().getText();
      String[] attributeValues=text.indexOf('.') == -1 ? CfmlUtil.getAttributeValues("cffunction","returntype",position.getProject()) : ArrayUtil.EMPTY_STRING_ARRAY;
      Set<LookupElement> lookupResult=ContainerUtil.map2Set(attributeValues,new Function<String,LookupElement>(){
        public LookupElementBuilder fun(        final String argumentValue){
          return LookupElementBuilder.create(argumentValue).withCaseSensitivity(false);
        }
      }
);
      Object[] objects=CfmlComponentReference.buildVariants(text,position.getContainingFile(),position.getProject(),null,false);
      for (      Object o : objects) {
        result.addElement((LookupElement)o);
      }
      result.addAllElements(lookupResult);
    }
  }
);
  extend(BASIC,psiElement().withElementType(CfscriptTokenTypes.IDENTIFIER).withSuperParent(2,CfmlComponent.class).withLanguage(CfmlLanguage.INSTANCE).with(new PropertyPatternCondition()),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      result.addElement(LookupElementBuilder.create("property").withCaseSensitivity(false));
    }
  }
);
  extend(BASIC,psiElement().withElementType(CfscriptTokenTypes.IDENTIFIER),new CfmlAttributeNamesCompletionProvider());
  extend(BASIC,psiElement().withElementType(CfmlTokenTypes.STRING_TEXT).withLanguage(CfmlLanguage.INSTANCE),new CfmlArgumentValuesCompletionProvider());
  extend(BASIC,psiElement().withElementType(CfmlTokenTypes.STRING_TEXT).withLanguage(CfmlLanguage.INSTANCE),new CfmlAttributeValuesCompletionProvider());
  extend(BASIC,psiElement().withElementType(CfmlTokenTypes.STRING_TEXT).withLanguage(CfmlLanguage.INSTANCE),new CfmlJavaClassNamesCompletion());
  extend(BASIC,psiElement().withElementType(CfscriptTokenTypes.IDENTIFIER).withLanguage(CfmlLanguage.INSTANCE).with(new PatternCondition<PsiElement>(""){
    public boolean accepts(    @NotNull PsiElement psiElement,    ProcessingContext context){
      if (withinTypeCondition.accepts(psiElement,context))       return false;
      return !(psiElement.getParent() instanceof CfmlAttribute) && (psiElement.getPrevSibling() == null || psiElement.getPrevSibling().getNode().getElementType() != CfscriptTokenTypes.POINT);
    }
  }
),new CfmlFunctionNamesCompletionProvider());
  extend(BASIC,psiElement().withElementType(CfscriptTokenTypes.IDENTIFIER).withLanguage(CfmlLanguage.INSTANCE),new CfmlPredefinedVariablesCompletion());
}
