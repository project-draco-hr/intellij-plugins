{
  myRunConfiguration=runConfiguration;
  myAdditionalProperties=runConfiguration.getAdditionalProperties();
  myBundles=bundles;
  Sdk jdkForRun;
  if (runConfiguration.isUseAlternativeJre()) {
    String path=runConfiguration.getAlternativeJrePath();
    if (StringUtil.isEmpty(path) || !JdkUtil.checkForJre(path)) {
      jdkForRun=null;
    }
 else {
      jdkForRun=JavaSdk.getInstance().createJdk("",runConfiguration.getAlternativeJrePath());
    }
  }
 else {
    jdkForRun=ProjectRootManager.getInstance(runConfiguration.getProject()).getProjectSdk();
  }
  if (jdkForRun == null) {
    throw CantRunException.noJdkConfigured();
  }
  JavaParameters params=new JavaParameters();
  myWorkingDir=getWorkingDir(runConfiguration);
  if (!myWorkingDir.isDirectory() && !myWorkingDir.mkdirs()) {
    throw new CantRunException("Cannot create work directory '" + myWorkingDir.getPath() + "'");
  }
  params.setWorkingDirectory(myWorkingDir);
  params.configureByProject(runConfiguration.getProject(),JavaParameters.JDK_ONLY,jdkForRun);
  File pluginHome=PluginPathManager.getPluginHome("Osmorc");
  if (!pluginHome.isDirectory()) {
    pluginHome=PluginPathManager.getPluginHome("osmorc");
  }
  File paxLib=new File(pluginHome,"lib/" + PAX_RUNNER_LIB);
  if (!paxLib.exists()) {
    throw new CantRunException("Libraries required to start the framework not found - please check the installation");
  }
  params.getClassPath().add(paxLib);
  if (myRunConfiguration.isIncludeAllBundlesInClassPath()) {
    for (    SelectedBundle bundle : myBundles) {
      String url=bundle.getBundleUrl();
      if (url != null) {
        params.getClassPath().add(org.osmorc.frameworkintegration.util.FileUtil.urlToPath(url));
      }
    }
  }
  ParametersList vmParameters=params.getVMParametersList();
  vmParameters.addAll(HttpConfigurable.convertArguments(HttpConfigurable.getJvmPropertiesList(false,null)));
  vmParameters.addParametersString(myRunConfiguration.getVmParameters());
  addAdditionalTargetVMProperties(vmParameters);
  params.setMainClass(PAX_RUNNER_MAIN_CLASS);
  ParametersList commandLineParameters=params.getProgramParametersList();
  commandLineParameters.add("--p=" + getOsgiFrameworkName().toLowerCase());
  commandLineParameters.add("--nologo=true");
  FrameworkInstanceDefinition definition=myRunConfiguration.getInstanceToUse();
  String version=null;
  if (definition != null) {
    version=definition.getVersion();
  }
  if (!StringUtil.isEmptyOrSpaces(version)) {
    commandLineParameters.add("--v=" + version);
  }
  for (  SelectedBundle bundle : myBundles) {
    String bundleUrl=bundle.getBundleUrl();
    String prefix=CachingBundleInfoProvider.isExploded(bundleUrl) ? "scan-bundle:" : "";
    boolean isFragment=CachingBundleInfoProvider.isFragmentBundle(bundleUrl);
    if (bundle.isStartAfterInstallation() && !isFragment) {
      int bundleStartLevel=getBundleStartLevel(bundle);
      commandLineParameters.add(prefix + bundleUrl + "@"+ bundleStartLevel);
    }
 else     if (isFragment) {
      commandLineParameters.add(prefix + bundleUrl + "@nostart");
    }
 else {
      commandLineParameters.add(prefix + bundleUrl);
    }
  }
  String bootDelegation=GenericRunProperties.getBootDelegation(myAdditionalProperties);
  if (bootDelegation != null && !(bootDelegation.trim().length() == 0)) {
    commandLineParameters.add("--bd=" + bootDelegation);
  }
  String systemPackages=GenericRunProperties.getSystemPackages(myAdditionalProperties);
  if (systemPackages != null && !(systemPackages.trim().length() == 0)) {
    commandLineParameters.add("--sp=" + systemPackages);
  }
  int startLevel=getFrameworkStartLevel();
  commandLineParameters.add("--sl=" + startLevel);
  int defaultStartLevel=myRunConfiguration.getDefaultStartLevel();
  commandLineParameters.add("--bsl=" + defaultStartLevel);
  if (GenericRunProperties.isDebugMode(myAdditionalProperties)) {
    commandLineParameters.add("--log=DEBUG");
  }
  if (GenericRunProperties.isStartConsole(myAdditionalProperties)) {
    commandLineParameters.add("--console");
  }
 else {
    commandLineParameters.add("--noConsole");
  }
  commandLineParameters.add("--executor=inProcess");
  commandLineParameters.add("--keepOriginalUrls");
  commandLineParameters.add("--skipInvalidBundles");
  String additionalProgramParams=myRunConfiguration.getProgramParameters();
  if (!StringUtil.isEmptyOrSpaces(additionalProgramParams)) {
    commandLineParameters.addParametersString(additionalProgramParams);
  }
  params.setUseDynamicVMOptions(!myBundles.isEmpty());
  return params;
}
