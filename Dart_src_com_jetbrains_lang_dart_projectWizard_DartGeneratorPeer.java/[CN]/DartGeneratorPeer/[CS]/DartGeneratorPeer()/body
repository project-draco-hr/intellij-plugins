{
  LibraryTable.ModifiableModel modifiableModel=ModifiableModelsProvider.SERVICE.getInstance().getLibraryTableModifiableModel();
  final Library[] libraries=modifiableModel.getLibraries();
  ModifiableModelsProvider.SERVICE.getInstance().disposeLibraryTableModifiableModel(modifiableModel);
  final DartSdk sdkInitial=DartSdk.findDartSdkAmongGlobalLibs(libraries);
  final String sdkPathInitial=sdkInitial == null ? "" : FileUtil.toSystemDependentName(sdkInitial.getHomePath());
  mySdkPathComboWithBrowse.getComboBox().setEditable(true);
  mySdkPathComboWithBrowse.getComboBox().getEditor().setItem(sdkPathInitial);
  final WebBrowser dartiumInitial=DartiumUtil.getDartiumBrowser();
  myDartiumSettingsCurrent=new ChromeSettings();
  if (dartiumInitial != null) {
    final BrowserSpecificSettings browserSpecificSettings=dartiumInitial.getSpecificSettings();
    if (browserSpecificSettings instanceof ChromeSettings) {
      myDartiumSettingsCurrent=(ChromeSettings)browserSpecificSettings.clone();
    }
  }
  final String dartiumPath=dartiumInitial == null ? "" : FileUtilRt.toSystemDependentName(StringUtil.notNullize(dartiumInitial.getPath()));
  myDartiumPathComboWithBrowse.getComboBox().setEditable(true);
  myDartiumPathComboWithBrowse.getComboBox().getEditor().setItem(dartiumPath);
  DartSdkUtil.initDartSdkAndDartiumControls(null,mySdkPathComboWithBrowse,myVersionLabel,myDartiumPathComboWithBrowse,new Computable.PredefinedValueComputable<>(myDartiumSettingsCurrent),myDartiumSettingsButton,new Computable.PredefinedValueComputable<>(false));
  DartiumUtil.setCheckedMode(myDartiumSettingsCurrent.getEnvironmentVariables(),true);
  myCheckedModeCheckBox.setVisible(false);
  myCreateSampleProjectCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      myTemplatesList.setEnabled(myCreateSampleProjectCheckBox.isSelected());
    }
  }
);
  myTemplatesList.setEmptyText(DartBundle.message("set.sdk.to.see.sample.content.options"));
  myErrorLabel.setIcon(AllIcons.Actions.Lightning);
  myErrorLabel.setVisible(false);
  final String sdkPath=mySdkPathComboWithBrowse.getComboBox().getEditor().getItem().toString().trim();
  final String message=DartSdkUtil.getErrorMessageIfWrongSdkRootPath(sdkPath);
  if (message == null) {
    startLoadingTemplates();
  }
 else {
    myLoadingTemplatesPanel.setVisible(false);
    myCreateSampleProjectCheckBox.setEnabled(false);
    myTemplatesList.setEnabled(false);
    final JTextComponent editorComponent=(JTextComponent)mySdkPathComboWithBrowse.getComboBox().getEditor().getEditorComponent();
    editorComponent.getDocument().addDocumentListener(new DocumentAdapter(){
      @Override protected void textChanged(      final DocumentEvent e){
        final String sdkPath=mySdkPathComboWithBrowse.getComboBox().getEditor().getItem().toString().trim();
        final String message=DartSdkUtil.getErrorMessageIfWrongSdkRootPath(sdkPath);
        if (message == null) {
          editorComponent.getDocument().removeDocumentListener(this);
          startLoadingTemplates();
        }
      }
    }
);
  }
}
