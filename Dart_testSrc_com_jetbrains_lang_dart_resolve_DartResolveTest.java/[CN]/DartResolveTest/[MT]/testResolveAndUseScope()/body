{
  try {
    final VirtualFile inSdk1=DartLibraryIndex.getSdkLibByUri(getProject(),"dart:collection");
    final VirtualFile inSdk2=DartLibraryIndex.getSdkLibByUri(getProject(),"dart:math");
    final VirtualFile inIdeLib1=myFixture.addFileToProject("library/inLibrary1.dart","").getVirtualFile();
    final VirtualFile inIdeLib2=myFixture.addFileToProject("library/inLibrary2.dart","").getVirtualFile();
    configureLibrary(inIdeLib1.getParent());
    final VirtualFile inContent=myFixture.addFileToProject("inContentOutsideDartRoot.dart","").getVirtualFile();
    myFixture.addFileToProject("DartProject3/pubspec.yaml","name: DartProject3");
    final VirtualFile inProject3Web=myFixture.addFileToProject("DartProject3/web/inProject3Web.dart","").getVirtualFile();
    final VirtualFile inProject3Lib=myFixture.addFileToProject("DartProject3/lib/inProject3Lib.dart","").getVirtualFile();
    myFixture.addFileToProject("DartProject2/pubspec.yaml","name: DartProject2\n" + "dependencies:\n" + "  DartProject3:\n"+ "    path: ../DartProject3\n");
    final VirtualFile inProject2Web=myFixture.addFileToProject("DartProject2/web/inProject2Web.dart","").getVirtualFile();
    final VirtualFile inProject2Lib=myFixture.addFileToProject("DartProject2/lib/inProject2Lib.dart","").getVirtualFile();
    final VirtualFile pubspec=myFixture.addFileToProject("DartProject1/pubspec.yaml","name: DartProject1\n" + "dependencies:\n" + "  DartProject2:\n"+ "    path: ../DartProject2\n").getVirtualFile();
    final VirtualFile inProject1Root=myFixture.addFileToProject("DartProject1/inProject1Root.dart","").getVirtualFile();
    final VirtualFile inLib=myFixture.addFileToProject("DartProject1/lib/inLib.dart","").getVirtualFile();
    final VirtualFile inPackages=myFixture.addFileToProject("DartProject1/packages/inPackages.dart","").getVirtualFile();
    final VirtualFile inWeb=myFixture.addFileToProject("DartProject1/web/inWeb.dart","").getVirtualFile();
    final VirtualFile inWebSub=myFixture.addFileToProject("DartProject1/web/sub/inWebSub.dart","").getVirtualFile();
    final VirtualFile inExcluded=myFixture.addFileToProject("DartProject1/web/packages/inExcluded.dart","").getVirtualFile();
    final VirtualFile inTest=myFixture.addFileToProject("DartProject1/test/inTest.dart","").getVirtualFile();
    final VirtualFile inExample=myFixture.addFileToProject("DartProject1/example/inExample.dart","").getVirtualFile();
    DartProjectComponent.excludeBuildAndPackagesFolders(myModule,pubspec);
    doTestResolveScope(inExcluded,null,null,true);
    doTestResolveScope(new VirtualFile[]{inSdk1,inSdk2},new VirtualFile[]{inSdk1,inSdk2},new VirtualFile[]{inIdeLib1,inIdeLib2,inContent,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib,inProject1Root,inLib,inPackages,inWeb,inWebSub,inExcluded,inTest,inExample});
    doTestResolveScope(new VirtualFile[]{inIdeLib1,inIdeLib2},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2},new VirtualFile[]{inContent,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib,inProject1Root,inLib,inPackages,inWeb,inWebSub,inExcluded,inTest,inExample});
    doTestResolveScope(new VirtualFile[]{inContent},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inContent,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib,inProject1Root,inLib,inPackages,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inExcluded});
    doTestResolveScope(inLib,new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Lib,inProject3Lib,inLib,inPackages},new VirtualFile[]{inContent,inProject2Web,inProject3Web,inExcluded,inProject1Root,inWeb,inWebSub,inTest,inExample},true);
    doTestResolveScope(new VirtualFile[]{inPackages},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Lib,inProject3Lib,inLib,inPackages},new VirtualFile[]{inContent,inProject2Web,inProject3Web,inExcluded,inProject1Root,inWeb,inWebSub,inTest,inExample});
    doTestResolveScope(new VirtualFile[]{inWeb,inWebSub},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Lib,inProject3Lib,inLib,inPackages,inWeb,inWebSub},new VirtualFile[]{inContent,inProject2Web,inProject3Web,inExcluded,inProject1Root,inTest,inExample},true);
    doTestResolveScope(inExample,new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Lib,inProject3Lib,inLib,inPackages,inExample},new VirtualFile[]{inContent,inProject2Web,inProject3Web,inExcluded,inProject1Root,inTest,inWeb,inWebSub},true);
    doTestResolveScope(new VirtualFile[]{inProject1Root,inTest},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Lib,inProject3Lib,inProject1Root,inLib,inPackages,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inContent,inProject2Web,inProject3Web,inExcluded},true);
    doTestResolveScope(new VirtualFile[]{inProject1Root,inLib,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Lib,inProject3Lib,inProject1Root,inLib,inPackages,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inContent,inProject2Web,inProject3Web,inExcluded},false);
    doTestUseScope(new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inContent,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib,inProject1Root,inLib,inPackages,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inExcluded});
    doTestUseScope(new VirtualFile[]{inContent},new VirtualFile[]{inContent},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib,inProject1Root,inLib,inPackages,inWeb,inWebSub,inTest,inExample});
    doTestUseScope(new VirtualFile[]{inPackages,inLib},new VirtualFile[]{inContent,inProject1Root,inLib,inPackages,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib});
    doTestUseScope(new VirtualFile[]{inProject1Root,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inContent,inProject1Root,inLib,inWeb,inWebSub,inTest,inExample},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inPackages,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib});
    doTestUseScope(new VirtualFile[]{inProject2Lib},new VirtualFile[]{inContent,inPackages,inProject1Root,inLib,inWeb,inWebSub,inTest,inExample,inProject2Web,inProject2Lib},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inProject3Web,inProject3Lib});
    doTestUseScope(new VirtualFile[]{inProject2Web},new VirtualFile[]{inProject2Web,inProject2Lib,inContent},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inPackages,inProject1Root,inLib,inWeb,inWebSub,inTest,inExample,inProject3Web,inProject3Lib});
    doTestUseScope(new VirtualFile[]{inProject3Lib},new VirtualFile[]{inContent,inPackages,inProject1Root,inLib,inWeb,inWebSub,inTest,inExample,inProject2Web,inProject2Lib,inProject3Web,inProject3Lib},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2});
    doTestUseScope(new VirtualFile[]{inProject3Web},new VirtualFile[]{inContent,inProject3Web,inProject3Lib},new VirtualFile[]{inSdk1,inSdk2,inIdeLib1,inIdeLib2,inPackages,inProject1Root,inLib,inWeb,inWebSub,inTest,inExample,inProject2Web,inProject2Lib});
  }
  finally {
    DartTestUtils.resetModuleRoots(myModule);
  }
}
