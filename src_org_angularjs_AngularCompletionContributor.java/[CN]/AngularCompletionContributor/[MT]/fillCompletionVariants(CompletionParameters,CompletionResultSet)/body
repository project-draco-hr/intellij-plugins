{
  result.addElement(LookupElementBuilder.create("huzzah"));
  final Project project=parameters.getOriginalFile().getProject();
  GlobalSearchScope scope=ProjectScope.getProjectScope(project);
  Collection<JSQualifiedNamedElement> scopes=JSResolveUtil.findElementsByName("$scope",project,scope);
  String s="\\$scope\\.(\\w*)";
  final FindManager findManager=FindManager.getInstance(project);
  final FindModel findModel=(FindModel)findManager.getFindInFileModel().clone();
  findModel.setRegularExpressions(true);
  findModel.setFileFilter("*.js, *.html");
  findModel.setStringToFind(s);
  findModel.setStringToReplace("$1");
  CommonProcessors.CollectProcessor<Usage> collectProcessor=new CommonProcessors.CollectProcessor<Usage>();
  PsiDirectory directory=PsiManager.getInstance(project).findDirectory(project.getBaseDir());
  FindInProjectUtil.findUsages(findModel,directory,project,true,new AdapterProcessor<UsageInfo,Usage>(collectProcessor,UsageInfo2UsageAdapter.CONVERTER));
  final Collection<Usage> usages=collectProcessor.getResults();
  Runnable runnable=new Runnable(){
    public void run(){
      for (      final Usage r : usages) {
        final UsageInfo2UsageAdapter usage=(UsageInfo2UsageAdapter)r;
        if (usage.getFile().getName().startsWith("angular"))         continue;
        usage.processRangeMarkers(new Processor<Segment>(){
          @Override public boolean process(          Segment segment){
            try {
              final int textOffset=segment.getStartOffset();
              final int textEndOffset=segment.getEndOffset();
              Document document=usage.getDocument();
              CharSequence charsSequence=document.getCharsSequence();
              final CharSequence foundString=charsSequence.subSequence(textOffset,textEndOffset);
              String s=foundString.toString();
              String regExMatch=FindManager.getInstance(project).getStringToReplace(s,findModel,textOffset,document.getText());
              System.out.println(regExMatch);
              PsiElement element=PsiUtil.getElementAtOffset(((UsageInfo2UsageAdapter)r).getUsageInfo().getFile(),textOffset + 1);
              PsiElement propElement=PsiUtil.getElementAtOffset(((UsageInfo2UsageAdapter)r).getUsageInfo().getFile(),textOffset + 1 + "$scope".length());
              String elementText=element.getText();
              System.out.println(elementText + ": " + regExMatch+ " - "+ s);
              result.addElement(LookupElementBuilder.create(propElement,propElement.getText()));
              return true;
            }
 catch (            FindManager.MalformedReplacementStringException e1) {
              e1.printStackTrace();
            }
            return false;
          }
        }
);
      }
      result.addLookupAdvertisement("Results based on all '$scope's");
      GlobalSearchScope scope=ProjectScope.getProjectScope(project);
    }
  }
;
  ApplicationManager.getApplication().runReadAction(runnable);
}
