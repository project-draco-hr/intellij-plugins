{
  final List<RelationshipInfo> result=new ArrayList<RelationshipInfo>();
  Pair<PsiElement,PsiElement> beforeAndAfter=adjustBeforeAfter();
  for (  PsiFilter<JSReferenceExpression> filter : getRelationshipFilters()) {
    final Map<JSReferenceExpression,FileStatus> map=PsiChangeTracker.getElementsChanged(beforeAndAfter.second,beforeAndAfter.first,filter);
    for (    JSReferenceExpression expression : map.keySet()) {
      JSClass sourceClass=PsiTreeUtil.getParentOfType(expression,JSClass.class);
      if (sourceClass == null) {
        continue;
      }
      if (InjectedLanguageManager.getInstance(sourceClass.getProject()).getInjectionHost(sourceClass) != null) {
        sourceClass=JSResolveUtil.getXmlBackedClass((JSFile)sourceClass.getContainingFile());
      }
      JSReferenceList refList=(JSReferenceList)expression.getParent();
      final JSExpression[] references=refList.getExpressions();
      final JSClass[] referencedClasses=refList.getReferencedClasses();
      JSClass targetClass=null;
      for (int i=0; i < references.length; i++) {
        if (references[i] == expression) {
          targetClass=i < referencedClasses.length ? referencedClasses[i] : null;
          break;
        }
      }
      if (targetClass == null) {
        continue;
      }
      EdgeType edgeType=filter == IMPLEMENTS_FILTER ? EdgeType.IMPLEMENTS : EdgeType.EXTENDS;
      result.add(new RelationshipInfo(sourceClass.getQualifiedName(),targetClass.getQualifiedName(),edgeType,map.get(expression)));
    }
  }
  return result.toArray(new RelationshipInfo[result.size()]);
}
