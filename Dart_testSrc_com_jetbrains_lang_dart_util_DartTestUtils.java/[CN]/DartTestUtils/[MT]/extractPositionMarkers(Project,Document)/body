{
  final Pattern caretPattern=Pattern.compile("<caret(?: expected=\'([^\']*)\')?(?: completionEquals=\'([^\']*)\')?(?: completionIncludes=\'([^\']*)\')?(?: completionExcludes=\'([^\']*)\')?>");
  final List<CaretPositionInfo> result=new ArrayList<>();
  WriteCommandAction.runWriteCommandAction(null,new Runnable(){
    @Override public void run(){
      while (true) {
        Matcher m=caretPattern.matcher(document.getImmutableCharSequence());
        if (m.find()) {
          document.deleteString(m.start(),m.end());
          final int caretOffset=m.start();
          final String expected=m.group(1);
          final String completionEqualsRaw=m.group(2);
          final List<String> completionEqualsList=completionEqualsRaw == null ? null : StringUtil.split(completionEqualsRaw,",");
          final String completionIncludesRaw=m.group(3);
          final List<String> completionIncludesList=completionIncludesRaw == null ? null : StringUtil.split(completionIncludesRaw,",");
          final String completionExcludesRaw=m.group(4);
          final List<String> completionExcludesList=completionExcludesRaw == null ? null : StringUtil.split(completionExcludesRaw,",");
          result.add(new CaretPositionInfo(caretOffset,expected,completionEqualsList,completionIncludesList,completionExcludesList));
        }
 else {
          break;
        }
      }
    }
  }
);
  if (!result.isEmpty()) {
    PsiDocumentManager.getInstance(project).commitDocument(document);
  }
  return result;
}
