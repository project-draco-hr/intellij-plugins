{
  final String sdkHome;
  if (realSdk) {
    sdkHome=System.getProperty("dart.sdk");
    if (sdkHome == null) {
      Assert.fail("To run tests that use Dart Analysis Server you need to add '-Ddart.sdk=[real SDK home]' to the VM Options field of " + "the corresponding JUnit run configuration (Run | Edit Configurations)");
    }
    if (!DartSdkUtil.isDartSdkHome(sdkHome)) {
      Assert.fail("Incorrect path to the Dart SDK (" + sdkHome + ") is set as '-Ddart.sdk' VM option of "+ "the corresponding JUnit run configuration (Run | Edit Configurations)");
    }
    VfsRootAccess.allowRootAccessTemporarily(disposable,sdkHome);
  }
 else {
    sdkHome=SDK_HOME_PATH;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      DartSdkGlobalLibUtil.ensureDartSdkConfigured(sdkHome);
      DartSdkGlobalLibUtil.enableDartSdk(module);
    }
  }
);
  Disposer.register(disposable,new Disposable(){
    @Override public void dispose(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          if (!module.isDisposed()) {
            DartSdkGlobalLibUtil.disableDartSdk(Collections.singletonList(module));
          }
          final LibraryTable.ModifiableModel model=ApplicationLibraryTable.getApplicationTable().getModifiableModel();
          final Library library=model.getLibraryByName(DartSdk.DART_SDK_GLOBAL_LIB_NAME);
          if (library != null) {
            model.removeLibrary(library);
            model.commit();
          }
        }
      }
);
    }
  }
);
  final DartSdk dartSdk=DartSdk.getDartSdk(module.getProject());
  Assert.assertNotNull(dartSdk);
  return dartSdk;
}
