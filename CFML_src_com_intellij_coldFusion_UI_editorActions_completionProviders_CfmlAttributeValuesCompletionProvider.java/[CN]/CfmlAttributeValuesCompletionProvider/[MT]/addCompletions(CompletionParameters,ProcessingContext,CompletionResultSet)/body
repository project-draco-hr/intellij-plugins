{
  PsiElement element=parameters.getPosition();
  while (element != null && !(element instanceof CfmlAttributeImpl)) {
    element=element.getParent();
  }
  if (element == null) {
    return;
  }
  CfmlAttributeImpl attribute=(CfmlAttributeImpl)element;
  String attributeName=attribute.getFirstChild().getText();
  while (element != null && !(element instanceof CfmlTag)) {
    element=element.getParent();
  }
  if (element == null) {
    return;
  }
  CfmlTag tag=(CfmlTag)element;
  String tagName=tag.getTagName();
  String[] attributeValue=CfmlUtil.getAttributeValues(tagName,attributeName,parameters.getPosition().getProject());
  if ("type".equalsIgnoreCase(attributeName) && "cfargument".equalsIgnoreCase(tagName) || "returntype".equalsIgnoreCase(attributeName) && "cffunction".equalsIgnoreCase(tagName)) {
    Object[] objects=CfmlComponentReference.buildVariants(attribute.getPureAttributeValue(),element.getContainingFile(),element.getProject(),null,true);
    for (    Object o : objects) {
      result.addElement((LookupElement)o);
    }
  }
  for (  String s : attributeValue) {
    result.addElement(LookupElementBuilder.create(s).withCaseSensitivity(false));
  }
}
