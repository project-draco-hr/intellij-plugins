{
  final DartSdk sdk=DartSdk.getGlobalDartSdk();
  if (sdk == null || !DartAnalysisServerService.isDartSdkVersionSufficient(sdk)) {
    DartAnalysisServerService.getInstance().stopServer();
  }
  final List<String> newIncludedRoots=new SmartList<>();
  final List<String> newExcludedRoots=new SmartList<>();
  if (sdk != null) {
    for (    Project project : myTrackedProjects) {
      @SuppressWarnings("ConstantConditions") final String dotIdeaPath=PathUtil.getParentPath(project.getProjectFilePath());
      if (dotIdeaPath.endsWith("/.idea")) {
        newExcludedRoots.add(FileUtil.toSystemDependentName(dotIdeaPath));
      }
      for (      Module module : DartSdkGlobalLibUtil.getModulesWithDartSdkEnabled(project)) {
        final Set<String> excludedPackageSymlinkUrls=getExcludedPackageSymlinkUrls(module);
        for (        ContentEntry contentEntry : ModuleRootManager.getInstance(module).getContentEntries()) {
          final String contentEntryUrl=contentEntry.getUrl();
          if (contentEntryUrl.startsWith(URLUtil.FILE_PROTOCOL + URLUtil.SCHEME_SEPARATOR)) {
            newIncludedRoots.add(FileUtil.toSystemDependentName(VfsUtilCore.urlToPath(contentEntryUrl)));
            for (            String excludedUrl : contentEntry.getExcludeFolderUrls()) {
              if (excludedUrl.startsWith(contentEntryUrl) && !excludedPackageSymlinkUrls.contains(excludedUrl)) {
                newExcludedRoots.add(FileUtil.toSystemDependentName(VfsUtilCore.urlToPath(excludedUrl)));
              }
            }
          }
        }
      }
    }
  }
  if (!myIncludedRoots.equals(newIncludedRoots) || !myExcludedRoots.equals(newExcludedRoots)) {
    myIncludedRoots.clear();
    myExcludedRoots.clear();
    if (DartAnalysisServerService.getInstance().updateRoots(newIncludedRoots,newExcludedRoots)) {
      myIncludedRoots.addAll(newIncludedRoots);
      myExcludedRoots.addAll(newExcludedRoots);
    }
  }
}
