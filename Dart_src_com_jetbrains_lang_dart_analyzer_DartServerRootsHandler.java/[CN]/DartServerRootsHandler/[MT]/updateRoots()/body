{
  final DartSdk sdk=DartSdk.getGlobalDartSdk();
  if (sdk == null || !DartAnalysisServerService.isDartSdkVersionSufficient(sdk)) {
    DartAnalysisServerService.getInstance().stopServer();
  }
  final List<String> newIncludedRoots=new SmartList<String>();
  final List<String> newExcludedRoots=new SmartList<String>();
  final Map<String,String> newPackageRoots=new SmartHashMap<String,String>();
  if (sdk != null) {
    for (    Project project : myTrackedProjects) {
      final String dotIdeaPath=PathUtil.getParentPath(project.getProjectFilePath());
      if (dotIdeaPath.endsWith("/.idea")) {
        newExcludedRoots.add(FileUtil.toSystemDependentName(dotIdeaPath));
      }
      for (      Module module : DartSdkGlobalLibUtil.getModulesWithDartSdkGlobalLibAttached(project,sdk.getGlobalLibName())) {
        newPackageRoots.putAll(DartConfigurable.getContentRootPathToCustomPackageRootMap(module));
        final Set<String> excludedPackageSymlinkUrls=getExcludedPackageSymlinkUrls(module);
        for (        ContentEntry contentEntry : ModuleRootManager.getInstance(module).getContentEntries()) {
          newIncludedRoots.add(FileUtil.toSystemDependentName(VfsUtilCore.urlToPath(contentEntry.getUrl())));
          for (          String excludedUrl : contentEntry.getExcludeFolderUrls()) {
            if (!excludedPackageSymlinkUrls.contains(excludedUrl)) {
              newExcludedRoots.add(FileUtil.toSystemDependentName(VfsUtilCore.urlToPath(excludedUrl)));
            }
          }
        }
      }
    }
  }
  if (!myIncludedRoots.equals(newIncludedRoots) || !myExcludedRoots.equals(newExcludedRoots) || !myPackageRoots.equals(newPackageRoots)) {
    myIncludedRoots.clear();
    myExcludedRoots.clear();
    myPackageRoots.clear();
    if (DartAnalysisServerService.getInstance().updateRoots(newIncludedRoots,newExcludedRoots,newPackageRoots)) {
      myIncludedRoots.addAll(newIncludedRoots);
      myExcludedRoots.addAll(newExcludedRoots);
      myPackageRoots.putAll(newPackageRoots);
    }
  }
}
